

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Thu Apr  4 22:32:31 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1938
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.05
    65                           ; Generated 20/12/2018 GMT
    66                           ; 
    67                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16F1938 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  0010                     	;# 
   114  0011                     	;# 
   115  0012                     	;# 
   116  0013                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  001E                     	;# 
   127  001F                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  0090                     	;# 
   132  0091                     	;# 
   133  0092                     	;# 
   134  0093                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0098                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009B                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  010C                     	;# 
   147  010D                     	;# 
   148  010E                     	;# 
   149  0110                     	;# 
   150  0111                     	;# 
   151  0112                     	;# 
   152  0113                     	;# 
   153  0114                     	;# 
   154  0115                     	;# 
   155  0116                     	;# 
   156  0117                     	;# 
   157  0118                     	;# 
   158  0119                     	;# 
   159  011A                     	;# 
   160  011B                     	;# 
   161  011D                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0191                     	;# 
   165  0191                     	;# 
   166  0192                     	;# 
   167  0193                     	;# 
   168  0193                     	;# 
   169  0193                     	;# 
   170  0194                     	;# 
   171  0195                     	;# 
   172  0196                     	;# 
   173  0199                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019F                     	;# 
   184  020D                     	;# 
   185  0210                     	;# 
   186  0211                     	;# 
   187  0212                     	;# 
   188  0213                     	;# 
   189  0214                     	;# 
   190  0215                     	;# 
   191  0215                     	;# 
   192  0216                     	;# 
   193  0217                     	;# 
   194  0291                     	;# 
   195  0291                     	;# 
   196  0292                     	;# 
   197  0293                     	;# 
   198  0294                     	;# 
   199  0295                     	;# 
   200  0295                     	;# 
   201  0296                     	;# 
   202  0298                     	;# 
   203  0298                     	;# 
   204  0299                     	;# 
   205  029A                     	;# 
   206  029B                     	;# 
   207  029C                     	;# 
   208  029C                     	;# 
   209  029D                     	;# 
   210  029E                     	;# 
   211  029F                     	;# 
   212  0311                     	;# 
   213  0311                     	;# 
   214  0312                     	;# 
   215  0313                     	;# 
   216  0314                     	;# 
   217  0315                     	;# 
   218  0315                     	;# 
   219  0316                     	;# 
   220  0318                     	;# 
   221  0318                     	;# 
   222  0319                     	;# 
   223  031A                     	;# 
   224  031C                     	;# 
   225  031C                     	;# 
   226  031D                     	;# 
   227  031E                     	;# 
   228  0394                     	;# 
   229  0395                     	;# 
   230  0396                     	;# 
   231  0415                     	;# 
   232  0416                     	;# 
   233  0417                     	;# 
   234  041C                     	;# 
   235  041D                     	;# 
   236  041E                     	;# 
   237  0791                     	;# 
   238  0792                     	;# 
   239  0793                     	;# 
   240  0794                     	;# 
   241  0795                     	;# 
   242  0798                     	;# 
   243  0799                     	;# 
   244  07A0                     	;# 
   245  07A1                     	;# 
   246  07A3                     	;# 
   247  07A4                     	;# 
   248  07A6                     	;# 
   249  07A7                     	;# 
   250  07A9                     	;# 
   251  07AA                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  001E                     	;# 
   292  001F                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0093                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  010E                     	;# 
   314  0110                     	;# 
   315  0111                     	;# 
   316  0112                     	;# 
   317  0113                     	;# 
   318  0114                     	;# 
   319  0115                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  0118                     	;# 
   323  0119                     	;# 
   324  011A                     	;# 
   325  011B                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  0191                     	;# 
   330  0191                     	;# 
   331  0192                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0199                     	;# 
   339  019A                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019C                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020D                     	;# 
   350  0210                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0294                     	;# 
   364  0295                     	;# 
   365  0295                     	;# 
   366  0296                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  029B                     	;# 
   372  029C                     	;# 
   373  029C                     	;# 
   374  029D                     	;# 
   375  029E                     	;# 
   376  029F                     	;# 
   377  0311                     	;# 
   378  0311                     	;# 
   379  0312                     	;# 
   380  0313                     	;# 
   381  0314                     	;# 
   382  0315                     	;# 
   383  0315                     	;# 
   384  0316                     	;# 
   385  0318                     	;# 
   386  0318                     	;# 
   387  0319                     	;# 
   388  031A                     	;# 
   389  031C                     	;# 
   390  031C                     	;# 
   391  031D                     	;# 
   392  031E                     	;# 
   393  0394                     	;# 
   394  0395                     	;# 
   395  0396                     	;# 
   396  0415                     	;# 
   397  0416                     	;# 
   398  0417                     	;# 
   399  041C                     	;# 
   400  041D                     	;# 
   401  041E                     	;# 
   402  0791                     	;# 
   403  0792                     	;# 
   404  0793                     	;# 
   405  0794                     	;# 
   406  0795                     	;# 
   407  0798                     	;# 
   408  0799                     	;# 
   409  07A0                     	;# 
   410  07A1                     	;# 
   411  07A3                     	;# 
   412  07A4                     	;# 
   413  07A6                     	;# 
   414  07A7                     	;# 
   415  07A9                     	;# 
   416  07AA                     	;# 
   417  0FE4                     	;# 
   418  0FE5                     	;# 
   419  0FE6                     	;# 
   420  0FE7                     	;# 
   421  0FE8                     	;# 
   422  0FE9                     	;# 
   423  0FEA                     	;# 
   424  0FEB                     	;# 
   425  0FED                     	;# 
   426  0FEE                     	;# 
   427  0FEF                     	;# 
   428  0000                     	;# 
   429  0001                     	;# 
   430  0002                     	;# 
   431  0003                     	;# 
   432  0004                     	;# 
   433  0005                     	;# 
   434  0006                     	;# 
   435  0007                     	;# 
   436  0008                     	;# 
   437  0009                     	;# 
   438  000A                     	;# 
   439  000B                     	;# 
   440  000C                     	;# 
   441  000D                     	;# 
   442  000E                     	;# 
   443  0010                     	;# 
   444  0011                     	;# 
   445  0012                     	;# 
   446  0013                     	;# 
   447  0015                     	;# 
   448  0016                     	;# 
   449  0016                     	;# 
   450  0017                     	;# 
   451  0018                     	;# 
   452  0019                     	;# 
   453  001A                     	;# 
   454  001B                     	;# 
   455  001C                     	;# 
   456  001E                     	;# 
   457  001F                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  0090                     	;# 
   462  0091                     	;# 
   463  0092                     	;# 
   464  0093                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0097                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009A                     	;# 
   471  009B                     	;# 
   472  009B                     	;# 
   473  009C                     	;# 
   474  009D                     	;# 
   475  009E                     	;# 
   476  010C                     	;# 
   477  010D                     	;# 
   478  010E                     	;# 
   479  0110                     	;# 
   480  0111                     	;# 
   481  0112                     	;# 
   482  0113                     	;# 
   483  0114                     	;# 
   484  0115                     	;# 
   485  0116                     	;# 
   486  0117                     	;# 
   487  0118                     	;# 
   488  0119                     	;# 
   489  011A                     	;# 
   490  011B                     	;# 
   491  011D                     	;# 
   492  018C                     	;# 
   493  018D                     	;# 
   494  0191                     	;# 
   495  0191                     	;# 
   496  0192                     	;# 
   497  0193                     	;# 
   498  0193                     	;# 
   499  0193                     	;# 
   500  0194                     	;# 
   501  0195                     	;# 
   502  0196                     	;# 
   503  0199                     	;# 
   504  019A                     	;# 
   505  019B                     	;# 
   506  019B                     	;# 
   507  019B                     	;# 
   508  019B                     	;# 
   509  019C                     	;# 
   510  019C                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019F                     	;# 
   514  020D                     	;# 
   515  0210                     	;# 
   516  0211                     	;# 
   517  0212                     	;# 
   518  0213                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0216                     	;# 
   523  0217                     	;# 
   524  0291                     	;# 
   525  0291                     	;# 
   526  0292                     	;# 
   527  0293                     	;# 
   528  0294                     	;# 
   529  0295                     	;# 
   530  0295                     	;# 
   531  0296                     	;# 
   532  0298                     	;# 
   533  0298                     	;# 
   534  0299                     	;# 
   535  029A                     	;# 
   536  029B                     	;# 
   537  029C                     	;# 
   538  029C                     	;# 
   539  029D                     	;# 
   540  029E                     	;# 
   541  029F                     	;# 
   542  0311                     	;# 
   543  0311                     	;# 
   544  0312                     	;# 
   545  0313                     	;# 
   546  0314                     	;# 
   547  0315                     	;# 
   548  0315                     	;# 
   549  0316                     	;# 
   550  0318                     	;# 
   551  0318                     	;# 
   552  0319                     	;# 
   553  031A                     	;# 
   554  031C                     	;# 
   555  031C                     	;# 
   556  031D                     	;# 
   557  031E                     	;# 
   558  0394                     	;# 
   559  0395                     	;# 
   560  0396                     	;# 
   561  0415                     	;# 
   562  0416                     	;# 
   563  0417                     	;# 
   564  041C                     	;# 
   565  041D                     	;# 
   566  041E                     	;# 
   567  0791                     	;# 
   568  0792                     	;# 
   569  0793                     	;# 
   570  0794                     	;# 
   571  0795                     	;# 
   572  0798                     	;# 
   573  0799                     	;# 
   574  07A0                     	;# 
   575  07A1                     	;# 
   576  07A3                     	;# 
   577  07A4                     	;# 
   578  07A6                     	;# 
   579  07A7                     	;# 
   580  07A9                     	;# 
   581  07AA                     	;# 
   582  0FE4                     	;# 
   583  0FE5                     	;# 
   584  0FE6                     	;# 
   585  0FE7                     	;# 
   586  0FE8                     	;# 
   587  0FE9                     	;# 
   588  0FEA                     	;# 
   589  0FEB                     	;# 
   590  0FED                     	;# 
   591  0FEE                     	;# 
   592  0FEF                     	;# 
   593  0000                     	;# 
   594  0001                     	;# 
   595  0002                     	;# 
   596  0003                     	;# 
   597  0004                     	;# 
   598  0005                     	;# 
   599  0006                     	;# 
   600  0007                     	;# 
   601  0008                     	;# 
   602  0009                     	;# 
   603  000A                     	;# 
   604  000B                     	;# 
   605  000C                     	;# 
   606  000D                     	;# 
   607  000E                     	;# 
   608  0010                     	;# 
   609  0011                     	;# 
   610  0012                     	;# 
   611  0013                     	;# 
   612  0015                     	;# 
   613  0016                     	;# 
   614  0016                     	;# 
   615  0017                     	;# 
   616  0018                     	;# 
   617  0019                     	;# 
   618  001A                     	;# 
   619  001B                     	;# 
   620  001C                     	;# 
   621  001E                     	;# 
   622  001F                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0093                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0098                     	;# 
   634  0099                     	;# 
   635  009A                     	;# 
   636  009B                     	;# 
   637  009B                     	;# 
   638  009C                     	;# 
   639  009D                     	;# 
   640  009E                     	;# 
   641  010C                     	;# 
   642  010D                     	;# 
   643  010E                     	;# 
   644  0110                     	;# 
   645  0111                     	;# 
   646  0112                     	;# 
   647  0113                     	;# 
   648  0114                     	;# 
   649  0115                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  0118                     	;# 
   653  0119                     	;# 
   654  011A                     	;# 
   655  011B                     	;# 
   656  011D                     	;# 
   657  018C                     	;# 
   658  018D                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0193                     	;# 
   665  0194                     	;# 
   666  0195                     	;# 
   667  0196                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0294                     	;# 
   694  0295                     	;# 
   695  0295                     	;# 
   696  0296                     	;# 
   697  0298                     	;# 
   698  0298                     	;# 
   699  0299                     	;# 
   700  029A                     	;# 
   701  029B                     	;# 
   702  029C                     	;# 
   703  029C                     	;# 
   704  029D                     	;# 
   705  029E                     	;# 
   706  029F                     	;# 
   707  0311                     	;# 
   708  0311                     	;# 
   709  0312                     	;# 
   710  0313                     	;# 
   711  0314                     	;# 
   712  0315                     	;# 
   713  0315                     	;# 
   714  0316                     	;# 
   715  0318                     	;# 
   716  0318                     	;# 
   717  0319                     	;# 
   718  031A                     	;# 
   719  031C                     	;# 
   720  031C                     	;# 
   721  031D                     	;# 
   722  031E                     	;# 
   723  0394                     	;# 
   724  0395                     	;# 
   725  0396                     	;# 
   726  0415                     	;# 
   727  0416                     	;# 
   728  0417                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  0791                     	;# 
   733  0792                     	;# 
   734  0793                     	;# 
   735  0794                     	;# 
   736  0795                     	;# 
   737  0798                     	;# 
   738  0799                     	;# 
   739  07A0                     	;# 
   740  07A1                     	;# 
   741  07A3                     	;# 
   742  07A4                     	;# 
   743  07A6                     	;# 
   744  07A7                     	;# 
   745  07A9                     	;# 
   746  07AA                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  0010                     	;# 
   774  0011                     	;# 
   775  0012                     	;# 
   776  0013                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  001E                     	;# 
   787  001F                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  0090                     	;# 
   792  0091                     	;# 
   793  0092                     	;# 
   794  0093                     	;# 
   795  0095                     	;# 
   796  0096                     	;# 
   797  0097                     	;# 
   798  0098                     	;# 
   799  0099                     	;# 
   800  009A                     	;# 
   801  009B                     	;# 
   802  009B                     	;# 
   803  009C                     	;# 
   804  009D                     	;# 
   805  009E                     	;# 
   806  010C                     	;# 
   807  010D                     	;# 
   808  010E                     	;# 
   809  0110                     	;# 
   810  0111                     	;# 
   811  0112                     	;# 
   812  0113                     	;# 
   813  0114                     	;# 
   814  0115                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  0118                     	;# 
   818  0119                     	;# 
   819  011A                     	;# 
   820  011B                     	;# 
   821  011D                     	;# 
   822  018C                     	;# 
   823  018D                     	;# 
   824  0191                     	;# 
   825  0191                     	;# 
   826  0192                     	;# 
   827  0193                     	;# 
   828  0193                     	;# 
   829  0193                     	;# 
   830  0194                     	;# 
   831  0195                     	;# 
   832  0196                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019C                     	;# 
   840  019C                     	;# 
   841  019D                     	;# 
   842  019E                     	;# 
   843  019F                     	;# 
   844  020D                     	;# 
   845  0210                     	;# 
   846  0211                     	;# 
   847  0212                     	;# 
   848  0213                     	;# 
   849  0214                     	;# 
   850  0215                     	;# 
   851  0215                     	;# 
   852  0216                     	;# 
   853  0217                     	;# 
   854  0291                     	;# 
   855  0291                     	;# 
   856  0292                     	;# 
   857  0293                     	;# 
   858  0294                     	;# 
   859  0295                     	;# 
   860  0295                     	;# 
   861  0296                     	;# 
   862  0298                     	;# 
   863  0298                     	;# 
   864  0299                     	;# 
   865  029A                     	;# 
   866  029B                     	;# 
   867  029C                     	;# 
   868  029C                     	;# 
   869  029D                     	;# 
   870  029E                     	;# 
   871  029F                     	;# 
   872  0311                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0315                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0318                     	;# 
   881  0318                     	;# 
   882  0319                     	;# 
   883  031A                     	;# 
   884  031C                     	;# 
   885  031C                     	;# 
   886  031D                     	;# 
   887  031E                     	;# 
   888  0394                     	;# 
   889  0395                     	;# 
   890  0396                     	;# 
   891  0415                     	;# 
   892  0416                     	;# 
   893  0417                     	;# 
   894  041C                     	;# 
   895  041D                     	;# 
   896  041E                     	;# 
   897  0791                     	;# 
   898  0792                     	;# 
   899  0793                     	;# 
   900  0794                     	;# 
   901  0795                     	;# 
   902  0798                     	;# 
   903  0799                     	;# 
   904  07A0                     	;# 
   905  07A1                     	;# 
   906  07A3                     	;# 
   907  07A4                     	;# 
   908  07A6                     	;# 
   909  07A7                     	;# 
   910  07A9                     	;# 
   911  07AA                     	;# 
   912  0FE4                     	;# 
   913  0FE5                     	;# 
   914  0FE6                     	;# 
   915  0FE7                     	;# 
   916  0FE8                     	;# 
   917  0FE9                     	;# 
   918  0FEA                     	;# 
   919  0FEB                     	;# 
   920  0FED                     	;# 
   921  0FEE                     	;# 
   922  0FEF                     	;# 
   923  0000                     	;# 
   924  0001                     	;# 
   925  0002                     	;# 
   926  0003                     	;# 
   927  0004                     	;# 
   928  0005                     	;# 
   929  0006                     	;# 
   930  0007                     	;# 
   931  0008                     	;# 
   932  0009                     	;# 
   933  000A                     	;# 
   934  000B                     	;# 
   935  000C                     	;# 
   936  000D                     	;# 
   937  000E                     	;# 
   938  0010                     	;# 
   939  0011                     	;# 
   940  0012                     	;# 
   941  0013                     	;# 
   942  0015                     	;# 
   943  0016                     	;# 
   944  0016                     	;# 
   945  0017                     	;# 
   946  0018                     	;# 
   947  0019                     	;# 
   948  001A                     	;# 
   949  001B                     	;# 
   950  001C                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  008C                     	;# 
   954  008D                     	;# 
   955  008E                     	;# 
   956  0090                     	;# 
   957  0091                     	;# 
   958  0092                     	;# 
   959  0093                     	;# 
   960  0095                     	;# 
   961  0096                     	;# 
   962  0097                     	;# 
   963  0098                     	;# 
   964  0099                     	;# 
   965  009A                     	;# 
   966  009B                     	;# 
   967  009B                     	;# 
   968  009C                     	;# 
   969  009D                     	;# 
   970  009E                     	;# 
   971  010C                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  0110                     	;# 
   975  0111                     	;# 
   976  0112                     	;# 
   977  0113                     	;# 
   978  0114                     	;# 
   979  0115                     	;# 
   980  0116                     	;# 
   981  0117                     	;# 
   982  0118                     	;# 
   983  0119                     	;# 
   984  011A                     	;# 
   985  011B                     	;# 
   986  011D                     	;# 
   987  018C                     	;# 
   988  018D                     	;# 
   989  0191                     	;# 
   990  0191                     	;# 
   991  0192                     	;# 
   992  0193                     	;# 
   993  0193                     	;# 
   994  0193                     	;# 
   995  0194                     	;# 
   996  0195                     	;# 
   997  0196                     	;# 
   998  0199                     	;# 
   999  019A                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020D                     	;# 
  1010  0210                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0294                     	;# 
  1024  0295                     	;# 
  1025  0295                     	;# 
  1026  0296                     	;# 
  1027  0298                     	;# 
  1028  0298                     	;# 
  1029  0299                     	;# 
  1030  029A                     	;# 
  1031  029B                     	;# 
  1032  029C                     	;# 
  1033  029C                     	;# 
  1034  029D                     	;# 
  1035  029E                     	;# 
  1036  029F                     	;# 
  1037  0311                     	;# 
  1038  0311                     	;# 
  1039  0312                     	;# 
  1040  0313                     	;# 
  1041  0314                     	;# 
  1042  0315                     	;# 
  1043  0315                     	;# 
  1044  0316                     	;# 
  1045  0318                     	;# 
  1046  0318                     	;# 
  1047  0319                     	;# 
  1048  031A                     	;# 
  1049  031C                     	;# 
  1050  031C                     	;# 
  1051  031D                     	;# 
  1052  031E                     	;# 
  1053  0394                     	;# 
  1054  0395                     	;# 
  1055  0396                     	;# 
  1056  0415                     	;# 
  1057  0416                     	;# 
  1058  0417                     	;# 
  1059  041C                     	;# 
  1060  041D                     	;# 
  1061  041E                     	;# 
  1062  0791                     	;# 
  1063  0792                     	;# 
  1064  0793                     	;# 
  1065  0794                     	;# 
  1066  0795                     	;# 
  1067  0798                     	;# 
  1068  0799                     	;# 
  1069  07A0                     	;# 
  1070  07A1                     	;# 
  1071  07A3                     	;# 
  1072  07A4                     	;# 
  1073  07A6                     	;# 
  1074  07A7                     	;# 
  1075  07A9                     	;# 
  1076  07AA                     	;# 
  1077  0FE4                     	;# 
  1078  0FE5                     	;# 
  1079  0FE6                     	;# 
  1080  0FE7                     	;# 
  1081  0FE8                     	;# 
  1082  0FE9                     	;# 
  1083  0FEA                     	;# 
  1084  0FEB                     	;# 
  1085  0FED                     	;# 
  1086  0FEE                     	;# 
  1087  0FEF                     	;# 
  1088  0000                     	;# 
  1089  0001                     	;# 
  1090  0002                     	;# 
  1091  0003                     	;# 
  1092  0004                     	;# 
  1093  0005                     	;# 
  1094  0006                     	;# 
  1095  0007                     	;# 
  1096  0008                     	;# 
  1097  0009                     	;# 
  1098  000A                     	;# 
  1099  000B                     	;# 
  1100  000C                     	;# 
  1101  000D                     	;# 
  1102  000E                     	;# 
  1103  0010                     	;# 
  1104  0011                     	;# 
  1105  0012                     	;# 
  1106  0013                     	;# 
  1107  0015                     	;# 
  1108  0016                     	;# 
  1109  0016                     	;# 
  1110  0017                     	;# 
  1111  0018                     	;# 
  1112  0019                     	;# 
  1113  001A                     	;# 
  1114  001B                     	;# 
  1115  001C                     	;# 
  1116  001E                     	;# 
  1117  001F                     	;# 
  1118  008C                     	;# 
  1119  008D                     	;# 
  1120  008E                     	;# 
  1121  0090                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0095                     	;# 
  1126  0096                     	;# 
  1127  0097                     	;# 
  1128  0098                     	;# 
  1129  0099                     	;# 
  1130  009A                     	;# 
  1131  009B                     	;# 
  1132  009B                     	;# 
  1133  009C                     	;# 
  1134  009D                     	;# 
  1135  009E                     	;# 
  1136  010C                     	;# 
  1137  010D                     	;# 
  1138  010E                     	;# 
  1139  0110                     	;# 
  1140  0111                     	;# 
  1141  0112                     	;# 
  1142  0113                     	;# 
  1143  0114                     	;# 
  1144  0115                     	;# 
  1145  0116                     	;# 
  1146  0117                     	;# 
  1147  0118                     	;# 
  1148  0119                     	;# 
  1149  011A                     	;# 
  1150  011B                     	;# 
  1151  011D                     	;# 
  1152  018C                     	;# 
  1153  018D                     	;# 
  1154  0191                     	;# 
  1155  0191                     	;# 
  1156  0192                     	;# 
  1157  0193                     	;# 
  1158  0193                     	;# 
  1159  0193                     	;# 
  1160  0194                     	;# 
  1161  0195                     	;# 
  1162  0196                     	;# 
  1163  0199                     	;# 
  1164  019A                     	;# 
  1165  019B                     	;# 
  1166  019B                     	;# 
  1167  019B                     	;# 
  1168  019B                     	;# 
  1169  019C                     	;# 
  1170  019C                     	;# 
  1171  019D                     	;# 
  1172  019E                     	;# 
  1173  019F                     	;# 
  1174  020D                     	;# 
  1175  0210                     	;# 
  1176  0211                     	;# 
  1177  0212                     	;# 
  1178  0213                     	;# 
  1179  0214                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0216                     	;# 
  1183  0217                     	;# 
  1184  0291                     	;# 
  1185  0291                     	;# 
  1186  0292                     	;# 
  1187  0293                     	;# 
  1188  0294                     	;# 
  1189  0295                     	;# 
  1190  0295                     	;# 
  1191  0296                     	;# 
  1192  0298                     	;# 
  1193  0298                     	;# 
  1194  0299                     	;# 
  1195  029A                     	;# 
  1196  029B                     	;# 
  1197  029C                     	;# 
  1198  029C                     	;# 
  1199  029D                     	;# 
  1200  029E                     	;# 
  1201  029F                     	;# 
  1202  0311                     	;# 
  1203  0311                     	;# 
  1204  0312                     	;# 
  1205  0313                     	;# 
  1206  0314                     	;# 
  1207  0315                     	;# 
  1208  0315                     	;# 
  1209  0316                     	;# 
  1210  0318                     	;# 
  1211  0318                     	;# 
  1212  0319                     	;# 
  1213  031A                     	;# 
  1214  031C                     	;# 
  1215  031C                     	;# 
  1216  031D                     	;# 
  1217  031E                     	;# 
  1218  0394                     	;# 
  1219  0395                     	;# 
  1220  0396                     	;# 
  1221  0415                     	;# 
  1222  0416                     	;# 
  1223  0417                     	;# 
  1224  041C                     	;# 
  1225  041D                     	;# 
  1226  041E                     	;# 
  1227  0791                     	;# 
  1228  0792                     	;# 
  1229  0793                     	;# 
  1230  0794                     	;# 
  1231  0795                     	;# 
  1232  0798                     	;# 
  1233  0799                     	;# 
  1234  07A0                     	;# 
  1235  07A1                     	;# 
  1236  07A3                     	;# 
  1237  07A4                     	;# 
  1238  07A6                     	;# 
  1239  07A7                     	;# 
  1240  07A9                     	;# 
  1241  07AA                     	;# 
  1242  0FE4                     	;# 
  1243  0FE5                     	;# 
  1244  0FE6                     	;# 
  1245  0FE7                     	;# 
  1246  0FE8                     	;# 
  1247  0FE9                     	;# 
  1248  0FEA                     	;# 
  1249  0FEB                     	;# 
  1250  0FED                     	;# 
  1251  0FEE                     	;# 
  1252  0FEF                     	;# 
  1253  0000                     	;# 
  1254  0001                     	;# 
  1255  0002                     	;# 
  1256  0003                     	;# 
  1257  0004                     	;# 
  1258  0005                     	;# 
  1259  0006                     	;# 
  1260  0007                     	;# 
  1261  0008                     	;# 
  1262  0009                     	;# 
  1263  000A                     	;# 
  1264  000B                     	;# 
  1265  000C                     	;# 
  1266  000D                     	;# 
  1267  000E                     	;# 
  1268  0010                     	;# 
  1269  0011                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0015                     	;# 
  1273  0016                     	;# 
  1274  0016                     	;# 
  1275  0017                     	;# 
  1276  0018                     	;# 
  1277  0019                     	;# 
  1278  001A                     	;# 
  1279  001B                     	;# 
  1280  001C                     	;# 
  1281  001E                     	;# 
  1282  001F                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0090                     	;# 
  1287  0091                     	;# 
  1288  0092                     	;# 
  1289  0093                     	;# 
  1290  0095                     	;# 
  1291  0096                     	;# 
  1292  0097                     	;# 
  1293  0098                     	;# 
  1294  0099                     	;# 
  1295  009A                     	;# 
  1296  009B                     	;# 
  1297  009B                     	;# 
  1298  009C                     	;# 
  1299  009D                     	;# 
  1300  009E                     	;# 
  1301  010C                     	;# 
  1302  010D                     	;# 
  1303  010E                     	;# 
  1304  0110                     	;# 
  1305  0111                     	;# 
  1306  0112                     	;# 
  1307  0113                     	;# 
  1308  0114                     	;# 
  1309  0115                     	;# 
  1310  0116                     	;# 
  1311  0117                     	;# 
  1312  0118                     	;# 
  1313  0119                     	;# 
  1314  011A                     	;# 
  1315  011B                     	;# 
  1316  011D                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  0191                     	;# 
  1320  0191                     	;# 
  1321  0192                     	;# 
  1322  0193                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0199                     	;# 
  1329  019A                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019C                     	;# 
  1335  019C                     	;# 
  1336  019D                     	;# 
  1337  019E                     	;# 
  1338  019F                     	;# 
  1339  020D                     	;# 
  1340  0210                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0217                     	;# 
  1349  0291                     	;# 
  1350  0291                     	;# 
  1351  0292                     	;# 
  1352  0293                     	;# 
  1353  0294                     	;# 
  1354  0295                     	;# 
  1355  0295                     	;# 
  1356  0296                     	;# 
  1357  0298                     	;# 
  1358  0298                     	;# 
  1359  0299                     	;# 
  1360  029A                     	;# 
  1361  029B                     	;# 
  1362  029C                     	;# 
  1363  029C                     	;# 
  1364  029D                     	;# 
  1365  029E                     	;# 
  1366  029F                     	;# 
  1367  0311                     	;# 
  1368  0311                     	;# 
  1369  0312                     	;# 
  1370  0313                     	;# 
  1371  0314                     	;# 
  1372  0315                     	;# 
  1373  0315                     	;# 
  1374  0316                     	;# 
  1375  0318                     	;# 
  1376  0318                     	;# 
  1377  0319                     	;# 
  1378  031A                     	;# 
  1379  031C                     	;# 
  1380  031C                     	;# 
  1381  031D                     	;# 
  1382  031E                     	;# 
  1383  0394                     	;# 
  1384  0395                     	;# 
  1385  0396                     	;# 
  1386  0415                     	;# 
  1387  0416                     	;# 
  1388  0417                     	;# 
  1389  041C                     	;# 
  1390  041D                     	;# 
  1391  041E                     	;# 
  1392  0791                     	;# 
  1393  0792                     	;# 
  1394  0793                     	;# 
  1395  0794                     	;# 
  1396  0795                     	;# 
  1397  0798                     	;# 
  1398  0799                     	;# 
  1399  07A0                     	;# 
  1400  07A1                     	;# 
  1401  07A3                     	;# 
  1402  07A4                     	;# 
  1403  07A6                     	;# 
  1404  07A7                     	;# 
  1405  07A9                     	;# 
  1406  07AA                     	;# 
  1407  0FE4                     	;# 
  1408  0FE5                     	;# 
  1409  0FE6                     	;# 
  1410  0FE7                     	;# 
  1411  0FE8                     	;# 
  1412  0FE9                     	;# 
  1413  0FEA                     	;# 
  1414  0FEB                     	;# 
  1415  0FED                     	;# 
  1416  0FEE                     	;# 
  1417  0FEF                     	;# 
  1418  0000                     	;# 
  1419  0001                     	;# 
  1420  0002                     	;# 
  1421  0003                     	;# 
  1422  0004                     	;# 
  1423  0005                     	;# 
  1424  0006                     	;# 
  1425  0007                     	;# 
  1426  0008                     	;# 
  1427  0009                     	;# 
  1428  000A                     	;# 
  1429  000B                     	;# 
  1430  000C                     	;# 
  1431  000D                     	;# 
  1432  000E                     	;# 
  1433  0010                     	;# 
  1434  0011                     	;# 
  1435  0012                     	;# 
  1436  0013                     	;# 
  1437  0015                     	;# 
  1438  0016                     	;# 
  1439  0016                     	;# 
  1440  0017                     	;# 
  1441  0018                     	;# 
  1442  0019                     	;# 
  1443  001A                     	;# 
  1444  001B                     	;# 
  1445  001C                     	;# 
  1446  001E                     	;# 
  1447  001F                     	;# 
  1448  008C                     	;# 
  1449  008D                     	;# 
  1450  008E                     	;# 
  1451  0090                     	;# 
  1452  0091                     	;# 
  1453  0092                     	;# 
  1454  0093                     	;# 
  1455  0095                     	;# 
  1456  0096                     	;# 
  1457  0097                     	;# 
  1458  0098                     	;# 
  1459  0099                     	;# 
  1460  009A                     	;# 
  1461  009B                     	;# 
  1462  009B                     	;# 
  1463  009C                     	;# 
  1464  009D                     	;# 
  1465  009E                     	;# 
  1466  010C                     	;# 
  1467  010D                     	;# 
  1468  010E                     	;# 
  1469  0110                     	;# 
  1470  0111                     	;# 
  1471  0112                     	;# 
  1472  0113                     	;# 
  1473  0114                     	;# 
  1474  0115                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  0118                     	;# 
  1478  0119                     	;# 
  1479  011A                     	;# 
  1480  011B                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  0191                     	;# 
  1485  0191                     	;# 
  1486  0192                     	;# 
  1487  0193                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019B                     	;# 
  1496  019B                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019C                     	;# 
  1500  019C                     	;# 
  1501  019D                     	;# 
  1502  019E                     	;# 
  1503  019F                     	;# 
  1504  020D                     	;# 
  1505  0210                     	;# 
  1506  0211                     	;# 
  1507  0212                     	;# 
  1508  0213                     	;# 
  1509  0214                     	;# 
  1510  0215                     	;# 
  1511  0215                     	;# 
  1512  0216                     	;# 
  1513  0217                     	;# 
  1514  0291                     	;# 
  1515  0291                     	;# 
  1516  0292                     	;# 
  1517  0293                     	;# 
  1518  0294                     	;# 
  1519  0295                     	;# 
  1520  0295                     	;# 
  1521  0296                     	;# 
  1522  0298                     	;# 
  1523  0298                     	;# 
  1524  0299                     	;# 
  1525  029A                     	;# 
  1526  029B                     	;# 
  1527  029C                     	;# 
  1528  029C                     	;# 
  1529  029D                     	;# 
  1530  029E                     	;# 
  1531  029F                     	;# 
  1532  0311                     	;# 
  1533  0311                     	;# 
  1534  0312                     	;# 
  1535  0313                     	;# 
  1536  0314                     	;# 
  1537  0315                     	;# 
  1538  0315                     	;# 
  1539  0316                     	;# 
  1540  0318                     	;# 
  1541  0318                     	;# 
  1542  0319                     	;# 
  1543  031A                     	;# 
  1544  031C                     	;# 
  1545  031C                     	;# 
  1546  031D                     	;# 
  1547  031E                     	;# 
  1548  0394                     	;# 
  1549  0395                     	;# 
  1550  0396                     	;# 
  1551  0415                     	;# 
  1552  0416                     	;# 
  1553  0417                     	;# 
  1554  041C                     	;# 
  1555  041D                     	;# 
  1556  041E                     	;# 
  1557  0791                     	;# 
  1558  0792                     	;# 
  1559  0793                     	;# 
  1560  0794                     	;# 
  1561  0795                     	;# 
  1562  0798                     	;# 
  1563  0799                     	;# 
  1564  07A0                     	;# 
  1565  07A1                     	;# 
  1566  07A3                     	;# 
  1567  07A4                     	;# 
  1568  07A6                     	;# 
  1569  07A7                     	;# 
  1570  07A9                     	;# 
  1571  07AA                     	;# 
  1572  0FE4                     	;# 
  1573  0FE5                     	;# 
  1574  0FE6                     	;# 
  1575  0FE7                     	;# 
  1576  0FE8                     	;# 
  1577  0FE9                     	;# 
  1578  0FEA                     	;# 
  1579  0FEB                     	;# 
  1580  0FED                     	;# 
  1581  0FEE                     	;# 
  1582  0FEF                     	;# 
  1583  0000                     	;# 
  1584  0001                     	;# 
  1585  0002                     	;# 
  1586  0003                     	;# 
  1587  0004                     	;# 
  1588  0005                     	;# 
  1589  0006                     	;# 
  1590  0007                     	;# 
  1591  0008                     	;# 
  1592  0009                     	;# 
  1593  000A                     	;# 
  1594  000B                     	;# 
  1595  000C                     	;# 
  1596  000D                     	;# 
  1597  000E                     	;# 
  1598  0010                     	;# 
  1599  0011                     	;# 
  1600  0012                     	;# 
  1601  0013                     	;# 
  1602  0015                     	;# 
  1603  0016                     	;# 
  1604  0016                     	;# 
  1605  0017                     	;# 
  1606  0018                     	;# 
  1607  0019                     	;# 
  1608  001A                     	;# 
  1609  001B                     	;# 
  1610  001C                     	;# 
  1611  001E                     	;# 
  1612  001F                     	;# 
  1613  008C                     	;# 
  1614  008D                     	;# 
  1615  008E                     	;# 
  1616  0090                     	;# 
  1617  0091                     	;# 
  1618  0092                     	;# 
  1619  0093                     	;# 
  1620  0095                     	;# 
  1621  0096                     	;# 
  1622  0097                     	;# 
  1623  0098                     	;# 
  1624  0099                     	;# 
  1625  009A                     	;# 
  1626  009B                     	;# 
  1627  009B                     	;# 
  1628  009C                     	;# 
  1629  009D                     	;# 
  1630  009E                     	;# 
  1631  010C                     	;# 
  1632  010D                     	;# 
  1633  010E                     	;# 
  1634  0110                     	;# 
  1635  0111                     	;# 
  1636  0112                     	;# 
  1637  0113                     	;# 
  1638  0114                     	;# 
  1639  0115                     	;# 
  1640  0116                     	;# 
  1641  0117                     	;# 
  1642  0118                     	;# 
  1643  0119                     	;# 
  1644  011A                     	;# 
  1645  011B                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  0191                     	;# 
  1650  0191                     	;# 
  1651  0192                     	;# 
  1652  0193                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0199                     	;# 
  1659  019A                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019C                     	;# 
  1665  019C                     	;# 
  1666  019D                     	;# 
  1667  019E                     	;# 
  1668  019F                     	;# 
  1669  020D                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0216                     	;# 
  1678  0217                     	;# 
  1679  0291                     	;# 
  1680  0291                     	;# 
  1681  0292                     	;# 
  1682  0293                     	;# 
  1683  0294                     	;# 
  1684  0295                     	;# 
  1685  0295                     	;# 
  1686  0296                     	;# 
  1687  0298                     	;# 
  1688  0298                     	;# 
  1689  0299                     	;# 
  1690  029A                     	;# 
  1691  029B                     	;# 
  1692  029C                     	;# 
  1693  029C                     	;# 
  1694  029D                     	;# 
  1695  029E                     	;# 
  1696  029F                     	;# 
  1697  0311                     	;# 
  1698  0311                     	;# 
  1699  0312                     	;# 
  1700  0313                     	;# 
  1701  0314                     	;# 
  1702  0315                     	;# 
  1703  0315                     	;# 
  1704  0316                     	;# 
  1705  0318                     	;# 
  1706  0318                     	;# 
  1707  0319                     	;# 
  1708  031A                     	;# 
  1709  031C                     	;# 
  1710  031C                     	;# 
  1711  031D                     	;# 
  1712  031E                     	;# 
  1713  0394                     	;# 
  1714  0395                     	;# 
  1715  0396                     	;# 
  1716  0415                     	;# 
  1717  0416                     	;# 
  1718  0417                     	;# 
  1719  041C                     	;# 
  1720  041D                     	;# 
  1721  041E                     	;# 
  1722  0791                     	;# 
  1723  0792                     	;# 
  1724  0793                     	;# 
  1725  0794                     	;# 
  1726  0795                     	;# 
  1727  0798                     	;# 
  1728  0799                     	;# 
  1729  07A0                     	;# 
  1730  07A1                     	;# 
  1731  07A3                     	;# 
  1732  07A4                     	;# 
  1733  07A6                     	;# 
  1734  07A7                     	;# 
  1735  07A9                     	;# 
  1736  07AA                     	;# 
  1737  0FE4                     	;# 
  1738  0FE5                     	;# 
  1739  0FE6                     	;# 
  1740  0FE7                     	;# 
  1741  0FE8                     	;# 
  1742  0FE9                     	;# 
  1743  0FEA                     	;# 
  1744  0FEB                     	;# 
  1745  0FED                     	;# 
  1746  0FEE                     	;# 
  1747  0FEF                     	;# 
  1748  0000                     	;# 
  1749  0001                     	;# 
  1750  0002                     	;# 
  1751  0003                     	;# 
  1752  0004                     	;# 
  1753  0005                     	;# 
  1754  0006                     	;# 
  1755  0007                     	;# 
  1756  0008                     	;# 
  1757  0009                     	;# 
  1758  000A                     	;# 
  1759  000B                     	;# 
  1760  000C                     	;# 
  1761  000D                     	;# 
  1762  000E                     	;# 
  1763  0010                     	;# 
  1764  0011                     	;# 
  1765  0012                     	;# 
  1766  0013                     	;# 
  1767  0015                     	;# 
  1768  0016                     	;# 
  1769  0016                     	;# 
  1770  0017                     	;# 
  1771  0018                     	;# 
  1772  0019                     	;# 
  1773  001A                     	;# 
  1774  001B                     	;# 
  1775  001C                     	;# 
  1776  001E                     	;# 
  1777  001F                     	;# 
  1778  008C                     	;# 
  1779  008D                     	;# 
  1780  008E                     	;# 
  1781  0090                     	;# 
  1782  0091                     	;# 
  1783  0092                     	;# 
  1784  0093                     	;# 
  1785  0095                     	;# 
  1786  0096                     	;# 
  1787  0097                     	;# 
  1788  0098                     	;# 
  1789  0099                     	;# 
  1790  009A                     	;# 
  1791  009B                     	;# 
  1792  009B                     	;# 
  1793  009C                     	;# 
  1794  009D                     	;# 
  1795  009E                     	;# 
  1796  010C                     	;# 
  1797  010D                     	;# 
  1798  010E                     	;# 
  1799  0110                     	;# 
  1800  0111                     	;# 
  1801  0112                     	;# 
  1802  0113                     	;# 
  1803  0114                     	;# 
  1804  0115                     	;# 
  1805  0116                     	;# 
  1806  0117                     	;# 
  1807  0118                     	;# 
  1808  0119                     	;# 
  1809  011A                     	;# 
  1810  011B                     	;# 
  1811  011D                     	;# 
  1812  018C                     	;# 
  1813  018D                     	;# 
  1814  0191                     	;# 
  1815  0191                     	;# 
  1816  0192                     	;# 
  1817  0193                     	;# 
  1818  0193                     	;# 
  1819  0193                     	;# 
  1820  0194                     	;# 
  1821  0195                     	;# 
  1822  0196                     	;# 
  1823  0199                     	;# 
  1824  019A                     	;# 
  1825  019B                     	;# 
  1826  019B                     	;# 
  1827  019B                     	;# 
  1828  019B                     	;# 
  1829  019C                     	;# 
  1830  019C                     	;# 
  1831  019D                     	;# 
  1832  019E                     	;# 
  1833  019F                     	;# 
  1834  020D                     	;# 
  1835  0210                     	;# 
  1836  0211                     	;# 
  1837  0212                     	;# 
  1838  0213                     	;# 
  1839  0214                     	;# 
  1840  0215                     	;# 
  1841  0215                     	;# 
  1842  0216                     	;# 
  1843  0217                     	;# 
  1844  0291                     	;# 
  1845  0291                     	;# 
  1846  0292                     	;# 
  1847  0293                     	;# 
  1848  0294                     	;# 
  1849  0295                     	;# 
  1850  0295                     	;# 
  1851  0296                     	;# 
  1852  0298                     	;# 
  1853  0298                     	;# 
  1854  0299                     	;# 
  1855  029A                     	;# 
  1856  029B                     	;# 
  1857  029C                     	;# 
  1858  029C                     	;# 
  1859  029D                     	;# 
  1860  029E                     	;# 
  1861  029F                     	;# 
  1862  0311                     	;# 
  1863  0311                     	;# 
  1864  0312                     	;# 
  1865  0313                     	;# 
  1866  0314                     	;# 
  1867  0315                     	;# 
  1868  0315                     	;# 
  1869  0316                     	;# 
  1870  0318                     	;# 
  1871  0318                     	;# 
  1872  0319                     	;# 
  1873  031A                     	;# 
  1874  031C                     	;# 
  1875  031C                     	;# 
  1876  031D                     	;# 
  1877  031E                     	;# 
  1878  0394                     	;# 
  1879  0395                     	;# 
  1880  0396                     	;# 
  1881  0415                     	;# 
  1882  0416                     	;# 
  1883  0417                     	;# 
  1884  041C                     	;# 
  1885  041D                     	;# 
  1886  041E                     	;# 
  1887  0791                     	;# 
  1888  0792                     	;# 
  1889  0793                     	;# 
  1890  0794                     	;# 
  1891  0795                     	;# 
  1892  0798                     	;# 
  1893  0799                     	;# 
  1894  07A0                     	;# 
  1895  07A1                     	;# 
  1896  07A3                     	;# 
  1897  07A4                     	;# 
  1898  07A6                     	;# 
  1899  07A7                     	;# 
  1900  07A9                     	;# 
  1901  07AA                     	;# 
  1902  0FE4                     	;# 
  1903  0FE5                     	;# 
  1904  0FE6                     	;# 
  1905  0FE7                     	;# 
  1906  0FE8                     	;# 
  1907  0FE9                     	;# 
  1908  0FEA                     	;# 
  1909  0FEB                     	;# 
  1910  0FED                     	;# 
  1911  0FEE                     	;# 
  1912  0FEF                     	;# 
  1913  0000                     	;# 
  1914  0001                     	;# 
  1915  0002                     	;# 
  1916  0003                     	;# 
  1917  0004                     	;# 
  1918  0005                     	;# 
  1919  0006                     	;# 
  1920  0007                     	;# 
  1921  0008                     	;# 
  1922  0009                     	;# 
  1923  000A                     	;# 
  1924  000B                     	;# 
  1925  000C                     	;# 
  1926  000D                     	;# 
  1927  000E                     	;# 
  1928  0010                     	;# 
  1929  0011                     	;# 
  1930  0012                     	;# 
  1931  0013                     	;# 
  1932  0015                     	;# 
  1933  0016                     	;# 
  1934  0016                     	;# 
  1935  0017                     	;# 
  1936  0018                     	;# 
  1937  0019                     	;# 
  1938  001A                     	;# 
  1939  001B                     	;# 
  1940  001C                     	;# 
  1941  001E                     	;# 
  1942  001F                     	;# 
  1943  008C                     	;# 
  1944  008D                     	;# 
  1945  008E                     	;# 
  1946  0090                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0093                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0097                     	;# 
  1953  0098                     	;# 
  1954  0099                     	;# 
  1955  009A                     	;# 
  1956  009B                     	;# 
  1957  009B                     	;# 
  1958  009C                     	;# 
  1959  009D                     	;# 
  1960  009E                     	;# 
  1961  010C                     	;# 
  1962  010D                     	;# 
  1963  010E                     	;# 
  1964  0110                     	;# 
  1965  0111                     	;# 
  1966  0112                     	;# 
  1967  0113                     	;# 
  1968  0114                     	;# 
  1969  0115                     	;# 
  1970  0116                     	;# 
  1971  0117                     	;# 
  1972  0118                     	;# 
  1973  0119                     	;# 
  1974  011A                     	;# 
  1975  011B                     	;# 
  1976  011D                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  0191                     	;# 
  1980  0191                     	;# 
  1981  0192                     	;# 
  1982  0193                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0199                     	;# 
  1989  019A                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019C                     	;# 
  1995  019C                     	;# 
  1996  019D                     	;# 
  1997  019E                     	;# 
  1998  019F                     	;# 
  1999  020D                     	;# 
  2000  0210                     	;# 
  2001  0211                     	;# 
  2002  0212                     	;# 
  2003  0213                     	;# 
  2004  0214                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0291                     	;# 
  2010  0291                     	;# 
  2011  0292                     	;# 
  2012  0293                     	;# 
  2013  0294                     	;# 
  2014  0295                     	;# 
  2015  0295                     	;# 
  2016  0296                     	;# 
  2017  0298                     	;# 
  2018  0298                     	;# 
  2019  0299                     	;# 
  2020  029A                     	;# 
  2021  029B                     	;# 
  2022  029C                     	;# 
  2023  029C                     	;# 
  2024  029D                     	;# 
  2025  029E                     	;# 
  2026  029F                     	;# 
  2027  0311                     	;# 
  2028  0311                     	;# 
  2029  0312                     	;# 
  2030  0313                     	;# 
  2031  0314                     	;# 
  2032  0315                     	;# 
  2033  0315                     	;# 
  2034  0316                     	;# 
  2035  0318                     	;# 
  2036  0318                     	;# 
  2037  0319                     	;# 
  2038  031A                     	;# 
  2039  031C                     	;# 
  2040  031C                     	;# 
  2041  031D                     	;# 
  2042  031E                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  0415                     	;# 
  2047  0416                     	;# 
  2048  0417                     	;# 
  2049  041C                     	;# 
  2050  041D                     	;# 
  2051  041E                     	;# 
  2052  0791                     	;# 
  2053  0792                     	;# 
  2054  0793                     	;# 
  2055  0794                     	;# 
  2056  0795                     	;# 
  2057  0798                     	;# 
  2058  0799                     	;# 
  2059  07A0                     	;# 
  2060  07A1                     	;# 
  2061  07A3                     	;# 
  2062  07A4                     	;# 
  2063  07A6                     	;# 
  2064  07A7                     	;# 
  2065  07A9                     	;# 
  2066  07AA                     	;# 
  2067  0FE4                     	;# 
  2068  0FE5                     	;# 
  2069  0FE6                     	;# 
  2070  0FE7                     	;# 
  2071  0FE8                     	;# 
  2072  0FE9                     	;# 
  2073  0FEA                     	;# 
  2074  0FEB                     	;# 
  2075  0FED                     	;# 
  2076  0FEE                     	;# 
  2077  0FEF                     	;# 
  2078                           
  2079                           	psect	nvBANK1
  2080  00CD                     __pnvBANK1:	
  2081  00CD                     _EUSART_ErrorHandler:	
  2082  00CD                     	ds	2
  2083  00CF                     _EUSART_OverrunErrorHandler:	
  2084  00CF                     	ds	2
  2085  00D1                     _EUSART_FramingErrorHandler:	
  2086  00D1                     	ds	2
  2087  00D3                     _TMR2_InterruptHandler:	
  2088  00D3                     	ds	2
  2089  00D5                     _EUSART_RxDefaultInterruptHandler:	
  2090  00D5                     	ds	2
  2091  00D7                     _EUSART_TxDefaultInterruptHandler:	
  2092  00D7                     	ds	2
  2093  00D9                     _eusartTxBufferRemaining:	
  2094  00D9                     	ds	1
  2095  000B                     _INTCONbits	set	11
  2096  001C                     _T2CONbits	set	28
  2097  001C                     _T2CON	set	28
  2098  0011                     _PIR1bits	set	17
  2099  001A                     _TMR2	set	26
  2100  001B                     _PR2	set	27
  2101  009D                     _ADCON0bits	set	157
  2102  009C                     _ADRESH	set	156
  2103  009B                     _ADRESL	set	155
  2104  009E                     _ADCON1	set	158
  2105  009D                     _ADCON0	set	157
  2106  0091                     _PIE1bits	set	145
  2107  0095                     _OPTION_REGbits	set	149
  2108  008E                     _TRISC	set	142
  2109  008D                     _TRISB	set	141
  2110  008C                     _TRISA	set	140
  2111  0090                     _TRISE	set	144
  2112  0097                     _WDTCON	set	151
  2113  0098                     _OSCTUNE	set	152
  2114  0099                     _OSCCON	set	153
  2115  011D                     _APFCON	set	285
  2116  010E                     _LATC	set	270
  2117  010D                     _LATB	set	269
  2118  010C                     _LATA	set	268
  2119  0110                     _LATE	set	272
  2120  0116                     _BORCON	set	278
  2121  010E                     _LATCbits	set	270
  2122  0199                     _RCREG	set	409
  2123  019D                     _RCSTAbits	set	413
  2124  019A                     _TXREG	set	410
  2125  019E                     _TXSTAbits	set	414
  2126  019C                     _SPBRGH	set	412
  2127  019B                     _SPBRGL	set	411
  2128  019E                     _TXSTA	set	414
  2129  019D                     _RCSTA	set	413
  2130  019F                     _BAUDCON	set	415
  2131  018C                     _ANSELA	set	396
  2132  018D                     _ANSELB	set	397
  2133  020D                     _WPUB	set	525
  2134  0210                     _WPUE	set	528
  2135  0298                     _CCPR2L	set	664
  2136  0299                     _CCPR2H	set	665
  2137  029D                     _PSTR2CON	set	669
  2138  029B                     _PWM2CON	set	667
  2139  029C                     _ECCP2AS	set	668
  2140  029A                     _CCP2CON	set	666
  2141  029E                     _CCPTMRS0bits	set	670
  2142  0291                     _CCPR1L	set	657
  2143  0292                     _CCPR1H	set	658
  2144  0296                     _PSTR1CON	set	662
  2145  0294                     _PWM1CON	set	660
  2146  0295                     _ECCP1AS	set	661
  2147  0293                     _CCP1CON	set	659
  2148                           
  2149                           	psect	stringtext1
  2150  077A                     __pstringtext1:	
  2151  077A                     STR_1:	
  2152  077A  3453               	retlw	83	;'S'
  2153  077B  3425               	retlw	37	;'%'
  2154  077C  3464               	retlw	100	;'d'
  2155  077D  3420               	retlw	32	;' '
  2156  077E  343A               	retlw	58	;':'
  2157  077F  3420               	retlw	32	;' '
  2158  0780  3425               	retlw	37	;'%'
  2159  0781  3464               	retlw	100	;'d'
  2160  0782  3420               	retlw	32	;' '
  2161  0783  340D               	retlw	13
  2162  0784  340A               	retlw	10
  2163  0785  3400               	retlw	0
  2164                           
  2165                           	psect	stringtext2
  2166  0000                     __pstringtext2:	
  2167                           
  2168                           ; #config settings
  2169  0000                     
  2170                           	psect	cinit
  2171  0038                     start_initialization:	
  2172  0038                     __initialization:	
  2173                           
  2174                           ; Clear objects allocated to COMMON
  2175  0038  01FC               	clrf	__pbssCOMMON& (0+127)
  2176                           
  2177                           ; Clear objects allocated to BANK1
  2178  0039  30A0               	movlw	low __pbssBANK1
  2179  003A  0084               	movwf	4
  2180  003B  3000               	movlw	high __pbssBANK1
  2181  003C  0085               	movwf	5
  2182  003D  302D               	movlw	45
  2183  003E  3187  279F  3180   	fcall	clear_ram0
  2184                           
  2185                           ; Clear objects allocated to BANK2
  2186  0041  3020               	movlw	low __pbssBANK2
  2187  0042  0084               	movwf	4
  2188  0043  3001               	movlw	high __pbssBANK2
  2189  0044  0085               	movwf	5
  2190  0045  3040               	movlw	64
  2191  0046  3187  279F  3180   	fcall	clear_ram0
  2192                           
  2193                           ; Clear objects allocated to BANK3
  2194  0049  30A0               	movlw	low __pbssBANK3
  2195  004A  0084               	movwf	4
  2196  004B  3001               	movlw	high __pbssBANK3
  2197  004C  0085               	movwf	5
  2198  004D  3040               	movlw	64
  2199  004E  3187  279F  3180   	fcall	clear_ram0
  2200                           
  2201                           ; Clear objects allocated to BANK4
  2202  0051  3020               	movlw	low __pbssBANK4
  2203  0052  0084               	movwf	4
  2204  0053  3002               	movlw	high __pbssBANK4
  2205  0054  0085               	movwf	5
  2206  0055  3040               	movlw	64
  2207  0056  3187  279F         	fcall	clear_ram0
  2208  0058                     end_of_initialization:	
  2209                           ;End of C runtime variable initialization code
  2210                           
  2211  0058                     __end_of__initialization:	
  2212  0058  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2213  0059  0020               	movlb	0
  2214  005A  3187  2F2F         	ljmp	_main	;jump to C main() function
  2215                           
  2216                           	psect	bssCOMMON
  2217  007C                     __pbssCOMMON:	
  2218  007C                     _eusartRxHead:	
  2219  007C                     	ds	1
  2220                           
  2221                           	psect	bssBANK1
  2222  00A0                     __pbssBANK1:	
  2223  00A0                     _nout:	
  2224  00A0                     	ds	2
  2225  00A2                     _width:	
  2226  00A2                     	ds	2
  2227  00A4                     _prec:	
  2228  00A4                     	ds	2
  2229  00A6                     _flags:	
  2230  00A6                     	ds	2
  2231  00A8                     _eusartRxLastError:	
  2232  00A8                     	ds	1
  2233  00A9                     _eusartRxCount:	
  2234  00A9                     	ds	1
  2235  00AA                     _eusartRxTail:	
  2236  00AA                     	ds	1
  2237  00AB                     _eusartTxTail:	
  2238  00AB                     	ds	1
  2239  00AC                     _eusartTxHead:	
  2240  00AC                     	ds	1
  2241  00AD                     _dbuf:	
  2242  00AD                     	ds	32
  2243                           
  2244                           	psect	bssBANK2
  2245  0120                     __pbssBANK2:	
  2246  0120                     _eusartRxStatusBuffer:	
  2247  0120                     	ds	64
  2248                           
  2249                           	psect	bssBANK3
  2250  01A0                     __pbssBANK3:	
  2251  01A0                     _eusartTxBuffer:	
  2252  01A0                     	ds	64
  2253                           
  2254                           	psect	bssBANK4
  2255  0220                     __pbssBANK4:	
  2256  0220                     _eusartRxBuffer:	
  2257  0220                     	ds	64
  2258                           
  2259                           	psect	clrtext
  2260  079F                     clear_ram0:	
  2261                           ;	Called with FSR0 containing the base address, and
  2262                           ;	WREG with the size to clear
  2263                           
  2264  079F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2265  07A0                     clrloop0:	
  2266  07A0  0180               	clrf	0	;clear RAM location pointed to by FSR
  2267  07A1  3101               	addfsr 0,1
  2268  07A2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2269  07A3  2FA0               	goto	clrloop0	;have we reached the end yet?
  2270  07A4  3400               	retlw	0	;all done for this memory range, return
  2271                           
  2272                           	psect	cstackBANK1
  2273  00DA                     __pcstackBANK1:	
  2274  00DA                     	ds	2
  2275  00DC                     printf@ap:	
  2276                           
  2277                           ; 1 bytes @ 0x2
  2278  00DC                     	ds	1
  2279  00DD                     imprimeValoreSensores@i:	
  2280                           
  2281                           ; 2 bytes @ 0x3
  2282  00DD                     	ds	2
  2283                           
  2284                           	psect	cstackCOMMON
  2285  0070                     __pcstackCOMMON:	
  2286  0070                     ?_PIN_MANAGER_Initialize:	
  2287  0070                     ?_OSCILLATOR_Initialize:	
  2288                           ; 1 bytes @ 0x0
  2289                           
  2290  0070                     ?_WDT_Initialize:	
  2291                           ; 1 bytes @ 0x0
  2292                           
  2293  0070                     ?_EPWM2_Initialize:	
  2294                           ; 1 bytes @ 0x0
  2295                           
  2296  0070                     ?_ADC_Initialize:	
  2297                           ; 1 bytes @ 0x0
  2298                           
  2299  0070                     ?_EPWM1_Initialize:	
  2300                           ; 1 bytes @ 0x0
  2301                           
  2302  0070                     ?_TMR2_Initialize:	
  2303                           ; 1 bytes @ 0x0
  2304                           
  2305  0070                     ?_EUSART_Initialize:	
  2306                           ; 1 bytes @ 0x0
  2307                           
  2308  0070                     ?_TMR2_DefaultInterruptHandler:	
  2309                           ; 1 bytes @ 0x0
  2310                           
  2311  0070                     ??_TMR2_DefaultInterruptHandler:	
  2312                           ; 1 bytes @ 0x0
  2313                           
  2314  0070                     ?_ADC_ISR:	
  2315                           ; 1 bytes @ 0x0
  2316                           
  2317  0070                     ??_ADC_ISR:	
  2318                           ; 1 bytes @ 0x0
  2319                           
  2320  0070                     ?_EUSART_Receive_ISR:	
  2321                           ; 1 bytes @ 0x0
  2322                           
  2323  0070                     ?_EUSART_Transmit_ISR:	
  2324                           ; 1 bytes @ 0x0
  2325                           
  2326  0070                     ??_EUSART_Transmit_ISR:	
  2327                           ; 1 bytes @ 0x0
  2328                           
  2329  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  2330                           ; 1 bytes @ 0x0
  2331                           
  2332  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  2333                           ; 1 bytes @ 0x0
  2334                           
  2335  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  2336                           ; 1 bytes @ 0x0
  2337                           
  2338  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  2339                           ; 1 bytes @ 0x0
  2340                           
  2341  0070                     ?_EUSART_DefaultErrorHandler:	
  2342                           ; 1 bytes @ 0x0
  2343                           
  2344  0070                     ?_EUSART_RxDataHandler:	
  2345                           ; 1 bytes @ 0x0
  2346                           
  2347  0070                     ??_EUSART_RxDataHandler:	
  2348                           ; 1 bytes @ 0x0
  2349                           
  2350  0070                     ?_motorA:	
  2351                           ; 1 bytes @ 0x0
  2352                           
  2353  0070                     ?_motorB:	
  2354                           ; 1 bytes @ 0x0
  2355                           
  2356  0070                     ?_imprimeValoreSensores:	
  2357                           ; 1 bytes @ 0x0
  2358                           
  2359  0070                     ?_SYSTEM_Initialize:	
  2360                           ; 1 bytes @ 0x0
  2361                           
  2362  0070                     ?_TMR2_ISR:	
  2363                           ; 1 bytes @ 0x0
  2364                           
  2365  0070                     ??_TMR2_ISR:	
  2366                           ; 1 bytes @ 0x0
  2367                           
  2368  0070                     ?_INTERRUPT_InterruptManager:	
  2369                           ; 1 bytes @ 0x0
  2370                           
  2371  0070                     ?_EUSART_Write:	
  2372                           ; 1 bytes @ 0x0
  2373                           
  2374  0070                     ?_putch:	
  2375                           ; 1 bytes @ 0x0
  2376                           
  2377  0070                     ?_main:	
  2378                           ; 1 bytes @ 0x0
  2379                           
  2380                           
  2381                           ; 1 bytes @ 0x0
  2382  0070                     	ds	1
  2383  0071                     ??_PIN_MANAGER_Initialize:	
  2384  0071                     ??_OSCILLATOR_Initialize:	
  2385                           ; 1 bytes @ 0x1
  2386                           
  2387  0071                     ??_WDT_Initialize:	
  2388                           ; 1 bytes @ 0x1
  2389                           
  2390  0071                     ??_EPWM2_Initialize:	
  2391                           ; 1 bytes @ 0x1
  2392                           
  2393  0071                     ??_ADC_Initialize:	
  2394                           ; 1 bytes @ 0x1
  2395                           
  2396  0071                     ??_EPWM1_Initialize:	
  2397                           ; 1 bytes @ 0x1
  2398                           
  2399  0071                     ?_TMR2_SetInterruptHandler:	
  2400                           ; 1 bytes @ 0x1
  2401                           
  2402  0071                     ?_EUSART_SetRxInterruptHandler:	
  2403                           ; 1 bytes @ 0x1
  2404                           
  2405  0071                     ??_EUSART_Receive_ISR:	
  2406                           ; 1 bytes @ 0x1
  2407                           
  2408  0071                     ?_EUSART_SetTxInterruptHandler:	
  2409                           ; 1 bytes @ 0x1
  2410                           
  2411  0071                     ?_EUSART_SetFramingErrorHandler:	
  2412                           ; 1 bytes @ 0x1
  2413                           
  2414  0071                     ?_EUSART_SetOverrunErrorHandler:	
  2415                           ; 1 bytes @ 0x1
  2416                           
  2417  0071                     ?_EUSART_SetErrorHandler:	
  2418                           ; 1 bytes @ 0x1
  2419                           
  2420  0071                     ??_EUSART_DefaultErrorHandler:	
  2421                           ; 1 bytes @ 0x1
  2422                           
  2423  0071                     ??_motorA:	
  2424                           ; 1 bytes @ 0x1
  2425                           
  2426  0071                     ??_motorB:	
  2427                           ; 1 bytes @ 0x1
  2428                           
  2429  0071                     ??_INTERRUPT_InterruptManager:	
  2430                           ; 1 bytes @ 0x1
  2431                           
  2432  0071                     ??_EUSART_Write:	
  2433                           ; 1 bytes @ 0x1
  2434                           
  2435  0071                     ??___aodiv:	
  2436                           ; 1 bytes @ 0x1
  2437                           
  2438  0071                     ??___aomod:	
  2439                           ; 1 bytes @ 0x1
  2440                           
  2441  0071                     ?_ADC_GetConversion:	
  2442                           ; 1 bytes @ 0x1
  2443                           
  2444  0071                     ?_strlen:	
  2445                           ; 2 bytes @ 0x1
  2446                           
  2447  0071                     TMR2_SetInterruptHandler@InterruptHandler:	
  2448                           ; 2 bytes @ 0x1
  2449                           
  2450  0071                     EUSART_SetFramingErrorHandler@interruptHandler:	
  2451                           ; 2 bytes @ 0x1
  2452                           
  2453  0071                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  2454                           ; 2 bytes @ 0x1
  2455                           
  2456  0071                     EUSART_SetErrorHandler@interruptHandler:	
  2457                           ; 2 bytes @ 0x1
  2458                           
  2459  0071                     EUSART_SetTxInterruptHandler@interruptHandler:	
  2460                           ; 2 bytes @ 0x1
  2461                           
  2462  0071                     EUSART_SetRxInterruptHandler@interruptHandler:	
  2463                           ; 2 bytes @ 0x1
  2464                           
  2465                           
  2466                           ; 2 bytes @ 0x1
  2467  0071                     	ds	1
  2468  0072                     EUSART_Write@txData:	
  2469  0072                     ___aodiv@counter:	
  2470                           ; 1 bytes @ 0x2
  2471                           
  2472  0072                     ___aomod@counter:	
  2473                           ; 1 bytes @ 0x2
  2474                           
  2475                           
  2476                           ; 1 bytes @ 0x2
  2477  0072                     	ds	1
  2478  0073                     ??_ADC_GetConversion:	
  2479  0073                     ??_TMR2_Initialize:	
  2480                           ; 1 bytes @ 0x3
  2481                           
  2482  0073                     ??_EUSART_Initialize:	
  2483                           ; 1 bytes @ 0x3
  2484                           
  2485  0073                     ??_TMR2_SetInterruptHandler:	
  2486                           ; 1 bytes @ 0x3
  2487                           
  2488  0073                     ??_EUSART_SetRxInterruptHandler:	
  2489                           ; 1 bytes @ 0x3
  2490                           
  2491  0073                     ??_EUSART_SetTxInterruptHandler:	
  2492                           ; 1 bytes @ 0x3
  2493                           
  2494  0073                     ??_EUSART_SetFramingErrorHandler:	
  2495                           ; 1 bytes @ 0x3
  2496                           
  2497  0073                     ??_EUSART_SetOverrunErrorHandler:	
  2498                           ; 1 bytes @ 0x3
  2499                           
  2500  0073                     ??_EUSART_SetErrorHandler:	
  2501                           ; 1 bytes @ 0x3
  2502                           
  2503  0073                     ??_strlen:	
  2504                           ; 1 bytes @ 0x3
  2505                           
  2506  0073                     ??_putch:	
  2507                           ; 1 bytes @ 0x3
  2508                           
  2509  0073                     motorA@status:	
  2510                           ; 1 bytes @ 0x3
  2511                           
  2512  0073                     motorB@status:	
  2513                           ; 1 bytes @ 0x3
  2514                           
  2515  0073                     putch@txData:	
  2516                           ; 1 bytes @ 0x3
  2517                           
  2518  0073                     ___aodiv@sign:	
  2519                           ; 1 bytes @ 0x3
  2520                           
  2521  0073                     ___aomod@sign:	
  2522                           ; 1 bytes @ 0x3
  2523                           
  2524                           
  2525                           ; 1 bytes @ 0x3
  2526  0073                     	ds	1
  2527  0074                     ??_SYSTEM_Initialize:	
  2528  0074                     ?_fputc:	
  2529                           ; 1 bytes @ 0x4
  2530                           
  2531  0074                     ?_abs:	
  2532                           ; 2 bytes @ 0x4
  2533                           
  2534  0074                     ADC_GetConversion@channel:	
  2535                           ; 2 bytes @ 0x4
  2536                           
  2537  0074                     strlen@a:	
  2538                           ; 1 bytes @ 0x4
  2539                           
  2540  0074                     abs@a:	
  2541                           ; 1 bytes @ 0x4
  2542                           
  2543  0074                     fputc@c:	
  2544                           ; 2 bytes @ 0x4
  2545                           
  2546  0074                     ___aodiv@quotient:	
  2547                           ; 2 bytes @ 0x4
  2548                           
  2549                           
  2550                           ; 8 bytes @ 0x4
  2551  0074                     	ds	1
  2552  0075                     ?_getValorADC:	
  2553  0075                     strlen@s:	
  2554                           ; 2 bytes @ 0x5
  2555                           
  2556                           
  2557                           ; 1 bytes @ 0x5
  2558  0075                     	ds	1
  2559  0076                     ??_abs:	
  2560  0076                     fputc@fp:	
  2561                           ; 1 bytes @ 0x6
  2562                           
  2563                           
  2564                           ; 1 bytes @ 0x6
  2565  0076                     	ds	1
  2566  0077                     ??_fputc:	
  2567                           
  2568                           ; 1 bytes @ 0x7
  2569  0077                     	ds	1
  2570  0078                     ??_getValorADC:	
  2571  0078                     getValorADC@c:	
  2572                           ; 1 bytes @ 0x8
  2573                           
  2574                           
  2575                           ; 1 bytes @ 0x8
  2576  0078                     	ds	1
  2577  0079                     ?_getValorSensor:	
  2578  0079                     getValorSensor@numSensor:	
  2579                           ; 2 bytes @ 0x9
  2580                           
  2581                           
  2582                           ; 2 bytes @ 0x9
  2583  0079                     	ds	2
  2584  007B                     ??_getValorSensor:	
  2585                           
  2586                           ; 1 bytes @ 0xB
  2587  007B                     	ds	1
  2588  007C                     ??_main:	
  2589                           
  2590                           	psect	cstackBANK0
  2591  0020                     __pcstackBANK0:	
  2592                           ; 1 bytes @ 0xC
  2593                           
  2594  0020                     ?_fputs:	
  2595  0020                     ?___aodiv:	
  2596                           ; 2 bytes @ 0x0
  2597                           
  2598  0020                     ?___aomod:	
  2599                           ; 8 bytes @ 0x0
  2600                           
  2601  0020                     fputs@fp:	
  2602                           ; 8 bytes @ 0x0
  2603                           
  2604  0020                     getValorSensor@valor:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0020                     ___aodiv@divisor:	
  2608                           ; 2 bytes @ 0x0
  2609                           
  2610  0020                     ___aomod@divisor:	
  2611                           ; 8 bytes @ 0x0
  2612                           
  2613                           
  2614                           ; 8 bytes @ 0x0
  2615  0020                     	ds	1
  2616  0021                     ??_fputs:	
  2617                           
  2618                           ; 1 bytes @ 0x1
  2619  0021                     	ds	3
  2620  0024                     fputs@c:	
  2621                           
  2622                           ; 1 bytes @ 0x4
  2623  0024                     	ds	1
  2624  0025                     fputs@i:	
  2625                           
  2626                           ; 2 bytes @ 0x5
  2627  0025                     	ds	2
  2628  0027                     fputs@s:	
  2629                           
  2630                           ; 1 bytes @ 0x7
  2631  0027                     	ds	1
  2632  0028                     ?_pad:	
  2633  0028                     pad@buf:	
  2634                           ; 2 bytes @ 0x8
  2635                           
  2636  0028                     ___aodiv@dividend:	
  2637                           ; 1 bytes @ 0x8
  2638                           
  2639  0028                     ___aomod@dividend:	
  2640                           ; 8 bytes @ 0x8
  2641                           
  2642                           
  2643                           ; 8 bytes @ 0x8
  2644  0028                     	ds	1
  2645  0029                     pad@p:	
  2646                           
  2647                           ; 2 bytes @ 0x9
  2648  0029                     	ds	2
  2649  002B                     ??_pad:	
  2650                           
  2651                           ; 1 bytes @ 0xB
  2652  002B                     	ds	1
  2653  002C                     pad@i:	
  2654                           
  2655                           ; 2 bytes @ 0xC
  2656  002C                     	ds	2
  2657  002E                     pad@w:	
  2658                           
  2659                           ; 2 bytes @ 0xE
  2660  002E                     	ds	2
  2661  0030                     pad@fp:	
  2662                           
  2663                           ; 1 bytes @ 0x10
  2664  0030                     	ds	1
  2665  0031                     ?_dtoa:	
  2666  0031                     dtoa@d:	
  2667                           ; 2 bytes @ 0x11
  2668                           
  2669                           
  2670                           ; 8 bytes @ 0x11
  2671  0031                     	ds	8
  2672  0039                     ??_dtoa:	
  2673                           
  2674                           ; 1 bytes @ 0x19
  2675  0039                     	ds	3
  2676  003C                     _dtoa$1055:	
  2677                           
  2678                           ; 2 bytes @ 0x1C
  2679  003C                     	ds	2
  2680  003E                     dtoa@fp:	
  2681                           
  2682                           ; 1 bytes @ 0x1E
  2683  003E                     	ds	1
  2684  003F                     dtoa@p:	
  2685                           
  2686                           ; 2 bytes @ 0x1F
  2687  003F                     	ds	2
  2688  0041                     dtoa@w:	
  2689                           
  2690                           ; 2 bytes @ 0x21
  2691  0041                     	ds	2
  2692  0043                     dtoa@s:	
  2693                           
  2694                           ; 2 bytes @ 0x23
  2695  0043                     	ds	2
  2696  0045                     dtoa@n:	
  2697                           
  2698                           ; 8 bytes @ 0x25
  2699  0045                     	ds	8
  2700  004D                     dtoa@i:	
  2701                           
  2702                           ; 2 bytes @ 0x2D
  2703  004D                     	ds	2
  2704  004F                     ?_vfpfcnvrt:	
  2705  004F                     vfpfcnvrt@fmt:	
  2706                           ; 2 bytes @ 0x2F
  2707                           
  2708                           
  2709                           ; 1 bytes @ 0x2F
  2710  004F                     	ds	1
  2711  0050                     vfpfcnvrt@ap:	
  2712                           
  2713                           ; 1 bytes @ 0x30
  2714  0050                     	ds	1
  2715  0051                     ??_vfpfcnvrt:	
  2716                           
  2717                           ; 1 bytes @ 0x31
  2718  0051                     	ds	5
  2719  0056                     vfpfcnvrt@ll:	
  2720                           
  2721                           ; 8 bytes @ 0x36
  2722  0056                     	ds	8
  2723  005E                     vfpfcnvrt@fp:	
  2724                           
  2725                           ; 1 bytes @ 0x3E
  2726  005E                     	ds	1
  2727  005F                     ?_vfprintf:	
  2728  005F                     vfprintf@fmt:	
  2729                           ; 2 bytes @ 0x3F
  2730                           
  2731                           
  2732                           ; 2 bytes @ 0x3F
  2733  005F                     	ds	2
  2734  0061                     vfprintf@ap:	
  2735                           
  2736                           ; 1 bytes @ 0x41
  2737  0061                     	ds	1
  2738  0062                     ??_vfprintf:	
  2739                           
  2740                           ; 1 bytes @ 0x42
  2741  0062                     	ds	2
  2742  0064                     vfprintf@fp:	
  2743                           
  2744                           ; 1 bytes @ 0x44
  2745  0064                     	ds	1
  2746  0065                     vfprintf@cfmt:	
  2747                           
  2748                           ; 2 bytes @ 0x45
  2749  0065                     	ds	2
  2750  0067                     ?_printf:	
  2751  0067                     printf@fmt:	
  2752                           ; 2 bytes @ 0x47
  2753                           
  2754                           
  2755                           ; 2 bytes @ 0x47
  2756  0067                     	ds	6
  2757  006D                     ??_printf:	
  2758                           
  2759                           ; 1 bytes @ 0x4D
  2760  006D                     	ds	1
  2761  006E                     ??_imprimeValoreSensores:	
  2762                           
  2763                           ; 1 bytes @ 0x4E
  2764  006E                     	ds	1
  2765                           
  2766                           	psect	maintext
  2767  072F                     __pmaintext:	
  2768 ;;
  2769 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2770 ;;
  2771 ;; *************** function _main *****************
  2772 ;; Defined at:
  2773 ;;		line 49 in file "main.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : B1F/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels required when called:   14
  2793 ;; This function calls:
  2794 ;;		_SYSTEM_Initialize
  2795 ;;		_imprimeValoreSensores
  2796 ;;		_motorA
  2797 ;;		_motorB
  2798 ;; This function is called by:
  2799 ;;		Startup code after reset
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _main
  2805  072F                     _main:	
  2806                           
  2807                           ;main.c: 52:     SYSTEM_Initialize();
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2811  072F  3186  26BE  3187   	fcall	_SYSTEM_Initialize
  2812                           
  2813                           ;main.c: 58:     (INTCONbits.GIE = 1);
  2814  0732  178B               	bsf	11,7	;volatile
  2815                           
  2816                           ;main.c: 61:    (INTCONbits.PEIE = 1);
  2817  0733  170B               	bsf	11,6	;volatile
  2818  0734                     l2762:	
  2819                           
  2820                           ;main.c: 70:     {;main.c: 71:         motorA(1);
  2821  0734  3001               	movlw	1
  2822  0735  3186  264D  3187   	fcall	_motorA
  2823                           
  2824                           ;main.c: 72:         motorB(1);
  2825  0738  3001               	movlw	1
  2826  0739  3186  2609  3187   	fcall	_motorB
  2827                           
  2828                           ;main.c: 73:         imprimeValoreSensores();
  2829  073C  3185  254B  3187   	fcall	_imprimeValoreSensores
  2830  073F  2F34               	goto	l2762
  2831  0740                     __end_of_main:	
  2832                           
  2833                           	psect	text1
  2834  0609                     __ptext1:	
  2835 ;; *************** function _motorB *****************
  2836 ;; Defined at:
  2837 ;;		line 30 in file "aplicacion/puenteh.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  status          1    wreg     unsigned char 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  status          1    3[COMMON] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2855 ;;Total ram usage:        3 bytes
  2856 ;; Hardware stack levels used:    1
  2857 ;; Hardware stack levels required when called:    4
  2858 ;; This function calls:
  2859 ;;		Nothing
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865                           
  2866                           ;psect for function _motorB
  2867  0609                     _motorB:	
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _motorB: [wreg-fsr0h+status,2+status,0]
  2871                           ;motorB@status stored from wreg
  2872  0609  00F3               	movwf	motorB@status
  2873                           
  2874                           ;aplicacion/puenteh.c: 31:     switch (status){
  2875  060A  2E17               	goto	l1652
  2876  060B                     l41:	
  2877                           ;aplicacion/puenteh.c: 33:             do { LATCbits.LATC3 = 0; } while(0);
  2878                           
  2879  060B  0022               	movlb	2	; select bank2
  2880  060C  118E               	bcf	14,3	;volatile
  2881                           
  2882                           ;aplicacion/puenteh.c: 34:             do { LATCbits.LATC7 = 0; } while(0);
  2883  060D  138E               	bcf	14,7	;volatile
  2884  060E  0008               	return
  2885  060F                     l47:	
  2886                           ;aplicacion/puenteh.c: 37:             do { LATCbits.LATC3 = 1; } while(0);
  2887                           
  2888  060F  0022               	movlb	2	; select bank2
  2889  0610  158E               	bsf	14,3	;volatile
  2890                           
  2891                           ;aplicacion/puenteh.c: 38:             do { LATCbits.LATC7 = 0; } while(0);
  2892  0611  138E               	bcf	14,7	;volatile
  2893  0612  0008               	return
  2894  0613                     l52:	
  2895                           ;aplicacion/puenteh.c: 41:             do { LATCbits.LATC3 = 0; } while(0);
  2896                           
  2897  0613  0022               	movlb	2	; select bank2
  2898  0614  118E               	bcf	14,3	;volatile
  2899                           
  2900                           ;aplicacion/puenteh.c: 42:             do { LATCbits.LATC7 = 1; } while(0);
  2901  0615  178E               	bsf	14,7	;volatile
  2902  0616  0008               	return
  2903  0617                     l1652:	
  2904  0617  0873               	movf	motorB@status,w
  2905  0618  00F1               	movwf	??_motorB
  2906  0619  01F2               	clrf	??_motorB+1
  2907                           
  2908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2909                           ; Switch size 1, requested type "simple"
  2910                           ; Number of cases is 1, Range of values is 0 to 0
  2911                           ; switch strategies available:
  2912                           ; Name         Instructions Cycles
  2913                           ; simple_byte            4     3 (average)
  2914                           ; direct_byte            8     6 (fixed)
  2915                           ; jumptable            260     6 (fixed)
  2916                           ;	Chosen strategy is simple_byte
  2917  061A  0872               	movf	??_motorB+1,w
  2918  061B  3A00               	xorlw	0	; case 0
  2919  061C  1903               	skipnz
  2920  061D  2E1F               	goto	l2828
  2921  061E  2E2A               	goto	l56
  2922  061F                     l2828:	
  2923                           
  2924                           ; Switch size 1, requested type "simple"
  2925                           ; Number of cases is 3, Range of values is 0 to 2
  2926                           ; switch strategies available:
  2927                           ; Name         Instructions Cycles
  2928                           ; simple_byte           10     6 (average)
  2929                           ; direct_byte           12     6 (fixed)
  2930                           ; jumptable            260     6 (fixed)
  2931                           ;	Chosen strategy is simple_byte
  2932  061F  0871               	movf	??_motorB,w
  2933  0620  3A00               	xorlw	0	; case 0
  2934  0621  1903               	skipnz
  2935  0622  2E0B               	goto	l41
  2936  0623  3A01               	xorlw	1	; case 1
  2937  0624  1903               	skipnz
  2938  0625  2E0F               	goto	l47
  2939  0626  3A03               	xorlw	3	; case 2
  2940  0627  1903               	skipnz
  2941  0628  2E13               	goto	l52
  2942  0629  2E2A               	goto	l56
  2943  062A                     l56:	
  2944  062A  0008               	return
  2945  062B                     __end_of_motorB:	
  2946                           
  2947                           	psect	text2
  2948  064D                     __ptext2:	
  2949 ;; *************** function _motorA *****************
  2950 ;; Defined at:
  2951 ;;		line 6 in file "aplicacion/puenteh.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  status          1    wreg     unsigned char 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  status          1    3[COMMON] unsigned char 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  1    wreg      void 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2968 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2969 ;;Total ram usage:        3 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    4
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_main
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           
  2980                           ;psect for function _motorA
  2981  064D                     _motorA:	
  2982                           
  2983                           ;incstack = 0
  2984                           ; Regs used in _motorA: [wreg-fsr0h+status,2+status,0]
  2985                           ;motorA@status stored from wreg
  2986  064D  00F3               	movwf	motorA@status
  2987                           
  2988                           ;aplicacion/puenteh.c: 7:     switch (status){
  2989  064E  2E59               	goto	l1642
  2990  064F                     l15:	
  2991                           ;aplicacion/puenteh.c: 9:             do { LATCbits.LATC4 = 0; } while(0);
  2992                           
  2993  064F  0022               	movlb	2	; select bank2
  2994  0650  120E               	bcf	14,4	;volatile
  2995                           
  2996                           ;aplicacion/puenteh.c: 10:             do { LATCbits.LATC5 = 0; } while(0);
  2997  0651  128E               	bcf	14,5	;volatile
  2998  0652                     l20:	
  2999                           ;aplicacion/puenteh.c: 12:             do { LATCbits.LATC4 = 1; } while(0);
  3000                           
  3001  0652  0022               	movlb	2	; select bank2
  3002  0653  160E               	bsf	14,4	;volatile
  3003                           
  3004                           ;aplicacion/puenteh.c: 13:             do { LATCbits.LATC5 = 0; } while(0);
  3005  0654  128E               	bcf	14,5	;volatile
  3006  0655                     l25:	
  3007                           ;aplicacion/puenteh.c: 15:             do { LATCbits.LATC4 = 0; } while(0);
  3008                           
  3009  0655  0022               	movlb	2	; select bank2
  3010  0656  120E               	bcf	14,4	;volatile
  3011                           
  3012                           ;aplicacion/puenteh.c: 16:             do { LATCbits.LATC5 = 1; } while(0);
  3013  0657  168E               	bsf	14,5	;volatile
  3014  0658  0008               	return
  3015  0659                     l1642:	
  3016  0659  0873               	movf	motorA@status,w
  3017  065A  00F1               	movwf	??_motorA
  3018  065B  01F2               	clrf	??_motorA+1
  3019                           
  3020                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3021                           ; Switch size 1, requested type "simple"
  3022                           ; Number of cases is 1, Range of values is 0 to 0
  3023                           ; switch strategies available:
  3024                           ; Name         Instructions Cycles
  3025                           ; simple_byte            4     3 (average)
  3026                           ; direct_byte            8     6 (fixed)
  3027                           ; jumptable            260     6 (fixed)
  3028                           ;	Chosen strategy is simple_byte
  3029  065C  0872               	movf	??_motorA+1,w
  3030  065D  3A00               	xorlw	0	; case 0
  3031  065E  1903               	skipnz
  3032  065F  2E61               	goto	l2830
  3033  0660  2E6C               	goto	l30
  3034  0661                     l2830:	
  3035                           
  3036                           ; Switch size 1, requested type "simple"
  3037                           ; Number of cases is 3, Range of values is 0 to 2
  3038                           ; switch strategies available:
  3039                           ; Name         Instructions Cycles
  3040                           ; simple_byte           10     6 (average)
  3041                           ; direct_byte           12     6 (fixed)
  3042                           ; jumptable            260     6 (fixed)
  3043                           ;	Chosen strategy is simple_byte
  3044  0661  0871               	movf	??_motorA,w
  3045  0662  3A00               	xorlw	0	; case 0
  3046  0663  1903               	skipnz
  3047  0664  2E4F               	goto	l15
  3048  0665  3A01               	xorlw	1	; case 1
  3049  0666  1903               	skipnz
  3050  0667  2E52               	goto	l20
  3051  0668  3A03               	xorlw	3	; case 2
  3052  0669  1903               	skipnz
  3053  066A  2E55               	goto	l25
  3054  066B  2E6C               	goto	l30
  3055  066C                     l30:	
  3056  066C  0008               	return
  3057  066D                     __end_of_motorA:	
  3058                           
  3059                           	psect	text3
  3060  054B                     __ptext3:	
  3061 ;; *************** function _imprimeValoreSensores *****************
  3062 ;; Defined at:
  3063 ;;		line 3 in file "sensores.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;		None
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  i               2    3[BANK1 ] int 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3081 ;;Total ram usage:        3 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:   13
  3084 ;; This function calls:
  3085 ;;		_getValorSensor
  3086 ;;		_printf
  3087 ;; This function is called by:
  3088 ;;		_main
  3089 ;; This function uses a non-reentrant model
  3090 ;;
  3091                           
  3092                           
  3093                           ;psect for function _imprimeValoreSensores
  3094  054B                     _imprimeValoreSensores:	
  3095                           
  3096                           ;sensores.c: 6:     for(i = 1; i < 9 + 1;i++ ){
  3097                           
  3098                           ;incstack = 0
  3099                           ; Regs used in _imprimeValoreSensores: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3100  054B  3001               	movlw	1
  3101  054C  0021               	movlb	1	; select bank1
  3102  054D  00DD               	movwf	imprimeValoreSensores@i^(0+128)
  3103  054E  3000               	movlw	0
  3104  054F  00DE               	movwf	(imprimeValoreSensores@i^(0+128)+1)
  3105  0550                     l2750:	
  3106                           
  3107                           ;sensores.c: 8:         printf("S%d : %d \r\n",i,getValorSensor(i));
  3108  0550  307A               	movlw	low (STR_1| (0+32768))
  3109  0551  0020               	movlb	0	; select bank0
  3110  0552  00E7               	movwf	printf@fmt
  3111  0553  3087               	movlw	high (STR_1| (0+32768))
  3112  0554  00E8               	movwf	printf@fmt+1
  3113  0555  0021               	movlb	1	; select bank1
  3114  0556  085E               	movf	(imprimeValoreSensores@i+1)^(0+128),w
  3115  0557  0020               	movlb	0	; select bank0
  3116  0558  00EA               	movwf	?_printf+3
  3117  0559  0021               	movlb	1	; select bank1
  3118  055A  085D               	movf	imprimeValoreSensores@i^(0+128),w
  3119  055B  0020               	movlb	0	; select bank0
  3120  055C  00E9               	movwf	?_printf+2
  3121  055D  0021               	movlb	1	; select bank1
  3122  055E  085E               	movf	(imprimeValoreSensores@i+1)^(0+128),w
  3123  055F  00FA               	movwf	getValorSensor@numSensor+1
  3124  0560  085D               	movf	imprimeValoreSensores@i^(0+128),w
  3125  0561  00F9               	movwf	getValorSensor@numSensor
  3126  0562  3184  249A  3185   	fcall	_getValorSensor
  3127  0565  087A               	movf	?_getValorSensor+1,w
  3128  0566  0020               	movlb	0	; select bank0
  3129  0567  00EC               	movwf	?_printf+5
  3130  0568  0879               	movf	?_getValorSensor,w
  3131  0569  00EB               	movwf	?_printf+4
  3132  056A  3187  271C  3185   	fcall	_printf
  3133                           
  3134                           ;sensores.c: 9:     }
  3135  056D  3001               	movlw	1
  3136  056E  0021               	movlb	1	; select bank1
  3137  056F  07DD               	addwf	imprimeValoreSensores@i^(0+128),f
  3138  0570  3000               	movlw	0
  3139  0571  3DDE               	addwfc	(imprimeValoreSensores@i+1)^(0+128),f
  3140  0572  085E               	movf	(imprimeValoreSensores@i+1)^(0+128),w
  3141  0573  3A80               	xorlw	128
  3142  0574  0020               	movlb	0	; select bank0
  3143  0575  00EE               	movwf	??_imprimeValoreSensores
  3144  0576  3080               	movlw	128
  3145  0577  026E               	subwf	??_imprimeValoreSensores,w
  3146  0578  1D03               	skipz
  3147  0579  2D7D               	goto	u2125
  3148  057A  300A               	movlw	10
  3149  057B  0021               	movlb	1	; select bank1
  3150  057C  025D               	subwf	imprimeValoreSensores@i^(0+128),w
  3151  057D                     u2125:	
  3152  057D  1803               	btfsc	3,0
  3153  057E  0008               	return
  3154  057F  2D50               	goto	l2750
  3155  0580                     __end_of_imprimeValoreSensores:	
  3156                           
  3157                           	psect	text4
  3158  071C                     __ptext4:	
  3159 ;; *************** function _printf *****************
  3160 ;; Defined at:
  3161 ;;		line 5 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  fmt             2   71[BANK0 ] PTR const unsigned char 
  3164 ;;		 -> STR_1(12), 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  ret             2    0        int 
  3167 ;;  ap              1    2[BANK1 ] PTR void [1]
  3168 ;;		 -> ?_printf(2), 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  2   71[BANK0 ] int 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3178 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;      Totals:         0       7       3       0       0       0       0       0       0       0       0       0       
      +0       0
  3182 ;;Total ram usage:       10 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:   12
  3185 ;; This function calls:
  3186 ;;		_vfprintf
  3187 ;; This function is called by:
  3188 ;;		_imprimeValoreSensores
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           
  3193                           ;psect for function _printf
  3194  071C                     _printf:	
  3195                           
  3196                           ;incstack = 0
  3197                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3198  071C  3069               	movlw	(low ((?_printf| 0+2)))& (0+255)
  3199  071D  0020               	movlb	0	; select bank0
  3200  071E  00ED               	movwf	??_printf
  3201  071F  086D               	movf	??_printf,w
  3202  0720  0021               	movlb	1	; select bank1
  3203  0721  00DC               	movwf	printf@ap^(0+128)
  3204  0722  0020               	movlb	0	; select bank0
  3205  0723  0868               	movf	printf@fmt+1,w
  3206  0724  00E0               	movwf	vfprintf@fmt+1
  3207  0725  0867               	movf	printf@fmt,w
  3208  0726  00DF               	movwf	vfprintf@fmt
  3209  0727  30DC               	movlw	(low (printf@ap| 0))& (0+255)
  3210  0728  00ED               	movwf	??_printf
  3211  0729  086D               	movf	??_printf,w
  3212  072A  00E1               	movwf	vfprintf@ap
  3213  072B  3000               	movlw	0
  3214  072C  3185  25B5         	fcall	_vfprintf
  3215  072E  0008               	return
  3216  072F                     __end_of_printf:	
  3217                           
  3218                           	psect	text5
  3219  05B5                     __ptext5:	
  3220 ;; *************** function _vfprintf *****************
  3221 ;; Defined at:
  3222 ;;		line 1368 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  fp              1    wreg     PTR struct _IO_FILE
  3225 ;;		 -> NULL(0), 
  3226 ;;  fmt             2   63[BANK0 ] PTR const unsigned char 
  3227 ;;		 -> STR_1(12), 
  3228 ;;  ap              1   65[BANK0 ] PTR PTR void 
  3229 ;;		 -> printf@ap(1), 
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;  fp              1   68[BANK0 ] PTR struct _IO_FILE
  3232 ;;		 -> NULL(0), 
  3233 ;;  cfmt            2   69[BANK0 ] PTR unsigned char 
  3234 ;;		 -> STR_1(12), 
  3235 ;; Return value:  Size  Location     Type
  3236 ;;                  2   63[BANK0 ] int 
  3237 ;; Registers used:
  3238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3239 ;; Tracked objects:
  3240 ;;		On entry : 0/0
  3241 ;;		On exit  : 0/0
  3242 ;;		Unchanged: 0/0
  3243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3244 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3247 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3248 ;;Total ram usage:        8 bytes
  3249 ;; Hardware stack levels used:    1
  3250 ;; Hardware stack levels required when called:   11
  3251 ;; This function calls:
  3252 ;;		_vfpfcnvrt
  3253 ;; This function is called by:
  3254 ;;		_printf
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _vfprintf
  3260  05B5                     _vfprintf:	
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3264                           ;vfprintf@fp stored from wreg
  3265  05B5  0020               	movlb	0	; select bank0
  3266  05B6  00E4               	movwf	vfprintf@fp
  3267                           
  3268                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
  3269  05B7  0860               	movf	vfprintf@fmt+1,w
  3270  05B8  00E6               	movwf	vfprintf@cfmt+1
  3271  05B9  085F               	movf	vfprintf@fmt,w
  3272  05BA  00E5               	movwf	vfprintf@cfmt
  3273                           
  3274                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  3275  05BB  0021               	movlb	1	; select bank1
  3276  05BC  01A0               	clrf	_nout^(0+128)
  3277  05BD  01A1               	clrf	(_nout+1)^(0+128)
  3278  05BE                     l2700:	
  3279                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  3280                           
  3281                           
  3282                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
  3283  05BE  0020               	movlb	0	; select bank0
  3284  05BF  0865               	movf	vfprintf@cfmt,w
  3285  05C0  0084               	movwf	4
  3286  05C1  0866               	movf	vfprintf@cfmt+1,w
  3287  05C2  0085               	movwf	5
  3288  05C3  0012               	moviw fsr0++
  3289  05C4  1903               	btfsc	3,2
  3290  05C5  2DDB               	goto	l2702
  3291                           
  3292                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
  3293  05C6  3065               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  3294  05C7  00E2               	movwf	??_vfprintf
  3295  05C8  0862               	movf	??_vfprintf,w
  3296  05C9  00CF               	movwf	vfpfcnvrt@fmt
  3297  05CA  0861               	movf	vfprintf@ap,w
  3298  05CB  00E3               	movwf	??_vfprintf+1
  3299  05CC  0863               	movf	??_vfprintf+1,w
  3300  05CD  00D0               	movwf	vfpfcnvrt@ap
  3301  05CE  0864               	movf	vfprintf@fp,w
  3302  05CF  3183  237A  3185   	fcall	_vfpfcnvrt
  3303  05D2  0020               	movlb	0	; select bank0
  3304  05D3  084F               	movf	?_vfpfcnvrt,w
  3305  05D4  0021               	movlb	1	; select bank1
  3306  05D5  07A0               	addwf	_nout^(0+128),f
  3307  05D6  0020               	movlb	0	; select bank0
  3308  05D7  0850               	movf	?_vfpfcnvrt+1,w
  3309  05D8  0021               	movlb	1	; select bank1
  3310  05D9  3DA1               	addwfc	(_nout+1)^(0+128),f
  3311  05DA  2DBE               	goto	l2700
  3312  05DB                     l2702:	
  3313                           
  3314                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nout;
  3315  05DB  0021               	movlb	1	; select bank1
  3316  05DC  0821               	movf	(_nout+1)^(0+128),w
  3317  05DD  0020               	movlb	0	; select bank0
  3318  05DE  00E0               	movwf	?_vfprintf+1
  3319  05DF  0021               	movlb	1	; select bank1
  3320  05E0  0820               	movf	_nout^(0+128),w
  3321  05E1  0020               	movlb	0	; select bank0
  3322  05E2  00DF               	movwf	?_vfprintf
  3323  05E3  0008               	return
  3324  05E4                     __end_of_vfprintf:	
  3325                           
  3326                           	psect	text6
  3327  037A                     __ptext6:	
  3328 ;; *************** function _vfpfcnvrt *****************
  3329 ;; Defined at:
  3330 ;;		line 670 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;  fp              1    wreg     PTR struct _IO_FILE
  3333 ;;		 -> NULL(0), 
  3334 ;;  fmt             1   47[BANK0 ] PTR PTR unsigned char 
  3335 ;;		 -> vfprintf@cfmt(2), 
  3336 ;;  ap              1   48[BANK0 ] PTR PTR void 
  3337 ;;		 -> printf@ap(1), 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;  fp              1   62[BANK0 ] PTR struct _IO_FILE
  3340 ;;		 -> NULL(0), 
  3341 ;;  ll              8   54[BANK0 ] long long 
  3342 ;;  llu             8    0        unsigned long long 
  3343 ;;  f               4    0        unsigned long long 
  3344 ;;  ct              3    0        unsigned char [3]
  3345 ;;  vp              2    0        PTR void 
  3346 ;;  i               2    0        int 
  3347 ;;  done            2    0        int 
  3348 ;;  cp              2    0        PTR unsigned char 
  3349 ;;  c               1    0        unsigned char 
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  2   47[BANK0 ] int 
  3352 ;; Registers used:
  3353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3359 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3360 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3361 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3362 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3363 ;;Total ram usage:       16 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:   10
  3366 ;; This function calls:
  3367 ;;		_dtoa
  3368 ;;		_fputc
  3369 ;; This function is called by:
  3370 ;;		_vfprintf
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           
  3375                           ;psect for function _vfpfcnvrt
  3376  037A                     _vfpfcnvrt:	
  3377                           
  3378                           ;incstack = 0
  3379                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3380                           ;vfpfcnvrt@fp stored from wreg
  3381  037A  0020               	movlb	0	; select bank0
  3382  037B  00DE               	movwf	vfpfcnvrt@fp
  3383                           
  3384                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
  3385  037C  084F               	movf	vfpfcnvrt@fmt,w
  3386  037D  0086               	movwf	6
  3387  037E  0187               	clrf	7
  3388  037F  3F40               	moviw [0]fsr1
  3389  0380  00D1               	movwf	??_vfpfcnvrt
  3390  0381  3F41               	moviw [1]fsr1
  3391  0382  00D2               	movwf	??_vfpfcnvrt+1
  3392  0383  0851               	movf	??_vfpfcnvrt,w
  3393  0384  0084               	movwf	4
  3394  0385  0852               	movf	??_vfpfcnvrt+1,w
  3395  0386  0085               	movwf	5
  3396  0387  0012               	moviw fsr0++
  3397  0388  3A25               	xorlw	37
  3398  0389  1D03               	btfss	3,2
  3399  038A  2C27               	goto	l2682
  3400                           
  3401                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  3402  038B  084F               	movf	vfpfcnvrt@fmt,w
  3403  038C  0086               	movwf	6
  3404  038D  0187               	clrf	7
  3405  038E  3001               	movlw	1
  3406  038F  0781               	addwf	1,f
  3407  0390  3141               	addfsr 1,1
  3408  0391  1803               	skipnc
  3409  0392  0A81               	incf	1,f
  3410                           
  3411                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
  3412  0393  0021               	movlb	1	; select bank1
  3413  0394  01A2               	clrf	_width^(0+128)
  3414  0395  01A3               	clrf	(_width+1)^(0+128)
  3415  0396  01A6               	clrf	_flags^(0+128)
  3416  0397  01A7               	clrf	(_flags+1)^(0+128)
  3417                           
  3418                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
  3419  0398  30FF               	movlw	255
  3420  0399  00A4               	movwf	_prec^(0+128)
  3421  039A  30FF               	movlw	255
  3422  039B  00A5               	movwf	(_prec^(0+128)+1)
  3423                           
  3424                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
  3425  039C  0020               	movlb	0	; select bank0
  3426  039D  084F               	movf	vfpfcnvrt@fmt,w
  3427  039E  0086               	movwf	6
  3428  039F  0187               	clrf	7
  3429  03A0  3F40               	moviw [0]fsr1
  3430  03A1  00D1               	movwf	??_vfpfcnvrt
  3431  03A2  3F41               	moviw [1]fsr1
  3432  03A3  00D2               	movwf	??_vfpfcnvrt+1
  3433  03A4  0851               	movf	??_vfpfcnvrt,w
  3434  03A5  0084               	movwf	4
  3435  03A6  0852               	movf	??_vfpfcnvrt+1,w
  3436  03A7  0085               	movwf	5
  3437  03A8  0012               	moviw fsr0++
  3438  03A9  3A64               	xorlw	100
  3439  03AA  1903               	btfsc	3,2
  3440  03AB  2BBB               	goto	l2658
  3441  03AC  084F               	movf	vfpfcnvrt@fmt,w
  3442  03AD  0086               	movwf	6
  3443  03AE  0187               	clrf	7
  3444  03AF  3F40               	moviw [0]fsr1
  3445  03B0  00D1               	movwf	??_vfpfcnvrt
  3446  03B1  3F41               	moviw [1]fsr1
  3447  03B2  00D2               	movwf	??_vfpfcnvrt+1
  3448  03B3  0851               	movf	??_vfpfcnvrt,w
  3449  03B4  0084               	movwf	4
  3450  03B5  0852               	movf	??_vfpfcnvrt+1,w
  3451  03B6  0085               	movwf	5
  3452  03B7  0012               	moviw fsr0++
  3453  03B8  3A69               	xorlw	105
  3454  03B9  1D03               	btfss	3,2
  3455  03BA  2BF5               	goto	l2666
  3456  03BB                     l2658:	
  3457                           
  3458                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*fmt;
  3459  03BB  084F               	movf	vfpfcnvrt@fmt,w
  3460  03BC  0086               	movwf	6
  3461  03BD  0187               	clrf	7
  3462  03BE  3001               	movlw	1
  3463  03BF  0781               	addwf	1,f
  3464  03C0  3141               	addfsr 1,1
  3465  03C1  1803               	skipnc
  3466  03C2  0A81               	incf	1,f
  3467                           
  3468                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
  3469  03C3  0850               	movf	vfpfcnvrt@ap,w
  3470  03C4  0086               	movwf	6
  3471  03C5  0187               	clrf	7
  3472  03C6  0801               	movf	1,w
  3473  03C7  0084               	movwf	4
  3474  03C8  0185               	clrf	5
  3475  03C9  3002               	movlw	2
  3476  03CA  0781               	addwf	1,f
  3477  03CB  3F00               	moviw [0]fsr0
  3478  03CC  00D1               	movwf	??_vfpfcnvrt
  3479  03CD  3F01               	moviw [1]fsr0
  3480  03CE  00D2               	movwf	??_vfpfcnvrt+1
  3481  03CF  0851               	movf	??_vfpfcnvrt,w
  3482  03D0  00D6               	movwf	vfpfcnvrt@ll
  3483  03D1  0852               	movf	??_vfpfcnvrt+1,w
  3484  03D2  00D7               	movwf	vfpfcnvrt@ll+1
  3485  03D3  0D89               	rlf	9,f
  3486  03D4  3B89               	subwfb	9,f
  3487  03D5  0989               	comf	9,f
  3488  03D6  00D8               	movwf	vfpfcnvrt@ll+2
  3489  03D7  00D9               	movwf	vfpfcnvrt@ll+3
  3490  03D8  00DA               	movwf	vfpfcnvrt@ll+4
  3491  03D9  00DB               	movwf	vfpfcnvrt@ll+5
  3492  03DA  00DC               	movwf	vfpfcnvrt@ll+6
  3493  03DB  00DD               	movwf	vfpfcnvrt@ll+7
  3494                           
  3495                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             return dtoa(
      +                          fp, ll);
  3496  03DC  0856               	movf	vfpfcnvrt@ll,w
  3497  03DD  00B1               	movwf	dtoa@d
  3498  03DE  0857               	movf	vfpfcnvrt@ll+1,w
  3499  03DF  00B2               	movwf	dtoa@d+1
  3500  03E0  0858               	movf	vfpfcnvrt@ll+2,w
  3501  03E1  00B3               	movwf	dtoa@d+2
  3502  03E2  0859               	movf	vfpfcnvrt@ll+3,w
  3503  03E3  00B4               	movwf	dtoa@d+3
  3504  03E4  085A               	movf	vfpfcnvrt@ll+4,w
  3505  03E5  00B5               	movwf	dtoa@d+4
  3506  03E6  085B               	movf	vfpfcnvrt@ll+5,w
  3507  03E7  00B6               	movwf	dtoa@d+5
  3508  03E8  085C               	movf	vfpfcnvrt@ll+6,w
  3509  03E9  00B7               	movwf	dtoa@d+6
  3510  03EA  085D               	movf	vfpfcnvrt@ll+7,w
  3511  03EB  00B8               	movwf	dtoa@d+7
  3512  03EC  085E               	movf	vfpfcnvrt@fp,w
  3513  03ED  3180  205C         	fcall	_dtoa
  3514  03EF  0020               	movlb	0	; select bank0
  3515  03F0  0832               	movf	?_dtoa+1,w
  3516  03F1  00D0               	movwf	?_vfpfcnvrt+1
  3517  03F2  0831               	movf	?_dtoa,w
  3518  03F3  00CF               	movwf	?_vfpfcnvrt
  3519  03F4  0008               	return
  3520  03F5                     l2666:	
  3521                           
  3522                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
  3523  03F5  084F               	movf	vfpfcnvrt@fmt,w
  3524  03F6  0086               	movwf	6
  3525  03F7  0187               	clrf	7
  3526  03F8  3F40               	moviw [0]fsr1
  3527  03F9  00D1               	movwf	??_vfpfcnvrt
  3528  03FA  3F41               	moviw [1]fsr1
  3529  03FB  00D2               	movwf	??_vfpfcnvrt+1
  3530  03FC  0851               	movf	??_vfpfcnvrt,w
  3531  03FD  0084               	movwf	4
  3532  03FE  0852               	movf	??_vfpfcnvrt+1,w
  3533  03FF  0085               	movwf	5
  3534  0400  0012               	moviw fsr0++
  3535  0401  3A25               	xorlw	37
  3536  0402  1D03               	btfss	3,2
  3537  0403  2C1C               	goto	l2676
  3538                           
  3539                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
  3540  0404  084F               	movf	vfpfcnvrt@fmt,w
  3541  0405  0086               	movwf	6
  3542  0406  0187               	clrf	7
  3543  0407  3001               	movlw	1
  3544  0408  0781               	addwf	1,f
  3545  0409  3141               	addfsr 1,1
  3546  040A  1803               	skipnc
  3547  040B  0A81               	incf	1,f
  3548                           
  3549                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
  3550  040C  3025               	movlw	37
  3551  040D  00F4               	movwf	fputc@c
  3552  040E  3000               	movlw	0
  3553  040F  00F5               	movwf	fputc@c+1
  3554  0410  085E               	movf	vfpfcnvrt@fp,w
  3555  0411  00D1               	movwf	??_vfpfcnvrt
  3556  0412  0851               	movf	??_vfpfcnvrt,w
  3557  0413  00F6               	movwf	fputc@fp
  3558  0414  3185  2580         	fcall	_fputc
  3559  0416                     l2672:	
  3560                           
  3561                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             return 1;
  3562  0416  3001               	movlw	1
  3563  0417  0020               	movlb	0	; select bank0
  3564  0418  00CF               	movwf	?_vfpfcnvrt
  3565  0419  3000               	movlw	0
  3566  041A  00D0               	movwf	?_vfpfcnvrt+1
  3567  041B  0008               	return
  3568  041C                     l2676:	
  3569                           
  3570                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
  3571  041C  084F               	movf	vfpfcnvrt@fmt,w
  3572  041D  0086               	movwf	6
  3573  041E  0187               	clrf	7
  3574  041F  3001               	movlw	1
  3575  0420  0781               	addwf	1,f
  3576  0421  3141               	addfsr 1,1
  3577  0422  1803               	skipnc
  3578  0423  0A81               	incf	1,f
  3579                           
  3580                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return 0;
  3581  0424  01CF               	clrf	?_vfpfcnvrt
  3582  0425  01D0               	clrf	?_vfpfcnvrt+1
  3583  0426  0008               	return
  3584  0427                     l2682:	
  3585                           
  3586                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
  3587  0427  084F               	movf	vfpfcnvrt@fmt,w
  3588  0428  0086               	movwf	6
  3589  0429  0187               	clrf	7
  3590  042A  3F40               	moviw [0]fsr1
  3591  042B  00D1               	movwf	??_vfpfcnvrt
  3592  042C  3F41               	moviw [1]fsr1
  3593  042D  00D2               	movwf	??_vfpfcnvrt+1
  3594  042E  0851               	movf	??_vfpfcnvrt,w
  3595  042F  0084               	movwf	4
  3596  0430  0852               	movf	??_vfpfcnvrt+1,w
  3597  0431  0085               	movwf	5
  3598  0432  0800               	movf	0,w	;code access
  3599  0433  00D3               	movwf	??_vfpfcnvrt+2
  3600  0434  01D4               	clrf	??_vfpfcnvrt+3
  3601  0435  0853               	movf	??_vfpfcnvrt+2,w
  3602  0436  00F4               	movwf	fputc@c
  3603  0437  0854               	movf	??_vfpfcnvrt+3,w
  3604  0438  00F5               	movwf	fputc@c+1
  3605  0439  085E               	movf	vfpfcnvrt@fp,w
  3606  043A  00D5               	movwf	??_vfpfcnvrt+4
  3607  043B  0855               	movf	??_vfpfcnvrt+4,w
  3608  043C  00F6               	movwf	fputc@fp
  3609  043D  3185  2580  3183   	fcall	_fputc
  3610                           
  3611                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  3612  0440  0020               	movlb	0	; select bank0
  3613  0441  084F               	movf	vfpfcnvrt@fmt,w
  3614  0442  0086               	movwf	6
  3615  0443  0187               	clrf	7
  3616  0444  3001               	movlw	1
  3617  0445  0781               	addwf	1,f
  3618  0446  3141               	addfsr 1,1
  3619  0447  1803               	skipnc
  3620  0448  0A81               	incf	1,f
  3621  0449  2C16               	goto	l2672
  3622  044A                     __end_of_vfpfcnvrt:	
  3623                           
  3624                           	psect	text7
  3625  005C                     __ptext7:	
  3626 ;; *************** function _dtoa *****************
  3627 ;; Defined at:
  3628 ;;		line 274 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  fp              1    wreg     PTR struct _IO_FILE
  3631 ;;		 -> NULL(0), 
  3632 ;;  d               8   17[BANK0 ] long long 
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
  3635 ;;		 -> NULL(0), 
  3636 ;;  n               8   37[BANK0 ] long long 
  3637 ;;  i               2   45[BANK0 ] int 
  3638 ;;  s               2   35[BANK0 ] int 
  3639 ;;  w               2   33[BANK0 ] int 
  3640 ;;  p               2   31[BANK0 ] int 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  2   17[BANK0 ] int 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3650 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3654 ;;Total ram usage:       30 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    9
  3657 ;; This function calls:
  3658 ;;		___aodiv
  3659 ;;		___aomod
  3660 ;;		_abs
  3661 ;;		_pad
  3662 ;; This function is called by:
  3663 ;;		_vfpfcnvrt
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function _dtoa
  3669  005C                     _dtoa:	
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _dtoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3673                           ;dtoa@fp stored from wreg
  3674  005C  0020               	movlb	0	; select bank0
  3675  005D  00BE               	movwf	dtoa@fp
  3676                           
  3677                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 275: {;/opt/mic
      +                          rochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:     long long n;;/opt/microchip/xc8/v2
      +                          .05/pic/sources/c99/common/doprnt.c: 280:     n = d;
  3678  005E  0831               	movf	dtoa@d,w
  3679  005F  00C5               	movwf	dtoa@n
  3680  0060  0832               	movf	dtoa@d+1,w
  3681  0061  00C6               	movwf	dtoa@n+1
  3682  0062  0833               	movf	dtoa@d+2,w
  3683  0063  00C7               	movwf	dtoa@n+2
  3684  0064  0834               	movf	dtoa@d+3,w
  3685  0065  00C8               	movwf	dtoa@n+3
  3686  0066  0835               	movf	dtoa@d+4,w
  3687  0067  00C9               	movwf	dtoa@n+4
  3688  0068  0836               	movf	dtoa@d+5,w
  3689  0069  00CA               	movwf	dtoa@n+5
  3690  006A  0837               	movf	dtoa@d+6,w
  3691  006B  00CB               	movwf	dtoa@n+6
  3692  006C  0838               	movf	dtoa@d+7,w
  3693  006D  00CC               	movwf	dtoa@n+7
  3694                           
  3695                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ? 1 : 0;
  3696  006E  3045               	movlw	low dtoa@n
  3697  006F  0086               	movwf	6
  3698  0070  3000               	movlw	high dtoa@n
  3699  0071  0087               	movwf	7
  3700  0072  3F47               	moviw [7]fsr1
  3701  0073  00B9               	movwf	??_dtoa
  3702  0074  1FB9               	btfss	??_dtoa,7
  3703  0075  2878               	goto	u1900
  3704  0076  3001               	movlw	1
  3705  0077  2879               	goto	u1910
  3706  0078                     u1900:	
  3707  0078  3000               	movlw	0
  3708  0079                     u1910:	
  3709  0079  0020               	movlb	0	; select bank0
  3710  007A  00BA               	movwf	??_dtoa+1
  3711  007B  01BB               	clrf	??_dtoa+2
  3712  007C  083A               	movf	??_dtoa+1,w
  3713  007D  00C3               	movwf	dtoa@s
  3714  007E  083B               	movf	??_dtoa+2,w
  3715  007F  00C4               	movwf	dtoa@s+1
  3716                           
  3717                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  3718  0080  0843               	movf	dtoa@s,w
  3719  0081  0444               	iorwf	dtoa@s+1,w
  3720  0082  1903               	btfsc	3,2
  3721  0083  28A2               	goto	l665
  3722                           
  3723                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  3724  0084  09C5               	comf	dtoa@n,f
  3725  0085  09C6               	comf	dtoa@n+1,f
  3726  0086  09C7               	comf	dtoa@n+2,f
  3727  0087  09C8               	comf	dtoa@n+3,f
  3728  0088  09C9               	comf	dtoa@n+4,f
  3729  0089  09CA               	comf	dtoa@n+5,f
  3730  008A  09CB               	comf	dtoa@n+6,f
  3731  008B  09CC               	comf	dtoa@n+7,f
  3732  008C  0AC5               	incf	dtoa@n,f
  3733  008D  1D03               	skipz
  3734  008E  28A2               	goto	l665
  3735  008F  0AC6               	incf	dtoa@n+1,f
  3736  0090  1D03               	skipz
  3737  0091  28A2               	goto	l665
  3738  0092  0AC7               	incf	dtoa@n+2,f
  3739  0093  1D03               	skipz
  3740  0094  28A2               	goto	l665
  3741  0095  0AC8               	incf	dtoa@n+3,f
  3742  0096  1D03               	skipz
  3743  0097  28A2               	goto	l665
  3744  0098  0AC9               	incf	dtoa@n+4,f
  3745  0099  1D03               	skipz
  3746  009A  28A2               	goto	l665
  3747  009B  0ACA               	incf	dtoa@n+5,f
  3748  009C  1D03               	skipz
  3749  009D  28A2               	goto	l665
  3750  009E  0ACB               	incf	dtoa@n+6,f
  3751  009F  1D03               	skipz
  3752  00A0  28A2               	goto	l665
  3753  00A1  0ACC               	incf	dtoa@n+7,f
  3754  00A2                     l665:	
  3755                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 284:     }
  3756                           
  3757                           
  3758                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec < 0)) {
  3759  00A2  0021               	movlb	1	; select bank1
  3760  00A3  1BA5               	btfsc	(_prec+1)^(0+128),7
  3761  00A4  28A9               	goto	l666
  3762                           
  3763                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &= ~(1 << 
      +                          1);
  3764  00A5  30FD               	movlw	253
  3765  00A6  05A6               	andwf	_flags^(0+128),f
  3766  00A7  30FF               	movlw	255
  3767  00A8  05A7               	andwf	(_flags+1)^(0+128),f
  3768  00A9                     l666:	
  3769                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 289:     }
  3770                           
  3771                           
  3772                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < prec) ? pre
      +                          c : 1;
  3773  00A9  0825               	movf	(_prec+1)^(0+128),w
  3774  00AA  3A80               	xorlw	128
  3775  00AB  0020               	movlb	0	; select bank0
  3776  00AC  00B9               	movwf	??_dtoa
  3777  00AD  3080               	movlw	128
  3778  00AE  0239               	subwf	??_dtoa,w
  3779  00AF  1D03               	skipz
  3780  00B0  28B4               	goto	u1955
  3781  00B1  3001               	movlw	1
  3782  00B2  0021               	movlb	1	; select bank1
  3783  00B3  0224               	subwf	_prec^(0+128),w
  3784  00B4                     u1955:	
  3785  00B4  1803               	skipnc
  3786  00B5  28BC               	goto	l2588
  3787  00B6  3001               	movlw	1
  3788  00B7  0020               	movlb	0	; select bank0
  3789  00B8  00BF               	movwf	dtoa@p
  3790  00B9  3000               	movlw	0
  3791  00BA  00C0               	movwf	dtoa@p+1
  3792  00BB  28C4               	goto	l670
  3793  00BC                     l2588:	
  3794  00BC  0021               	movlb	1	; select bank1
  3795  00BD  0825               	movf	(_prec+1)^(0+128),w
  3796  00BE  0020               	movlb	0	; select bank0
  3797  00BF  00C0               	movwf	dtoa@p+1
  3798  00C0  0021               	movlb	1	; select bank1
  3799  00C1  0824               	movf	_prec^(0+128),w
  3800  00C2  0020               	movlb	0	; select bank0
  3801  00C3  00BF               	movwf	dtoa@p
  3802  00C4                     l670:	
  3803                           
  3804                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  3805  00C4  0021               	movlb	1	; select bank1
  3806  00C5  0823               	movf	(_width+1)^(0+128),w
  3807  00C6  0020               	movlb	0	; select bank0
  3808  00C7  00C2               	movwf	dtoa@w+1
  3809  00C8  0021               	movlb	1	; select bank1
  3810  00C9  0822               	movf	_width^(0+128),w
  3811  00CA  0020               	movlb	0	; select bank0
  3812  00CB  00C1               	movwf	dtoa@w
  3813                           
  3814                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (flags & (1
      +                           << 2))) {
  3815  00CC  0843               	movf	dtoa@s,w
  3816  00CD  0444               	iorwf	dtoa@s+1,w
  3817  00CE  1D03               	btfss	3,2
  3818  00CF  28D3               	goto	l2594
  3819  00D0  0021               	movlb	1	; select bank1
  3820  00D1  1D26               	btfss	_flags^(0+128),2
  3821  00D2  28D8               	goto	l671
  3822  00D3                     l2594:	
  3823                           
  3824                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  3825  00D3  30FF               	movlw	255
  3826  00D4  0020               	movlb	0	; select bank0
  3827  00D5  07C1               	addwf	dtoa@w,f
  3828  00D6  30FF               	movlw	255
  3829  00D7  3DC2               	addwfc	dtoa@w+1,f
  3830  00D8                     l671:	
  3831                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 294:     }
  3832                           
  3833                           
  3834                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(dbuf) - 1
      +                          ;
  3835  00D8  301F               	movlw	31
  3836  00D9  0020               	movlb	0	; select bank0
  3837  00DA  00CD               	movwf	dtoa@i
  3838  00DB  3000               	movlw	0
  3839  00DC  00CE               	movwf	dtoa@i+1
  3840                           
  3841                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '\0';
  3842  00DD  0021               	movlb	1	; select bank1
  3843  00DE  01CC               	clrf	(_dbuf^(0+128)+31)
  3844                           
  3845                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  3846  00DF  296D               	goto	l674
  3847  00E0                     l2608:	
  3848  00E0  0020               	movlb	0	; select bank0
  3849  00E1  0845               	movf	dtoa@n,w
  3850  00E2  0446               	iorwf	dtoa@n+1,w
  3851  00E3  0447               	iorwf	dtoa@n+2,w
  3852  00E4  0448               	iorwf	dtoa@n+3,w
  3853  00E5  0449               	iorwf	dtoa@n+4,w
  3854  00E6  044A               	iorwf	dtoa@n+5,w
  3855  00E7  044B               	iorwf	dtoa@n+6,w
  3856  00E8  044C               	iorwf	dtoa@n+7,w
  3857  00E9  1D03               	skipz
  3858  00EA  2905               	goto	l2598
  3859  00EB  0840               	movf	dtoa@p+1,w
  3860  00EC  3A80               	xorlw	128
  3861  00ED  00B9               	movwf	??_dtoa
  3862  00EE  3080               	movlw	128
  3863  00EF  0239               	subwf	??_dtoa,w
  3864  00F0  1D03               	skipz
  3865  00F1  28F4               	goto	u2005
  3866  00F2  3001               	movlw	1
  3867  00F3  023F               	subwf	dtoa@p,w
  3868  00F4                     u2005:	
  3869  00F4  1803               	skipnc
  3870  00F5  2905               	goto	l2598
  3871  00F6  0020               	movlb	0	; select bank0
  3872  00F7  0842               	movf	dtoa@w+1,w
  3873  00F8  3A80               	xorlw	128
  3874  00F9  00B9               	movwf	??_dtoa
  3875  00FA  3080               	movlw	128
  3876  00FB  0239               	subwf	??_dtoa,w
  3877  00FC  1D03               	skipz
  3878  00FD  2900               	goto	u2015
  3879  00FE  3001               	movlw	1
  3880  00FF  0241               	subwf	dtoa@w,w
  3881  0100                     u2015:	
  3882  0100  1C03               	skipc
  3883  0101  2979               	goto	l2616
  3884  0102  0021               	movlb	1	; select bank1
  3885  0103  1CA6               	btfss	_flags^(0+128),1
  3886  0104  2979               	goto	l2616
  3887  0105                     l2598:	
  3888                           
  3889                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  3890  0105  30FF               	movlw	255
  3891  0106  0020               	movlb	0	; select bank0
  3892  0107  07CD               	addwf	dtoa@i,f
  3893  0108  30FF               	movlw	255
  3894  0109  3DCE               	addwfc	dtoa@i+1,f
  3895                           
  3896                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i] = '0' + 
      +                          abs(n % 10);
  3897  010A  300A               	movlw	10
  3898  010B  00A0               	movwf	___aomod@divisor
  3899  010C  01A1               	clrf	___aomod@divisor+1
  3900  010D  01A2               	clrf	___aomod@divisor+2
  3901  010E  01A3               	clrf	___aomod@divisor+3
  3902  010F  01A4               	clrf	___aomod@divisor+4
  3903  0110  01A5               	clrf	___aomod@divisor+5
  3904  0111  01A6               	clrf	___aomod@divisor+6
  3905  0112  01A7               	clrf	___aomod@divisor+7
  3906  0113  0845               	movf	dtoa@n,w
  3907  0114  00A8               	movwf	___aomod@dividend
  3908  0115  0846               	movf	dtoa@n+1,w
  3909  0116  00A9               	movwf	___aomod@dividend+1
  3910  0117  0847               	movf	dtoa@n+2,w
  3911  0118  00AA               	movwf	___aomod@dividend+2
  3912  0119  0848               	movf	dtoa@n+3,w
  3913  011A  00AB               	movwf	___aomod@dividend+3
  3914  011B  0849               	movf	dtoa@n+4,w
  3915  011C  00AC               	movwf	___aomod@dividend+4
  3916  011D  084A               	movf	dtoa@n+5,w
  3917  011E  00AD               	movwf	___aomod@dividend+5
  3918  011F  084B               	movf	dtoa@n+6,w
  3919  0120  00AE               	movwf	___aomod@dividend+6
  3920  0121  084C               	movf	dtoa@n+7,w
  3921  0122  00AF               	movwf	___aomod@dividend+7
  3922  0123  3182  229E  3180   	fcall	___aomod
  3923  0126  0020               	movlb	0	; select bank0
  3924  0127  0821               	movf	?___aomod+1,w
  3925  0128  00F5               	movwf	abs@a+1
  3926  0129  0820               	movf	?___aomod,w
  3927  012A  00F4               	movwf	abs@a
  3928  012B  3187  2705  3180   	fcall	_abs
  3929  012E  0874               	movf	?_abs,w
  3930  012F  3E30               	addlw	48
  3931  0130  0020               	movlb	0	; select bank0
  3932  0131  00B9               	movwf	??_dtoa
  3933  0132  084D               	movf	dtoa@i,w
  3934  0133  3EAD               	addlw	(low (_dbuf| 0))& (0+255)
  3935  0134  0086               	movwf	6
  3936  0135  0187               	clrf	7
  3937  0136  0839               	movf	??_dtoa,w
  3938  0137  0081               	movwf	1
  3939                           
  3940                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  3941  0138  30FF               	movlw	255
  3942  0139  07BF               	addwf	dtoa@p,f
  3943  013A  30FF               	movlw	255
  3944  013B  3DC0               	addwfc	dtoa@p+1,f
  3945                           
  3946                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  3947  013C  30FF               	movlw	255
  3948  013D  07C1               	addwf	dtoa@w,f
  3949  013E  30FF               	movlw	255
  3950  013F  3DC2               	addwfc	dtoa@w+1,f
  3951                           
  3952                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n / 10;
  3953  0140  300A               	movlw	10
  3954  0141  00A0               	movwf	___aodiv@divisor
  3955  0142  01A1               	clrf	___aodiv@divisor+1
  3956  0143  01A2               	clrf	___aodiv@divisor+2
  3957  0144  01A3               	clrf	___aodiv@divisor+3
  3958  0145  01A4               	clrf	___aodiv@divisor+4
  3959  0146  01A5               	clrf	___aodiv@divisor+5
  3960  0147  01A6               	clrf	___aodiv@divisor+6
  3961  0148  01A7               	clrf	___aodiv@divisor+7
  3962  0149  0845               	movf	dtoa@n,w
  3963  014A  00A8               	movwf	___aodiv@dividend
  3964  014B  0846               	movf	dtoa@n+1,w
  3965  014C  00A9               	movwf	___aodiv@dividend+1
  3966  014D  0847               	movf	dtoa@n+2,w
  3967  014E  00AA               	movwf	___aodiv@dividend+2
  3968  014F  0848               	movf	dtoa@n+3,w
  3969  0150  00AB               	movwf	___aodiv@dividend+3
  3970  0151  0849               	movf	dtoa@n+4,w
  3971  0152  00AC               	movwf	___aodiv@dividend+4
  3972  0153  084A               	movf	dtoa@n+5,w
  3973  0154  00AD               	movwf	___aodiv@dividend+5
  3974  0155  084B               	movf	dtoa@n+6,w
  3975  0156  00AE               	movwf	___aodiv@dividend+6
  3976  0157  084C               	movf	dtoa@n+7,w
  3977  0158  00AF               	movwf	___aodiv@dividend+7
  3978  0159  3181  21AB  3180   	fcall	___aodiv
  3979  015C  0020               	movlb	0	; select bank0
  3980  015D  0820               	movf	?___aodiv,w
  3981  015E  00C5               	movwf	dtoa@n
  3982  015F  0821               	movf	?___aodiv+1,w
  3983  0160  00C6               	movwf	dtoa@n+1
  3984  0161  0822               	movf	?___aodiv+2,w
  3985  0162  00C7               	movwf	dtoa@n+2
  3986  0163  0823               	movf	?___aodiv+3,w
  3987  0164  00C8               	movwf	dtoa@n+3
  3988  0165  0824               	movf	?___aodiv+4,w
  3989  0166  00C9               	movwf	dtoa@n+4
  3990  0167  0825               	movf	?___aodiv+5,w
  3991  0168  00CA               	movwf	dtoa@n+5
  3992  0169  0826               	movf	?___aodiv+6,w
  3993  016A  00CB               	movwf	dtoa@n+6
  3994  016B  0827               	movf	?___aodiv+7,w
  3995  016C  00CC               	movwf	dtoa@n+7
  3996  016D                     l674:	
  3997                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 305:     }
  3998                           
  3999                           
  4000                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  4001  016D  0020               	movlb	0	; select bank0
  4002  016E  084E               	movf	dtoa@i+1,w
  4003  016F  3A80               	xorlw	128
  4004  0170  00B9               	movwf	??_dtoa
  4005  0171  3080               	movlw	128
  4006  0172  0239               	subwf	??_dtoa,w
  4007  0173  1D03               	skipz
  4008  0174  2977               	goto	u1985
  4009  0175  3001               	movlw	1
  4010  0176  024D               	subwf	dtoa@i,w
  4011  0177                     u1985:	
  4012  0177  1803               	btfsc	3,0
  4013  0178  28E0               	goto	l2608
  4014  0179                     l2616:	
  4015                           
  4016                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (flags & (1
      +                           << 2))) {
  4017  0179  0020               	movlb	0	; select bank0
  4018  017A  0843               	movf	dtoa@s,w
  4019  017B  0444               	iorwf	dtoa@s+1,w
  4020  017C  1D03               	btfss	3,2
  4021  017D  2981               	goto	l2620
  4022  017E  0021               	movlb	1	; select bank1
  4023  017F  1D26               	btfss	_flags^(0+128),2
  4024  0180  2998               	goto	l2630
  4025  0181                     l2620:	
  4026                           
  4027                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  4028  0181  30FF               	movlw	255
  4029  0182  0020               	movlb	0	; select bank0
  4030  0183  07CD               	addwf	dtoa@i,f
  4031  0184  30FF               	movlw	255
  4032  0185  3DCE               	addwfc	dtoa@i+1,f
  4033                           
  4034                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i] = s ? '-
      +                          ' : '+';
  4035  0186  0843               	movf	dtoa@s,w
  4036  0187  0444               	iorwf	dtoa@s+1,w
  4037  0188  1D03               	btfss	3,2
  4038  0189  298C               	goto	l2626
  4039  018A  302B               	movlw	43
  4040  018B  298D               	goto	L1
  4041  018C                     l2626:	
  4042  018C  302D               	movlw	45
  4043  018D                     L1:	
  4044  018D  00BC               	movwf	_dtoa$1055
  4045  018E  3000               	movlw	0
  4046  018F  00BD               	movwf	_dtoa$1055+1
  4047  0190  083C               	movf	_dtoa$1055,w
  4048  0191  00B9               	movwf	??_dtoa
  4049  0192  084D               	movf	dtoa@i,w
  4050  0193  3EAD               	addlw	(low (_dbuf| 0))& (0+255)
  4051  0194  0086               	movwf	6
  4052  0195  0187               	clrf	7
  4053  0196  0839               	movf	??_dtoa,w
  4054  0197  0081               	movwf	1
  4055  0198                     l2630:	
  4056                           
  4057                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(fp, &dbuf
      +                          [i], w);
  4058  0198  0020               	movlb	0	; select bank0
  4059  0199  084D               	movf	dtoa@i,w
  4060  019A  3EAD               	addlw	(low (_dbuf| 0))& (0+255)
  4061  019B  00B9               	movwf	??_dtoa
  4062  019C  0839               	movf	??_dtoa,w
  4063  019D  00A8               	movwf	pad@buf
  4064  019E  0842               	movf	dtoa@w+1,w
  4065  019F  00AA               	movwf	pad@p+1
  4066  01A0  0841               	movf	dtoa@w,w
  4067  01A1  00A9               	movwf	pad@p
  4068  01A2  083E               	movf	dtoa@fp,w
  4069  01A3  3184  244A         	fcall	_pad
  4070  01A5  0020               	movlb	0	; select bank0
  4071  01A6  0829               	movf	?_pad+1,w
  4072  01A7  00B2               	movwf	?_dtoa+1
  4073  01A8  0828               	movf	?_pad,w
  4074  01A9  00B1               	movwf	?_dtoa
  4075  01AA  0008               	return
  4076  01AB                     __end_of_dtoa:	
  4077                           
  4078                           	psect	text8
  4079  044A                     __ptext8:	
  4080 ;; *************** function _pad *****************
  4081 ;; Defined at:
  4082 ;;		line 72 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  fp              1    wreg     PTR struct _IO_FILE
  4085 ;;		 -> NULL(0), 
  4086 ;;  buf             1    8[BANK0 ] PTR unsigned char 
  4087 ;;		 -> dbuf(32), 
  4088 ;;  p               2    9[BANK0 ] int 
  4089 ;; Auto vars:     Size  Location     Type
  4090 ;;  fp              1   16[BANK0 ] PTR struct _IO_FILE
  4091 ;;		 -> NULL(0), 
  4092 ;;  w               2   14[BANK0 ] int 
  4093 ;;  i               2   12[BANK0 ] int 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  2    8[BANK0 ] int 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4103 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4104 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;Total ram usage:        9 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    8
  4110 ;; This function calls:
  4111 ;;		_fputc
  4112 ;;		_fputs
  4113 ;;		_strlen
  4114 ;; This function is called by:
  4115 ;;		_dtoa
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           
  4120                           ;psect for function _pad
  4121  044A                     _pad:	
  4122                           
  4123                           ;incstack = 0
  4124                           ; Regs used in _pad: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4125                           ;pad@fp stored from wreg
  4126  044A  0020               	movlb	0	; select bank0
  4127  044B  00B0               	movwf	pad@fp
  4128                           
  4129                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.05/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
  4130  044C  0021               	movlb	1	; select bank1
  4131  044D  1C26               	btfss	_flags^(0+128),0
  4132  044E  2C58               	goto	l2488
  4133                           
  4134                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
  4135  044F  0020               	movlb	0	; select bank0
  4136  0450  0830               	movf	pad@fp,w
  4137  0451  00AB               	movwf	??_pad
  4138  0452  082B               	movf	??_pad,w
  4139  0453  00A0               	movwf	fputs@fp
  4140  0454  0828               	movf	pad@buf,w
  4141  0455  3185  25E4  3184   	fcall	_fputs
  4142  0458                     l2488:	
  4143                           
  4144                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
  4145  0458  0020               	movlb	0	; select bank0
  4146  0459  1BAA               	btfsc	pad@p+1,7
  4147  045A  2C60               	goto	l2492
  4148  045B  082A               	movf	pad@p+1,w
  4149  045C  00AF               	movwf	pad@w+1
  4150  045D  0829               	movf	pad@p,w
  4151  045E  00AE               	movwf	pad@w
  4152  045F  2C62               	goto	l657
  4153  0460                     l2492:	
  4154  0460  01AE               	clrf	pad@w
  4155  0461  01AF               	clrf	pad@w+1
  4156  0462                     l657:	
  4157                           
  4158                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  4159  0462  01AC               	clrf	pad@i
  4160  0463  01AD               	clrf	pad@i+1
  4161  0464                     l2498:	
  4162                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  4163                           
  4164                           
  4165                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
  4166  0464  082D               	movf	pad@i+1,w
  4167  0465  3A80               	xorlw	128
  4168  0466  00AB               	movwf	??_pad
  4169  0467  082F               	movf	pad@w+1,w
  4170  0468  3A80               	xorlw	128
  4171  0469  022B               	subwf	??_pad,w
  4172  046A  1D03               	skipz
  4173  046B  2C6E               	goto	u1665
  4174  046C  082E               	movf	pad@w,w
  4175  046D  022C               	subwf	pad@i,w
  4176  046E                     u1665:	
  4177  046E  1803               	btfsc	3,0
  4178  046F  2C82               	goto	l660
  4179                           
  4180                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
  4181  0470  3020               	movlw	32
  4182  0471  00F4               	movwf	fputc@c
  4183  0472  3000               	movlw	0
  4184  0473  00F5               	movwf	fputc@c+1
  4185  0474  0020               	movlb	0	; select bank0
  4186  0475  0830               	movf	pad@fp,w
  4187  0476  00AB               	movwf	??_pad
  4188  0477  082B               	movf	??_pad,w
  4189  0478  00F6               	movwf	fputc@fp
  4190  0479  3185  2580  3184   	fcall	_fputc
  4191                           
  4192                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  4193  047C  3001               	movlw	1
  4194  047D  0020               	movlb	0	; select bank0
  4195  047E  07AC               	addwf	pad@i,f
  4196  047F  3000               	movlw	0
  4197  0480  3DAD               	addwfc	pad@i+1,f
  4198  0481  2C64               	goto	l2498
  4199  0482                     l660:	
  4200                           
  4201                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
  4202  0482  0021               	movlb	1	; select bank1
  4203  0483  1826               	btfsc	_flags^(0+128),0
  4204  0484  2C8E               	goto	l661
  4205                           
  4206                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
  4207  0485  0020               	movlb	0	; select bank0
  4208  0486  0830               	movf	pad@fp,w
  4209  0487  00AB               	movwf	??_pad
  4210  0488  082B               	movf	??_pad,w
  4211  0489  00A0               	movwf	fputs@fp
  4212  048A  0828               	movf	pad@buf,w
  4213  048B  3185  25E4  3184   	fcall	_fputs
  4214  048E                     l661:	
  4215                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 92:     }
  4216                           
  4217                           
  4218                           ;/opt/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
  4219  048E  0020               	movlb	0	; select bank0
  4220  048F  0828               	movf	pad@buf,w
  4221  0490  3186  26EE         	fcall	_strlen
  4222  0492  0020               	movlb	0	; select bank0
  4223  0493  082E               	movf	pad@w,w
  4224  0494  0771               	addwf	?_strlen,w
  4225  0495  00A8               	movwf	?_pad
  4226  0496  082F               	movf	pad@w+1,w
  4227  0497  3D72               	addwfc	?_strlen+1,w
  4228  0498  00A9               	movwf	?_pad+1
  4229  0499  0008               	return
  4230  049A                     __end_of_pad:	
  4231                           
  4232                           	psect	text9
  4233  06EE                     __ptext9:	
  4234 ;; *************** function _strlen *****************
  4235 ;; Defined at:
  4236 ;;		line 12 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  s               1    wreg     PTR const unsigned char 
  4239 ;;		 -> dbuf(32), 
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;  s               1    5[COMMON] PTR const unsigned char 
  4242 ;;		 -> dbuf(32), 
  4243 ;;  a               1    4[COMMON] PTR const unsigned char 
  4244 ;;		 -> dbuf(32), 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  2    1[COMMON] unsigned int 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;Total ram usage:        5 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    4
  4261 ;; This function calls:
  4262 ;;		Nothing
  4263 ;; This function is called by:
  4264 ;;		_pad
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           
  4269                           ;psect for function _strlen
  4270  06EE                     _strlen:	
  4271                           
  4272                           ;incstack = 0
  4273                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
  4274                           ;strlen@s stored from wreg
  4275  06EE  00F5               	movwf	strlen@s
  4276  06EF  0875               	movf	strlen@s,w
  4277  06F0  00F3               	movwf	??_strlen
  4278  06F1  0873               	movf	??_strlen,w
  4279  06F2  00F4               	movwf	strlen@a
  4280  06F3                     l2478:	
  4281  06F3  0875               	movf	strlen@s,w
  4282  06F4  0086               	movwf	6
  4283  06F5  0187               	clrf	7
  4284  06F6  0801               	movf	1,w
  4285  06F7  1903               	btfsc	3,2
  4286  06F8  2EFE               	goto	l2480
  4287  06F9  3001               	movlw	1
  4288  06FA  00F3               	movwf	??_strlen
  4289  06FB  0873               	movf	??_strlen,w
  4290  06FC  07F5               	addwf	strlen@s,f
  4291  06FD  2EF3               	goto	l2478
  4292  06FE                     l2480:	
  4293  06FE  0874               	movf	strlen@a,w
  4294  06FF  0275               	subwf	strlen@s,w
  4295  0700  00F1               	movwf	?_strlen
  4296  0701  01F2               	clrf	?_strlen+1
  4297  0702  1BF1               	btfsc	?_strlen,7
  4298  0703  03F2               	decf	?_strlen+1,f
  4299  0704  0008               	return
  4300  0705                     __end_of_strlen:	
  4301                           
  4302                           	psect	text10
  4303  05E4                     __ptext10:	
  4304 ;; *************** function _fputs *****************
  4305 ;; Defined at:
  4306 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  s               1    wreg     PTR const unsigned char 
  4309 ;;		 -> dbuf(32), 
  4310 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
  4311 ;;		 -> NULL(0), 
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;  s               1    7[BANK0 ] PTR const unsigned char 
  4314 ;;		 -> dbuf(32), 
  4315 ;;  i               2    5[BANK0 ] int 
  4316 ;;  c               1    4[BANK0 ] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[BANK0 ] int 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4326 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;Total ram usage:        8 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    7
  4333 ;; This function calls:
  4334 ;;		_fputc
  4335 ;; This function is called by:
  4336 ;;		_pad
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           
  4341                           ;psect for function _fputs
  4342  05E4                     _fputs:	
  4343                           
  4344                           ;incstack = 0
  4345                           ; Regs used in _fputs: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4346                           ;fputs@s stored from wreg
  4347  05E4  0020               	movlb	0	; select bank0
  4348  05E5  00A7               	movwf	fputs@s
  4349  05E6  01A5               	clrf	fputs@i
  4350  05E7  01A6               	clrf	fputs@i+1
  4351  05E8                     l2472:	
  4352  05E8  0825               	movf	fputs@i,w
  4353  05E9  0727               	addwf	fputs@s,w
  4354  05EA  00A1               	movwf	??_fputs
  4355  05EB  0821               	movf	??_fputs,w
  4356  05EC  0086               	movwf	6
  4357  05ED  0187               	clrf	7
  4358  05EE  0801               	movf	1,w
  4359  05EF  00A2               	movwf	??_fputs+1
  4360  05F0  0822               	movf	??_fputs+1,w
  4361  05F1  00A4               	movwf	fputs@c
  4362  05F2  0824               	movf	fputs@c,w
  4363  05F3  1903               	btfsc	3,2
  4364  05F4  0008               	return
  4365  05F5  0824               	movf	fputs@c,w
  4366  05F6  00A1               	movwf	??_fputs
  4367  05F7  01A2               	clrf	??_fputs+1
  4368  05F8  0821               	movf	??_fputs,w
  4369  05F9  00F4               	movwf	fputc@c
  4370  05FA  0822               	movf	??_fputs+1,w
  4371  05FB  00F5               	movwf	fputc@c+1
  4372  05FC  0820               	movf	fputs@fp,w
  4373  05FD  00A3               	movwf	??_fputs+2
  4374  05FE  0823               	movf	??_fputs+2,w
  4375  05FF  00F6               	movwf	fputc@fp
  4376  0600  3185  2580  3185   	fcall	_fputc
  4377  0603  3001               	movlw	1
  4378  0604  0020               	movlb	0	; select bank0
  4379  0605  07A5               	addwf	fputs@i,f
  4380  0606  3000               	movlw	0
  4381  0607  3DA6               	addwfc	fputs@i+1,f
  4382  0608  2DE8               	goto	l2472
  4383  0609                     __end_of_fputs:	
  4384                           
  4385                           	psect	text11
  4386  0580                     __ptext11:	
  4387 ;; *************** function _fputc *****************
  4388 ;; Defined at:
  4389 ;;		line 8 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  c               2    4[COMMON] int 
  4392 ;;  fp              1    6[COMMON] PTR struct _IO_FILE
  4393 ;;		 -> NULL(0), 
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;		None
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  2    4[COMMON] int 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4405 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;Total ram usage:        8 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    6
  4412 ;; This function calls:
  4413 ;;		_putch
  4414 ;; This function is called by:
  4415 ;;		_pad
  4416 ;;		_vfpfcnvrt
  4417 ;;		_fputs
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           
  4422                           ;psect for function _fputc
  4423  0580                     _fputc:	
  4424                           
  4425                           ;incstack = 0
  4426                           ; Regs used in _fputc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4427  0580  0876               	movf	fputc@fp,w
  4428  0581  1D03               	btfss	3,2
  4429  0582  0876               	movf	fputc@fp,w
  4430  0583  1D03               	btfss	3,2
  4431  0584  2D89               	goto	l2458
  4432  0585  0874               	movf	fputc@c,w
  4433  0586  3187  27C9         	fcall	_putch
  4434  0588  0008               	return
  4435  0589                     l2458:	
  4436  0589  0876               	movf	fputc@fp,w
  4437  058A  3E03               	addlw	3
  4438  058B  0086               	movwf	6
  4439  058C  0187               	clrf	7
  4440  058D  0016               	moviw fsr1++
  4441  058E  0401               	iorwf	1,w
  4442  058F  1903               	btfsc	3,2
  4443  0590  2DAC               	goto	l2462
  4444  0591  0876               	movf	fputc@fp,w
  4445  0592  3E03               	addlw	3
  4446  0593  0086               	movwf	6
  4447  0594  0187               	clrf	7
  4448  0595  3F40               	moviw [0]fsr1
  4449  0596  00F7               	movwf	??_fputc
  4450  0597  3F41               	moviw [1]fsr1
  4451  0598  00F8               	movwf	??_fputc+1
  4452  0599  0A76               	incf	fputc@fp,w
  4453  059A  0086               	movwf	6
  4454  059B  0187               	clrf	7
  4455  059C  3F40               	moviw [0]fsr1
  4456  059D  00F9               	movwf	??_fputc+2
  4457  059E  3F41               	moviw [1]fsr1
  4458  059F  00FA               	movwf	??_fputc+3
  4459  05A0  087A               	movf	??_fputc+3,w
  4460  05A1  3A80               	xorlw	128
  4461  05A2  00FB               	movwf	??_fputc+4
  4462  05A3  0878               	movf	??_fputc+1,w
  4463  05A4  3A80               	xorlw	128
  4464  05A5  027B               	subwf	??_fputc+4,w
  4465  05A6  1D03               	skipz
  4466  05A7  2DAA               	goto	u1615
  4467  05A8  0877               	movf	??_fputc,w
  4468  05A9  0279               	subwf	??_fputc+2,w
  4469  05AA                     u1615:	
  4470  05AA  1803               	skipnc
  4471  05AB  0008               	return
  4472  05AC                     l2462:	
  4473  05AC  0A76               	incf	fputc@fp,w
  4474  05AD  0086               	movwf	6
  4475  05AE  0187               	clrf	7
  4476  05AF  3001               	movlw	1
  4477  05B0  0781               	addwf	1,f
  4478  05B1  3141               	addfsr 1,1
  4479  05B2  1803               	skipnc
  4480  05B3  0A81               	incf	1,f
  4481  05B4  0008               	return
  4482  05B5                     __end_of_fputc:	
  4483                           
  4484                           	psect	text12
  4485  07C9                     __ptext12:	
  4486 ;; *************** function _putch *****************
  4487 ;; Defined at:
  4488 ;;		line 198 in file "mcc_generated_files/eusart.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  txData          1    wreg     unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  txData          1    3[COMMON] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;                  1    wreg      void 
  4495 ;; Registers used:
  4496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4503 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;Total ram usage:        1 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    5
  4509 ;; This function calls:
  4510 ;;		_EUSART_Write
  4511 ;; This function is called by:
  4512 ;;		_fputc
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _putch
  4518  07C9                     _putch:	
  4519                           
  4520                           ;incstack = 0
  4521                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4522                           ;putch@txData stored from wreg
  4523  07C9  00F3               	movwf	putch@txData
  4524                           
  4525                           ;mcc_generated_files/eusart.c: 198: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 199: {;mcc_generated_files/eusart.c: 200:     EUSART_Write(txData);
  4526  07CA  0873               	movf	putch@txData,w
  4527  07CB  3186  262B         	fcall	_EUSART_Write
  4528  07CD  0008               	return
  4529  07CE                     __end_of_putch:	
  4530                           
  4531                           	psect	text13
  4532  062B                     __ptext13:	
  4533 ;; *************** function _EUSART_Write *****************
  4534 ;; Defined at:
  4535 ;;		line 170 in file "mcc_generated_files/eusart.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  txData          1    wreg     unsigned char 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  txData          1    2[COMMON] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;                  1    wreg      void 
  4542 ;; Registers used:
  4543 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;Total ram usage:        2 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    4
  4556 ;; This function calls:
  4557 ;;		Nothing
  4558 ;; This function is called by:
  4559 ;;		_putch
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _EUSART_Write
  4565  062B                     _EUSART_Write:	
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4569                           ;EUSART_Write@txData stored from wreg
  4570  062B  00F2               	movwf	EUSART_Write@txData
  4571  062C                     l2434:	
  4572                           ;mcc_generated_files/eusart.c: 170: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 171: {;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemai
      +                          ning)
  4573                           
  4574                           
  4575                           ;mcc_generated_files/eusart.c: 172:     while(0 == eusartTxBufferRemaining)
  4576  062C  0021               	movlb	1	; select bank1
  4577  062D  0859               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
  4578  062E  1903               	btfsc	3,2
  4579  062F  2E2C               	goto	l2434
  4580                           
  4581                           ;mcc_generated_files/eusart.c: 176:     if(0 == PIE1bits.TXIE)
  4582  0630  1A11               	btfsc	17,4	;volatile
  4583  0631  2E36               	goto	l412
  4584                           
  4585                           ;mcc_generated_files/eusart.c: 177:     {;mcc_generated_files/eusart.c: 178:         TXR
      +                          EG = txData;
  4586  0632  0872               	movf	EUSART_Write@txData,w
  4587  0633  0023               	movlb	3	; select bank3
  4588  0634  009A               	movwf	26	;volatile
  4589                           
  4590                           ;mcc_generated_files/eusart.c: 179:     }
  4591  0635  2E4A               	goto	l2448
  4592  0636                     l412:	
  4593                           ;mcc_generated_files/eusart.c: 180:     else
  4594                           
  4595                           
  4596                           ;mcc_generated_files/eusart.c: 181:     {;mcc_generated_files/eusart.c: 182:         PIE
      +                          1bits.TXIE = 0;
  4597  0636  1211               	bcf	17,4	;volatile
  4598                           
  4599                           ;mcc_generated_files/eusart.c: 183:         eusartTxBuffer[eusartTxHead++] = txData;
  4600  0637  0872               	movf	EUSART_Write@txData,w
  4601  0638  00F1               	movwf	??_EUSART_Write
  4602  0639  082C               	movf	_eusartTxHead^(0+128),w
  4603  063A  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  4604  063B  0086               	movwf	6
  4605  063C  3001               	movlw	1	; select bank3/4
  4606  063D  0087               	movwf	7
  4607  063E  0871               	movf	??_EUSART_Write,w
  4608  063F  0081               	movwf	1
  4609  0640  3001               	movlw	1
  4610  0641  00F1               	movwf	??_EUSART_Write
  4611  0642  0871               	movf	??_EUSART_Write,w
  4612  0643  07AC               	addwf	_eusartTxHead^(0+128),f	;volatile
  4613                           
  4614                           ;mcc_generated_files/eusart.c: 184:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4615  0644  3040               	movlw	64
  4616  0645  022C               	subwf	_eusartTxHead^(0+128),w	;volatile
  4617  0646  1803               	btfsc	3,0
  4618                           
  4619                           ;mcc_generated_files/eusart.c: 185:         {;mcc_generated_files/eusart.c: 186:        
      +                               eusartTxHead = 0;
  4620  0647  01AC               	clrf	_eusartTxHead^(0+128)	;volatile
  4621                           
  4622                           ;mcc_generated_files/eusart.c: 188:         eusartTxBufferRemaining--;
  4623  0648  3001               	movlw	1
  4624  0649  02D9               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  4625  064A                     l2448:	
  4626                           
  4627                           ;mcc_generated_files/eusart.c: 190:     PIE1bits.TXIE = 1;
  4628  064A  0021               	movlb	1	; select bank1
  4629  064B  1611               	bsf	17,4	;volatile
  4630  064C  0008               	return
  4631  064D                     __end_of_EUSART_Write:	
  4632                           
  4633                           	psect	text14
  4634  0705                     __ptext14:	
  4635 ;; *************** function _abs *****************
  4636 ;; Defined at:
  4637 ;;		line 1 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;  a               2    4[COMMON] int 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;                  2    4[COMMON] int 
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, status,0
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4653 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4654 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4655 ;;Total ram usage:        4 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    4
  4658 ;; This function calls:
  4659 ;;		Nothing
  4660 ;; This function is called by:
  4661 ;;		_dtoa
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           
  4666                           ;psect for function _abs
  4667  0705                     _abs:	
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _abs: [wreg+status,2+status,0]
  4671  0705  0875               	movf	abs@a+1,w
  4672  0706  3A80               	xorlw	128
  4673  0707  00F6               	movwf	??_abs
  4674  0708  3080               	movlw	128
  4675  0709  0276               	subwf	??_abs,w
  4676  070A  1D03               	skipz
  4677  070B  2F0E               	goto	u1685
  4678  070C  3001               	movlw	1
  4679  070D  0274               	subwf	abs@a,w
  4680  070E                     u1685:	
  4681  070E  1803               	skipnc
  4682  070F  0008               	return
  4683  0710  0974               	comf	abs@a,w
  4684  0711  00F6               	movwf	??_abs
  4685  0712  0975               	comf	abs@a+1,w
  4686  0713  00F7               	movwf	??_abs+1
  4687  0714  0AF6               	incf	??_abs,f
  4688  0715  1903               	skipnz
  4689  0716  0AF7               	incf	??_abs+1,f
  4690  0717  0876               	movf	??_abs,w
  4691  0718  00F4               	movwf	?_abs
  4692  0719  0877               	movf	??_abs+1,w
  4693  071A  00F5               	movwf	?_abs+1
  4694  071B  0008               	return
  4695  071C                     __end_of_abs:	
  4696                           
  4697                           	psect	text15
  4698  029E                     __ptext15:	
  4699 ;; *************** function ___aomod *****************
  4700 ;; Defined at:
  4701 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;  divisor         8    0[BANK0 ] long long 
  4704 ;;  dividend        8    8[BANK0 ] long long 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;  sign            1    3[COMMON] unsigned char 
  4707 ;;  counter         1    2[COMMON] unsigned char 
  4708 ;; Return value:  Size  Location     Type
  4709 ;;                  8    0[BANK0 ] long long 
  4710 ;; Registers used:
  4711 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4712 ;; Tracked objects:
  4713 ;;		On entry : 0/0
  4714 ;;		On exit  : 0/0
  4715 ;;		Unchanged: 0/0
  4716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4717 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4718 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;Total ram usage:       19 bytes
  4722 ;; Hardware stack levels used:    1
  4723 ;; Hardware stack levels required when called:    4
  4724 ;; This function calls:
  4725 ;;		Nothing
  4726 ;; This function is called by:
  4727 ;;		_dtoa
  4728 ;; This function uses a non-reentrant model
  4729 ;;
  4730                           
  4731                           
  4732                           ;psect for function ___aomod
  4733  029E                     ___aomod:	
  4734                           
  4735                           ;incstack = 0
  4736                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
  4737  029E  01F3               	clrf	___aomod@sign
  4738  029F  3028               	movlw	low ___aomod@dividend
  4739  02A0  0086               	movwf	6
  4740  02A1  3000               	movlw	high ___aomod@dividend
  4741  02A2  0087               	movwf	7
  4742  02A3  3F47               	moviw [7]fsr1
  4743  02A4  00F1               	movwf	??___aomod
  4744  02A5  1FF1               	btfss	??___aomod,7
  4745  02A6  2AC8               	goto	l2552
  4746  02A7  0020               	movlb	0	; select bank0
  4747  02A8  09A8               	comf	___aomod@dividend,f
  4748  02A9  09A9               	comf	___aomod@dividend+1,f
  4749  02AA  09AA               	comf	___aomod@dividend+2,f
  4750  02AB  09AB               	comf	___aomod@dividend+3,f
  4751  02AC  09AC               	comf	___aomod@dividend+4,f
  4752  02AD  09AD               	comf	___aomod@dividend+5,f
  4753  02AE  09AE               	comf	___aomod@dividend+6,f
  4754  02AF  09AF               	comf	___aomod@dividend+7,f
  4755  02B0  0AA8               	incf	___aomod@dividend,f
  4756  02B1  1D03               	skipz
  4757  02B2  2AC6               	goto	u181lld
  4758  02B3  0AA9               	incf	___aomod@dividend+1,f
  4759  02B4  1D03               	skipz
  4760  02B5  2AC6               	goto	u181lld
  4761  02B6  0AAA               	incf	___aomod@dividend+2,f
  4762  02B7  1D03               	skipz
  4763  02B8  2AC6               	goto	u181lld
  4764  02B9  0AAB               	incf	___aomod@dividend+3,f
  4765  02BA  1D03               	skipz
  4766  02BB  2AC6               	goto	u181lld
  4767  02BC  0AAC               	incf	___aomod@dividend+4,f
  4768  02BD  1D03               	skipz
  4769  02BE  2AC6               	goto	u181lld
  4770  02BF  0AAD               	incf	___aomod@dividend+5,f
  4771  02C0  1D03               	skipz
  4772  02C1  2AC6               	goto	u181lld
  4773  02C2  0AAE               	incf	___aomod@dividend+6,f
  4774  02C3  1D03               	skipz
  4775  02C4  2AC6               	goto	u181lld
  4776  02C5  0AAF               	incf	___aomod@dividend+7,f
  4777  02C6                     u181lld:	
  4778  02C6  01F3               	clrf	___aomod@sign
  4779  02C7  0AF3               	incf	___aomod@sign,f
  4780  02C8                     l2552:	
  4781  02C8  3020               	movlw	low ___aomod@divisor
  4782  02C9  0086               	movwf	6
  4783  02CA  3000               	movlw	high ___aomod@divisor
  4784  02CB  0087               	movwf	7
  4785  02CC  3F47               	moviw [7]fsr1
  4786  02CD  00F1               	movwf	??___aomod
  4787  02CE  1FF1               	btfss	??___aomod,7
  4788  02CF  2AEF               	goto	l2556
  4789  02D0  0020               	movlb	0	; select bank0
  4790  02D1  09A0               	comf	___aomod@divisor,f
  4791  02D2  09A1               	comf	___aomod@divisor+1,f
  4792  02D3  09A2               	comf	___aomod@divisor+2,f
  4793  02D4  09A3               	comf	___aomod@divisor+3,f
  4794  02D5  09A4               	comf	___aomod@divisor+4,f
  4795  02D6  09A5               	comf	___aomod@divisor+5,f
  4796  02D7  09A6               	comf	___aomod@divisor+6,f
  4797  02D8  09A7               	comf	___aomod@divisor+7,f
  4798  02D9  0AA0               	incf	___aomod@divisor,f
  4799  02DA  1D03               	skipz
  4800  02DB  2AEF               	goto	l2556
  4801  02DC  0AA1               	incf	___aomod@divisor+1,f
  4802  02DD  1D03               	skipz
  4803  02DE  2AEF               	goto	l2556
  4804  02DF  0AA2               	incf	___aomod@divisor+2,f
  4805  02E0  1D03               	skipz
  4806  02E1  2AEF               	goto	l2556
  4807  02E2  0AA3               	incf	___aomod@divisor+3,f
  4808  02E3  1D03               	skipz
  4809  02E4  2AEF               	goto	l2556
  4810  02E5  0AA4               	incf	___aomod@divisor+4,f
  4811  02E6  1D03               	skipz
  4812  02E7  2AEF               	goto	l2556
  4813  02E8  0AA5               	incf	___aomod@divisor+5,f
  4814  02E9  1D03               	skipz
  4815  02EA  2AEF               	goto	l2556
  4816  02EB  0AA6               	incf	___aomod@divisor+6,f
  4817  02EC  1D03               	skipz
  4818  02ED  2AEF               	goto	l2556
  4819  02EE  0AA7               	incf	___aomod@divisor+7,f
  4820  02EF                     l2556:	
  4821  02EF  0020               	movlb	0	; select bank0
  4822  02F0  0820               	movf	___aomod@divisor,w
  4823  02F1  0421               	iorwf	___aomod@divisor+1,w
  4824  02F2  0422               	iorwf	___aomod@divisor+2,w
  4825  02F3  0423               	iorwf	___aomod@divisor+3,w
  4826  02F4  0424               	iorwf	___aomod@divisor+4,w
  4827  02F5  0425               	iorwf	___aomod@divisor+5,w
  4828  02F6  0426               	iorwf	___aomod@divisor+6,w
  4829  02F7  0427               	iorwf	___aomod@divisor+7,w
  4830  02F8  1903               	skipnz
  4831  02F9  2B47               	goto	l2572
  4832  02FA  01F2               	clrf	___aomod@counter
  4833  02FB  0AF2               	incf	___aomod@counter,f
  4834  02FC                     l2564:	
  4835  02FC  1BA7               	btfsc	___aomod@divisor+7,7
  4836  02FD  2B0B               	goto	l2566
  4837  02FE  35A0               	lslf	___aomod@divisor,f
  4838  02FF  0DA1               	rlf	___aomod@divisor+1,f
  4839  0300  0DA2               	rlf	___aomod@divisor+2,f
  4840  0301  0DA3               	rlf	___aomod@divisor+3,f
  4841  0302  0DA4               	rlf	___aomod@divisor+4,f
  4842  0303  0DA5               	rlf	___aomod@divisor+5,f
  4843  0304  0DA6               	rlf	___aomod@divisor+6,f
  4844  0305  0DA7               	rlf	___aomod@divisor+7,f
  4845  0306  3001               	movlw	1
  4846  0307  00F1               	movwf	??___aomod
  4847  0308  0871               	movf	??___aomod,w
  4848  0309  07F2               	addwf	___aomod@counter,f
  4849  030A  2AFC               	goto	l2564
  4850  030B                     l2566:	
  4851  030B  0827               	movf	___aomod@divisor+7,w
  4852  030C  022F               	subwf	___aomod@dividend+7,w
  4853  030D  1D03               	skipz
  4854  030E  2B29               	goto	u1865
  4855  030F  0826               	movf	___aomod@divisor+6,w
  4856  0310  022E               	subwf	___aomod@dividend+6,w
  4857  0311  1D03               	skipz
  4858  0312  2B29               	goto	u1865
  4859  0313  0825               	movf	___aomod@divisor+5,w
  4860  0314  022D               	subwf	___aomod@dividend+5,w
  4861  0315  1D03               	skipz
  4862  0316  2B29               	goto	u1865
  4863  0317  0824               	movf	___aomod@divisor+4,w
  4864  0318  022C               	subwf	___aomod@dividend+4,w
  4865  0319  1D03               	skipz
  4866  031A  2B29               	goto	u1865
  4867  031B  0823               	movf	___aomod@divisor+3,w
  4868  031C  022B               	subwf	___aomod@dividend+3,w
  4869  031D  1D03               	skipz
  4870  031E  2B29               	goto	u1865
  4871  031F  0822               	movf	___aomod@divisor+2,w
  4872  0320  022A               	subwf	___aomod@dividend+2,w
  4873  0321  1D03               	skipz
  4874  0322  2B29               	goto	u1865
  4875  0323  0821               	movf	___aomod@divisor+1,w
  4876  0324  0229               	subwf	___aomod@dividend+1,w
  4877  0325  1D03               	skipz
  4878  0326  2B29               	goto	u1865
  4879  0327  0820               	movf	___aomod@divisor,w
  4880  0328  0228               	subwf	___aomod@dividend,w
  4881  0329                     u1865:	
  4882  0329  1C03               	skipc
  4883  032A  2B3B               	goto	l2570
  4884  032B  0820               	movf	___aomod@divisor,w
  4885  032C  02A8               	subwf	___aomod@dividend,f
  4886  032D  0821               	movf	___aomod@divisor+1,w
  4887  032E  3BA9               	subwfb	___aomod@dividend+1,f
  4888  032F  0822               	movf	___aomod@divisor+2,w
  4889  0330  3BAA               	subwfb	___aomod@dividend+2,f
  4890  0331  0823               	movf	___aomod@divisor+3,w
  4891  0332  3BAB               	subwfb	___aomod@dividend+3,f
  4892  0333  0824               	movf	___aomod@divisor+4,w
  4893  0334  3BAC               	subwfb	___aomod@dividend+4,f
  4894  0335  0825               	movf	___aomod@divisor+5,w
  4895  0336  3BAD               	subwfb	___aomod@dividend+5,f
  4896  0337  0826               	movf	___aomod@divisor+6,w
  4897  0338  3BAE               	subwfb	___aomod@dividend+6,f
  4898  0339  0827               	movf	___aomod@divisor+7,w
  4899  033A  3BAF               	subwfb	___aomod@dividend+7,f
  4900  033B                     l2570:	
  4901  033B  36A7               	lsrf	___aomod@divisor+7,f
  4902  033C  0CA6               	rrf	___aomod@divisor+6,f
  4903  033D  0CA5               	rrf	___aomod@divisor+5,f
  4904  033E  0CA4               	rrf	___aomod@divisor+4,f
  4905  033F  0CA3               	rrf	___aomod@divisor+3,f
  4906  0340  0CA2               	rrf	___aomod@divisor+2,f
  4907  0341  0CA1               	rrf	___aomod@divisor+1,f
  4908  0342  0CA0               	rrf	___aomod@divisor,f
  4909  0343  3001               	movlw	1
  4910  0344  02F2               	subwf	___aomod@counter,f
  4911  0345  1D03               	btfss	3,2
  4912  0346  2B0B               	goto	l2566
  4913  0347                     l2572:	
  4914  0347  0873               	movf	___aomod@sign,w
  4915  0348  1903               	btfsc	3,2
  4916  0349  2B68               	goto	l819
  4917  034A  09A8               	comf	___aomod@dividend,f
  4918  034B  09A9               	comf	___aomod@dividend+1,f
  4919  034C  09AA               	comf	___aomod@dividend+2,f
  4920  034D  09AB               	comf	___aomod@dividend+3,f
  4921  034E  09AC               	comf	___aomod@dividend+4,f
  4922  034F  09AD               	comf	___aomod@dividend+5,f
  4923  0350  09AE               	comf	___aomod@dividend+6,f
  4924  0351  09AF               	comf	___aomod@dividend+7,f
  4925  0352  0AA8               	incf	___aomod@dividend,f
  4926  0353  1D03               	skipz
  4927  0354  2B68               	goto	l819
  4928  0355  0AA9               	incf	___aomod@dividend+1,f
  4929  0356  1D03               	skipz
  4930  0357  2B68               	goto	l819
  4931  0358  0AAA               	incf	___aomod@dividend+2,f
  4932  0359  1D03               	skipz
  4933  035A  2B68               	goto	l819
  4934  035B  0AAB               	incf	___aomod@dividend+3,f
  4935  035C  1D03               	skipz
  4936  035D  2B68               	goto	l819
  4937  035E  0AAC               	incf	___aomod@dividend+4,f
  4938  035F  1D03               	skipz
  4939  0360  2B68               	goto	l819
  4940  0361  0AAD               	incf	___aomod@dividend+5,f
  4941  0362  1D03               	skipz
  4942  0363  2B68               	goto	l819
  4943  0364  0AAE               	incf	___aomod@dividend+6,f
  4944  0365  1D03               	skipz
  4945  0366  2B68               	goto	l819
  4946  0367  0AAF               	incf	___aomod@dividend+7,f
  4947  0368                     l819:	
  4948  0368  0020               	movlb	0	; select bank0
  4949  0369  0828               	movf	___aomod@dividend,w
  4950  036A  00A0               	movwf	?___aomod
  4951  036B  0829               	movf	___aomod@dividend+1,w
  4952  036C  00A1               	movwf	?___aomod+1
  4953  036D  082A               	movf	___aomod@dividend+2,w
  4954  036E  00A2               	movwf	?___aomod+2
  4955  036F  082B               	movf	___aomod@dividend+3,w
  4956  0370  00A3               	movwf	?___aomod+3
  4957  0371  082C               	movf	___aomod@dividend+4,w
  4958  0372  00A4               	movwf	?___aomod+4
  4959  0373  082D               	movf	___aomod@dividend+5,w
  4960  0374  00A5               	movwf	?___aomod+5
  4961  0375  082E               	movf	___aomod@dividend+6,w
  4962  0376  00A6               	movwf	?___aomod+6
  4963  0377  082F               	movf	___aomod@dividend+7,w
  4964  0378  00A7               	movwf	?___aomod+7
  4965  0379  0008               	return
  4966  037A                     __end_of___aomod:	
  4967                           
  4968                           	psect	text16
  4969  01AB                     __ptext16:	
  4970 ;; *************** function ___aodiv *****************
  4971 ;; Defined at:
  4972 ;;		line 7 in file "/opt/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;  divisor         8    0[BANK0 ] long long 
  4975 ;;  dividend        8    8[BANK0 ] long long 
  4976 ;; Auto vars:     Size  Location     Type
  4977 ;;  quotient        8    4[COMMON] long long 
  4978 ;;  sign            1    3[COMMON] unsigned char 
  4979 ;;  counter         1    2[COMMON] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  8    0[BANK0 ] long long 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4989 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Totals:        11      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;Total ram usage:       27 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    4
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_dtoa
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function ___aodiv
  5005  01AB                     ___aodiv:	
  5006                           
  5007                           ;incstack = 0
  5008                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
  5009  01AB  01F3               	clrf	___aodiv@sign
  5010  01AC  3020               	movlw	low ___aodiv@divisor
  5011  01AD  0086               	movwf	6
  5012  01AE  3000               	movlw	high ___aodiv@divisor
  5013  01AF  0087               	movwf	7
  5014  01B0  3F47               	moviw [7]fsr1
  5015  01B1  00F1               	movwf	??___aodiv
  5016  01B2  1FF1               	btfss	??___aodiv,7
  5017  01B3  29D5               	goto	l2514
  5018  01B4  0020               	movlb	0	; select bank0
  5019  01B5  09A0               	comf	___aodiv@divisor,f
  5020  01B6  09A1               	comf	___aodiv@divisor+1,f
  5021  01B7  09A2               	comf	___aodiv@divisor+2,f
  5022  01B8  09A3               	comf	___aodiv@divisor+3,f
  5023  01B9  09A4               	comf	___aodiv@divisor+4,f
  5024  01BA  09A5               	comf	___aodiv@divisor+5,f
  5025  01BB  09A6               	comf	___aodiv@divisor+6,f
  5026  01BC  09A7               	comf	___aodiv@divisor+7,f
  5027  01BD  0AA0               	incf	___aodiv@divisor,f
  5028  01BE  1D03               	skipz
  5029  01BF  29D3               	goto	u170lld
  5030  01C0  0AA1               	incf	___aodiv@divisor+1,f
  5031  01C1  1D03               	skipz
  5032  01C2  29D3               	goto	u170lld
  5033  01C3  0AA2               	incf	___aodiv@divisor+2,f
  5034  01C4  1D03               	skipz
  5035  01C5  29D3               	goto	u170lld
  5036  01C6  0AA3               	incf	___aodiv@divisor+3,f
  5037  01C7  1D03               	skipz
  5038  01C8  29D3               	goto	u170lld
  5039  01C9  0AA4               	incf	___aodiv@divisor+4,f
  5040  01CA  1D03               	skipz
  5041  01CB  29D3               	goto	u170lld
  5042  01CC  0AA5               	incf	___aodiv@divisor+5,f
  5043  01CD  1D03               	skipz
  5044  01CE  29D3               	goto	u170lld
  5045  01CF  0AA6               	incf	___aodiv@divisor+6,f
  5046  01D0  1D03               	skipz
  5047  01D1  29D3               	goto	u170lld
  5048  01D2  0AA7               	incf	___aodiv@divisor+7,f
  5049  01D3                     u170lld:	
  5050  01D3  01F3               	clrf	___aodiv@sign
  5051  01D4  0AF3               	incf	___aodiv@sign,f
  5052  01D5                     l2514:	
  5053  01D5  3028               	movlw	low ___aodiv@dividend
  5054  01D6  0086               	movwf	6
  5055  01D7  3000               	movlw	high ___aodiv@dividend
  5056  01D8  0087               	movwf	7
  5057  01D9  3F47               	moviw [7]fsr1
  5058  01DA  00F1               	movwf	??___aodiv
  5059  01DB  1FF1               	btfss	??___aodiv,7
  5060  01DC  2A00               	goto	l2520
  5061  01DD  0020               	movlb	0	; select bank0
  5062  01DE  09A8               	comf	___aodiv@dividend,f
  5063  01DF  09A9               	comf	___aodiv@dividend+1,f
  5064  01E0  09AA               	comf	___aodiv@dividend+2,f
  5065  01E1  09AB               	comf	___aodiv@dividend+3,f
  5066  01E2  09AC               	comf	___aodiv@dividend+4,f
  5067  01E3  09AD               	comf	___aodiv@dividend+5,f
  5068  01E4  09AE               	comf	___aodiv@dividend+6,f
  5069  01E5  09AF               	comf	___aodiv@dividend+7,f
  5070  01E6  0AA8               	incf	___aodiv@dividend,f
  5071  01E7  1D03               	skipz
  5072  01E8  29FC               	goto	l2518
  5073  01E9  0AA9               	incf	___aodiv@dividend+1,f
  5074  01EA  1D03               	skipz
  5075  01EB  29FC               	goto	l2518
  5076  01EC  0AAA               	incf	___aodiv@dividend+2,f
  5077  01ED  1D03               	skipz
  5078  01EE  29FC               	goto	l2518
  5079  01EF  0AAB               	incf	___aodiv@dividend+3,f
  5080  01F0  1D03               	skipz
  5081  01F1  29FC               	goto	l2518
  5082  01F2  0AAC               	incf	___aodiv@dividend+4,f
  5083  01F3  1D03               	skipz
  5084  01F4  29FC               	goto	l2518
  5085  01F5  0AAD               	incf	___aodiv@dividend+5,f
  5086  01F6  1D03               	skipz
  5087  01F7  29FC               	goto	l2518
  5088  01F8  0AAE               	incf	___aodiv@dividend+6,f
  5089  01F9  1D03               	skipz
  5090  01FA  29FC               	goto	l2518
  5091  01FB  0AAF               	incf	___aodiv@dividend+7,f
  5092  01FC                     l2518:	
  5093  01FC  3001               	movlw	1
  5094  01FD  00F1               	movwf	??___aodiv
  5095  01FE  0871               	movf	??___aodiv,w
  5096  01FF  06F3               	xorwf	___aodiv@sign,f
  5097  0200                     l2520:	
  5098  0200  3074               	movlw	low ___aodiv@quotient
  5099  0201  0086               	movwf	6
  5100  0202  3000               	movlw	high ___aodiv@quotient
  5101  0203  0087               	movwf	7
  5102  0204  3008               	movlw	8
  5103  0205  00F1               	movwf	??___aodiv
  5104  0206  3000               	movlw	0
  5105  0207                     u1730:	
  5106  0207  001E               	movwi fsr1++
  5107  0208  0BF1               	decfsz	??___aodiv,f
  5108  0209  2A07               	goto	u1730
  5109  020A  0020               	movlb	0	; select bank0
  5110  020B  0820               	movf	___aodiv@divisor,w
  5111  020C  0421               	iorwf	___aodiv@divisor+1,w
  5112  020D  0422               	iorwf	___aodiv@divisor+2,w
  5113  020E  0423               	iorwf	___aodiv@divisor+3,w
  5114  020F  0424               	iorwf	___aodiv@divisor+4,w
  5115  0210  0425               	iorwf	___aodiv@divisor+5,w
  5116  0211  0426               	iorwf	___aodiv@divisor+6,w
  5117  0212  0427               	iorwf	___aodiv@divisor+7,w
  5118  0213  1903               	skipnz
  5119  0214  2A6B               	goto	l2542
  5120  0215  01F2               	clrf	___aodiv@counter
  5121  0216  0AF2               	incf	___aodiv@counter,f
  5122  0217                     l2530:	
  5123  0217  1BA7               	btfsc	___aodiv@divisor+7,7
  5124  0218  2A26               	goto	l2532
  5125  0219  35A0               	lslf	___aodiv@divisor,f
  5126  021A  0DA1               	rlf	___aodiv@divisor+1,f
  5127  021B  0DA2               	rlf	___aodiv@divisor+2,f
  5128  021C  0DA3               	rlf	___aodiv@divisor+3,f
  5129  021D  0DA4               	rlf	___aodiv@divisor+4,f
  5130  021E  0DA5               	rlf	___aodiv@divisor+5,f
  5131  021F  0DA6               	rlf	___aodiv@divisor+6,f
  5132  0220  0DA7               	rlf	___aodiv@divisor+7,f
  5133  0221  3001               	movlw	1
  5134  0222  00F1               	movwf	??___aodiv
  5135  0223  0871               	movf	??___aodiv,w
  5136  0224  07F2               	addwf	___aodiv@counter,f
  5137  0225  2A17               	goto	l2530
  5138  0226                     l2532:	
  5139  0226  35F4               	lslf	___aodiv@quotient,f
  5140  0227  0DF5               	rlf	___aodiv@quotient+1,f
  5141  0228  0DF6               	rlf	___aodiv@quotient+2,f
  5142  0229  0DF7               	rlf	___aodiv@quotient+3,f
  5143  022A  0DF8               	rlf	___aodiv@quotient+4,f
  5144  022B  0DF9               	rlf	___aodiv@quotient+5,f
  5145  022C  0DFA               	rlf	___aodiv@quotient+6,f
  5146  022D  0DFB               	rlf	___aodiv@quotient+7,f
  5147  022E  0827               	movf	___aodiv@divisor+7,w
  5148  022F  022F               	subwf	___aodiv@dividend+7,w
  5149  0230  1D03               	skipz
  5150  0231  2A4C               	goto	u1765
  5151  0232  0826               	movf	___aodiv@divisor+6,w
  5152  0233  022E               	subwf	___aodiv@dividend+6,w
  5153  0234  1D03               	skipz
  5154  0235  2A4C               	goto	u1765
  5155  0236  0825               	movf	___aodiv@divisor+5,w
  5156  0237  022D               	subwf	___aodiv@dividend+5,w
  5157  0238  1D03               	skipz
  5158  0239  2A4C               	goto	u1765
  5159  023A  0824               	movf	___aodiv@divisor+4,w
  5160  023B  022C               	subwf	___aodiv@dividend+4,w
  5161  023C  1D03               	skipz
  5162  023D  2A4C               	goto	u1765
  5163  023E  0823               	movf	___aodiv@divisor+3,w
  5164  023F  022B               	subwf	___aodiv@dividend+3,w
  5165  0240  1D03               	skipz
  5166  0241  2A4C               	goto	u1765
  5167  0242  0822               	movf	___aodiv@divisor+2,w
  5168  0243  022A               	subwf	___aodiv@dividend+2,w
  5169  0244  1D03               	skipz
  5170  0245  2A4C               	goto	u1765
  5171  0246  0821               	movf	___aodiv@divisor+1,w
  5172  0247  0229               	subwf	___aodiv@dividend+1,w
  5173  0248  1D03               	skipz
  5174  0249  2A4C               	goto	u1765
  5175  024A  0820               	movf	___aodiv@divisor,w
  5176  024B  0228               	subwf	___aodiv@dividend,w
  5177  024C                     u1765:	
  5178  024C  1C03               	skipc
  5179  024D  2A5F               	goto	l2540
  5180  024E  0820               	movf	___aodiv@divisor,w
  5181  024F  02A8               	subwf	___aodiv@dividend,f
  5182  0250  0821               	movf	___aodiv@divisor+1,w
  5183  0251  3BA9               	subwfb	___aodiv@dividend+1,f
  5184  0252  0822               	movf	___aodiv@divisor+2,w
  5185  0253  3BAA               	subwfb	___aodiv@dividend+2,f
  5186  0254  0823               	movf	___aodiv@divisor+3,w
  5187  0255  3BAB               	subwfb	___aodiv@dividend+3,f
  5188  0256  0824               	movf	___aodiv@divisor+4,w
  5189  0257  3BAC               	subwfb	___aodiv@dividend+4,f
  5190  0258  0825               	movf	___aodiv@divisor+5,w
  5191  0259  3BAD               	subwfb	___aodiv@dividend+5,f
  5192  025A  0826               	movf	___aodiv@divisor+6,w
  5193  025B  3BAE               	subwfb	___aodiv@dividend+6,f
  5194  025C  0827               	movf	___aodiv@divisor+7,w
  5195  025D  3BAF               	subwfb	___aodiv@dividend+7,f
  5196  025E  1474               	bsf	___aodiv@quotient,0
  5197  025F                     l2540:	
  5198  025F  36A7               	lsrf	___aodiv@divisor+7,f
  5199  0260  0CA6               	rrf	___aodiv@divisor+6,f
  5200  0261  0CA5               	rrf	___aodiv@divisor+5,f
  5201  0262  0CA4               	rrf	___aodiv@divisor+4,f
  5202  0263  0CA3               	rrf	___aodiv@divisor+3,f
  5203  0264  0CA2               	rrf	___aodiv@divisor+2,f
  5204  0265  0CA1               	rrf	___aodiv@divisor+1,f
  5205  0266  0CA0               	rrf	___aodiv@divisor,f
  5206  0267  3001               	movlw	1
  5207  0268  02F2               	subwf	___aodiv@counter,f
  5208  0269  1D03               	btfss	3,2
  5209  026A  2A26               	goto	l2532
  5210  026B                     l2542:	
  5211  026B  0873               	movf	___aodiv@sign,w
  5212  026C  1903               	btfsc	3,2
  5213  026D  2A8C               	goto	l806
  5214  026E  09F4               	comf	___aodiv@quotient,f
  5215  026F  09F5               	comf	___aodiv@quotient+1,f
  5216  0270  09F6               	comf	___aodiv@quotient+2,f
  5217  0271  09F7               	comf	___aodiv@quotient+3,f
  5218  0272  09F8               	comf	___aodiv@quotient+4,f
  5219  0273  09F9               	comf	___aodiv@quotient+5,f
  5220  0274  09FA               	comf	___aodiv@quotient+6,f
  5221  0275  09FB               	comf	___aodiv@quotient+7,f
  5222  0276  0AF4               	incf	___aodiv@quotient,f
  5223  0277  1D03               	skipz
  5224  0278  2A8C               	goto	l806
  5225  0279  0AF5               	incf	___aodiv@quotient+1,f
  5226  027A  1D03               	skipz
  5227  027B  2A8C               	goto	l806
  5228  027C  0AF6               	incf	___aodiv@quotient+2,f
  5229  027D  1D03               	skipz
  5230  027E  2A8C               	goto	l806
  5231  027F  0AF7               	incf	___aodiv@quotient+3,f
  5232  0280  1D03               	skipz
  5233  0281  2A8C               	goto	l806
  5234  0282  0AF8               	incf	___aodiv@quotient+4,f
  5235  0283  1D03               	skipz
  5236  0284  2A8C               	goto	l806
  5237  0285  0AF9               	incf	___aodiv@quotient+5,f
  5238  0286  1D03               	skipz
  5239  0287  2A8C               	goto	l806
  5240  0288  0AFA               	incf	___aodiv@quotient+6,f
  5241  0289  1D03               	skipz
  5242  028A  2A8C               	goto	l806
  5243  028B  0AFB               	incf	___aodiv@quotient+7,f
  5244  028C                     l806:	
  5245  028C  0874               	movf	___aodiv@quotient,w
  5246  028D  0020               	movlb	0	; select bank0
  5247  028E  00A0               	movwf	?___aodiv
  5248  028F  0875               	movf	___aodiv@quotient+1,w
  5249  0290  00A1               	movwf	?___aodiv+1
  5250  0291  0876               	movf	___aodiv@quotient+2,w
  5251  0292  00A2               	movwf	?___aodiv+2
  5252  0293  0877               	movf	___aodiv@quotient+3,w
  5253  0294  00A3               	movwf	?___aodiv+3
  5254  0295  0878               	movf	___aodiv@quotient+4,w
  5255  0296  00A4               	movwf	?___aodiv+4
  5256  0297  0879               	movf	___aodiv@quotient+5,w
  5257  0298  00A5               	movwf	?___aodiv+5
  5258  0299  087A               	movf	___aodiv@quotient+6,w
  5259  029A  00A6               	movwf	?___aodiv+6
  5260  029B  087B               	movf	___aodiv@quotient+7,w
  5261  029C  00A7               	movwf	?___aodiv+7
  5262  029D  0008               	return
  5263  029E                     __end_of___aodiv:	
  5264                           
  5265                           	psect	text17
  5266  049A                     __ptext17:	
  5267 ;; *************** function _getValorSensor *****************
  5268 ;; Defined at:
  5269 ;;		line 19 in file "sensores.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  numSensor       2    9[COMMON] int 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  valor           2    0[BANK0 ] unsigned short 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  2    9[COMMON] unsigned short 
  5276 ;; Registers used:
  5277 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;Total ram usage:        4 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    6
  5290 ;; This function calls:
  5291 ;;		_getValorADC
  5292 ;; This function is called by:
  5293 ;;		_imprimeValoreSensores
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           
  5298                           ;psect for function _getValorSensor
  5299  049A                     _getValorSensor:	
  5300                           
  5301                           ;sensores.c: 20:     uint16_t valor = 0;
  5302                           
  5303                           ;incstack = 0
  5304                           ; Regs used in _getValorSensor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5305  049A  0020               	movlb	0	; select bank0
  5306  049B  01A0               	clrf	getValorSensor@valor
  5307  049C  01A1               	clrf	getValorSensor@valor+1
  5308                           
  5309                           ;sensores.c: 21:     switch(numSensor){
  5310  049D  2CB4               	goto	l2726
  5311  049E                     l2708:	
  5312                           
  5313                           ;sensores.c: 23:             valor = getValorADC(AN0);
  5314  049E  3000               	movlw	0
  5315  049F  2CAB               	goto	L9
  5316  04A0                     l2710:	
  5317                           ;sensores.c: 24:         break;
  5318                           
  5319                           
  5320                           ;sensores.c: 26:             valor = getValorADC(AN1);
  5321  04A0  3001               	movlw	1
  5322  04A1  2CAB               	goto	L9
  5323  04A2                     l2712:	
  5324                           ;sensores.c: 27:         break;
  5325                           
  5326                           
  5327                           ;sensores.c: 29:             valor = getValorADC(AN2);
  5328  04A2  3002               	movlw	2
  5329  04A3  2CAB               	goto	L9
  5330  04A4                     l2714:	
  5331                           ;sensores.c: 30:         break;
  5332                           
  5333                           
  5334                           ;sensores.c: 32:             valor = getValorADC(AN3);
  5335  04A4  3003               	movlw	3
  5336  04A5  2CAB               	goto	L9
  5337  04A6                     l2716:	
  5338                           ;sensores.c: 33:         break;
  5339                           
  5340                           
  5341                           ;sensores.c: 35:             valor = getValorADC(AN4);
  5342  04A6  3004               	movlw	4
  5343  04A7  2CAB               	goto	L9
  5344  04A8                     l2718:	
  5345                           ;sensores.c: 36:         break;
  5346                           
  5347                           
  5348                           ;sensores.c: 38:             valor = getValorADC(AN8);
  5349  04A8  3008               	movlw	8
  5350  04A9  2CAB               	goto	L9
  5351  04AA                     l2720:	
  5352                           ;sensores.c: 39:         break;
  5353                           
  5354  04AA                     l2722:	
  5355                           ;sensores.c: 42:         break;
  5356                           
  5357                           ;sensores.c: 41:             valor = getValorADC(AN10);
  5358                           
  5359                           
  5360                           ;sensores.c: 44:             valor = getValorADC(AN10);
  5361  04AA  300A               	movlw	10
  5362  04AB                     L9:	
  5363  04AB  3187  2786  3184   	fcall	_getValorADC
  5364  04AE  0876               	movf	?_getValorADC+1,w
  5365  04AF  0020               	movlb	0	; select bank0
  5366  04B0  00A1               	movwf	getValorSensor@valor+1
  5367  04B1  0875               	movf	?_getValorADC,w
  5368  04B2  00A0               	movwf	getValorSensor@valor
  5369                           
  5370                           ;sensores.c: 45:         break;
  5371  04B3  2CD3               	goto	l2728
  5372  04B4                     l2726:	
  5373                           
  5374                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5375                           ; Switch size 1, requested type "simple"
  5376                           ; Number of cases is 1, Range of values is 0 to 0
  5377                           ; switch strategies available:
  5378                           ; Name         Instructions Cycles
  5379                           ; simple_byte            4     3 (average)
  5380                           ; direct_byte            8     6 (fixed)
  5381                           ; jumptable            260     6 (fixed)
  5382                           ;	Chosen strategy is simple_byte
  5383  04B4  087A               	movf	getValorSensor@numSensor+1,w
  5384  04B5  3A00               	xorlw	0	; case 0
  5385  04B6  1903               	skipnz
  5386  04B7  2CB9               	goto	l2832
  5387  04B8  2CD3               	goto	l2728
  5388  04B9                     l2832:	
  5389                           
  5390                           ; Switch size 1, requested type "simple"
  5391                           ; Number of cases is 8, Range of values is 1 to 8
  5392                           ; switch strategies available:
  5393                           ; Name         Instructions Cycles
  5394                           ; direct_byte           25     9 (fixed)
  5395                           ; simple_byte           25    13 (average)
  5396                           ; jumptable            263     9 (fixed)
  5397                           ;	Chosen strategy is simple_byte
  5398  04B9  0879               	movf	getValorSensor@numSensor,w
  5399  04BA  3A01               	xorlw	1	; case 1
  5400  04BB  1903               	skipnz
  5401  04BC  2C9E               	goto	l2708
  5402  04BD  3A03               	xorlw	3	; case 2
  5403  04BE  1903               	skipnz
  5404  04BF  2CA0               	goto	l2710
  5405  04C0  3A01               	xorlw	1	; case 3
  5406  04C1  1903               	skipnz
  5407  04C2  2CA2               	goto	l2712
  5408  04C3  3A07               	xorlw	7	; case 4
  5409  04C4  1903               	skipnz
  5410  04C5  2CA4               	goto	l2714
  5411  04C6  3A01               	xorlw	1	; case 5
  5412  04C7  1903               	skipnz
  5413  04C8  2CA6               	goto	l2716
  5414  04C9  3A03               	xorlw	3	; case 6
  5415  04CA  1903               	skipnz
  5416  04CB  2CA8               	goto	l2718
  5417  04CC  3A01               	xorlw	1	; case 7
  5418  04CD  1903               	skipnz
  5419  04CE  2CAA               	goto	l2720
  5420  04CF  3A0F               	xorlw	15	; case 8
  5421  04D0  1903               	skipnz
  5422  04D1  2CAA               	goto	l2722
  5423  04D2  2CD3               	goto	l2728
  5424  04D3                     l2728:	
  5425                           
  5426                           ;sensores.c: 47:     return valor;
  5427  04D3  0821               	movf	getValorSensor@valor+1,w
  5428  04D4  00FA               	movwf	?_getValorSensor+1
  5429  04D5  0820               	movf	getValorSensor@valor,w
  5430  04D6  00F9               	movwf	?_getValorSensor
  5431  04D7  0008               	return
  5432  04D8                     __end_of_getValorSensor:	
  5433                           
  5434                           	psect	text18
  5435  0786                     __ptext18:	
  5436 ;; *************** function _getValorADC *****************
  5437 ;; Defined at:
  5438 ;;		line 11 in file "sensores.c"
  5439 ;; Parameters:    Size  Location     Type
  5440 ;;  c               1    wreg     enum E2703
  5441 ;; Auto vars:     Size  Location     Type
  5442 ;;  c               1    8[COMMON] enum E2703
  5443 ;; Return value:  Size  Location     Type
  5444 ;;                  2    5[COMMON] unsigned short 
  5445 ;; Registers used:
  5446 ;;		wreg, status,2, status,0, pclath, cstack
  5447 ;; Tracked objects:
  5448 ;;		On entry : 0/0
  5449 ;;		On exit  : 0/0
  5450 ;;		Unchanged: 0/0
  5451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5452 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;Total ram usage:        4 bytes
  5457 ;; Hardware stack levels used:    1
  5458 ;; Hardware stack levels required when called:    5
  5459 ;; This function calls:
  5460 ;;		_ADC_GetConversion
  5461 ;; This function is called by:
  5462 ;;		_getValorSensor
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           
  5467                           ;psect for function _getValorADC
  5468  0786                     _getValorADC:	
  5469                           
  5470                           ;incstack = 0
  5471                           ; Regs used in _getValorADC: [wreg+status,2+status,0+pclath+cstack]
  5472                           ;getValorADC@c stored from wreg
  5473  0786  00F8               	movwf	getValorADC@c
  5474                           
  5475                           ;sensores.c: 15:     return ADC_GetConversion(c);
  5476  0787  0878               	movf	getValorADC@c,w
  5477  0788  3186  26A5         	fcall	_ADC_GetConversion
  5478  078A  0872               	movf	?_ADC_GetConversion+1,w
  5479  078B  00F6               	movwf	?_getValorADC+1
  5480  078C  0871               	movf	?_ADC_GetConversion,w
  5481  078D  00F5               	movwf	?_getValorADC
  5482  078E  0008               	return
  5483  078F                     __end_of_getValorADC:	
  5484                           
  5485                           	psect	text19
  5486  06A5                     __ptext19:	
  5487 ;; *************** function _ADC_GetConversion *****************
  5488 ;; Defined at:
  5489 ;;		line 112 in file "mcc_generated_files/adc.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  channel         1    wreg     enum E2703
  5492 ;; Auto vars:     Size  Location     Type
  5493 ;;  channel         1    4[COMMON] enum E2703
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  2    1[COMMON] unsigned short 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5503 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;Total ram usage:        4 bytes
  5508 ;; Hardware stack levels used:    1
  5509 ;; Hardware stack levels required when called:    4
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_getValorADC
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _ADC_GetConversion
  5519  06A5                     _ADC_GetConversion:	
  5520                           
  5521                           ;incstack = 0
  5522                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
  5523                           ;ADC_GetConversion@channel stored from wreg
  5524  06A5  00F4               	movwf	ADC_GetConversion@channel
  5525                           
  5526                           ;mcc_generated_files/adc.c: 112: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 113: {;mcc_generated_files/adc.c: 115:     ADCON0bits.CHS = ch
      +                          annel;
  5527  06A6  0874               	movf	ADC_GetConversion@channel,w
  5528  06A7  00F3               	movwf	??_ADC_GetConversion
  5529  06A8  0DF3               	rlf	??_ADC_GetConversion,f
  5530  06A9  0DF3               	rlf	??_ADC_GetConversion,f
  5531  06AA  0021               	movlb	1	; select bank1
  5532  06AB  081D               	movf	29,w	;volatile
  5533  06AC  0673               	xorwf	??_ADC_GetConversion,w
  5534  06AD  3983               	andlw	-125
  5535  06AE  0673               	xorwf	??_ADC_GetConversion,w
  5536  06AF  009D               	movwf	29	;volatile
  5537                           
  5538                           ;mcc_generated_files/adc.c: 118:     ADCON0bits.ADON = 1;
  5539  06B0  141D               	bsf	29,0	;volatile
  5540                           
  5541                           ;mcc_generated_files/adc.c: 121:     _delay((unsigned long)((5)*(8000000/4000000.0)));
  5542  06B1  3003               	movlw	3
  5543  06B2                     u2137:	
  5544  06B2  0B89               	decfsz	9,f
  5545  06B3  2EB2               	goto	u2137
  5546  06B4  0000               	nop
  5547                           
  5548                           ;mcc_generated_files/adc.c: 124:     ADCON0bits.GO_nDONE = 1;
  5549  06B5  0021               	movlb	1	; select bank1
  5550  06B6  149D               	bsf	29,1	;volatile
  5551  06B7                     l303:	
  5552                           ;mcc_generated_files/adc.c: 128:     {;mcc_generated_files/adc.c: 129:     }
  5553                           
  5554                           
  5555                           ;mcc_generated_files/adc.c: 127:     while (ADCON0bits.GO_nDONE)
  5556  06B7  189D               	btfsc	29,1	;volatile
  5557  06B8  2EB7               	goto	l303
  5558                           
  5559                           ;mcc_generated_files/adc.c: 132:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5560  06B9  081C               	movf	28,w	;volatile
  5561  06BA  00F2               	movwf	?_ADC_GetConversion+1
  5562  06BB  081B               	movf	27,w	;volatile
  5563  06BC  00F1               	movwf	?_ADC_GetConversion
  5564  06BD  0008               	return
  5565  06BE                     __end_of_ADC_GetConversion:	
  5566                           
  5567                           	psect	text20
  5568  06BE                     __ptext20:	
  5569 ;; *************** function _SYSTEM_Initialize *****************
  5570 ;; Defined at:
  5571 ;;		line 50 in file "mcc_generated_files/mcc.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;		None
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;		None
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      void 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, pclath, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;Total ram usage:        0 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    6
  5592 ;; This function calls:
  5593 ;;		_ADC_Initialize
  5594 ;;		_EPWM1_Initialize
  5595 ;;		_EPWM2_Initialize
  5596 ;;		_EUSART_Initialize
  5597 ;;		_OSCILLATOR_Initialize
  5598 ;;		_PIN_MANAGER_Initialize
  5599 ;;		_TMR2_Initialize
  5600 ;;		_WDT_Initialize
  5601 ;; This function is called by:
  5602 ;;		_main
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           
  5607                           ;psect for function _SYSTEM_Initialize
  5608  06BE                     _SYSTEM_Initialize:	
  5609                           
  5610                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  5611                           
  5612                           ;incstack = 0
  5613                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5614  06BE  3186  268A  3186   	fcall	_PIN_MANAGER_Initialize
  5615                           
  5616                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  5617  06C1  3187  2798  3186   	fcall	_OSCILLATOR_Initialize
  5618                           
  5619                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  5620  06C4  3187  27CE  3186   	fcall	_WDT_Initialize
  5621                           
  5622                           ;mcc_generated_files/mcc.c: 56:     EPWM2_Initialize();
  5623  06C7  3187  2751  3186   	fcall	_EPWM2_Initialize
  5624                           
  5625                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  5626  06CA  3187  278F  3186   	fcall	_ADC_Initialize
  5627                           
  5628                           ;mcc_generated_files/mcc.c: 58:     EPWM1_Initialize();
  5629  06CD  3187  275F  3186   	fcall	_EPWM1_Initialize
  5630                           
  5631                           ;mcc_generated_files/mcc.c: 59:     TMR2_Initialize();
  5632  06D0  3187  2740  3186   	fcall	_TMR2_Initialize
  5633                           
  5634                           ;mcc_generated_files/mcc.c: 60:     EUSART_Initialize();
  5635  06D3  3184  24D8         	fcall	_EUSART_Initialize
  5636  06D5  0008               	return
  5637  06D6                     __end_of_SYSTEM_Initialize:	
  5638                           
  5639                           	psect	text21
  5640  07CE                     __ptext21:	
  5641 ;; *************** function _WDT_Initialize *****************
  5642 ;; Defined at:
  5643 ;;		line 73 in file "mcc_generated_files/mcc.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;                  1    wreg      void 
  5650 ;; Registers used:
  5651 ;;		wreg
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    4
  5664 ;; This function calls:
  5665 ;;		Nothing
  5666 ;; This function is called by:
  5667 ;;		_SYSTEM_Initialize
  5668 ;; This function uses a non-reentrant model
  5669 ;;
  5670                           
  5671                           
  5672                           ;psect for function _WDT_Initialize
  5673  07CE                     _WDT_Initialize:	
  5674                           
  5675                           ;mcc_generated_files/mcc.c: 76:     WDTCON = 0x16;
  5676                           
  5677                           ;incstack = 0
  5678                           ; Regs used in _WDT_Initialize: [wreg]
  5679  07CE  3016               	movlw	22
  5680  07CF  0021               	movlb	1	; select bank1
  5681  07D0  0097               	movwf	23	;volatile
  5682  07D1  0008               	return
  5683  07D2                     __end_of_WDT_Initialize:	
  5684                           
  5685                           	psect	text22
  5686  0740                     __ptext22:	
  5687 ;; *************** function _TMR2_Initialize *****************
  5688 ;; Defined at:
  5689 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;		None
  5692 ;; Auto vars:     Size  Location     Type
  5693 ;;		None
  5694 ;; Return value:  Size  Location     Type
  5695 ;;                  1    wreg      void 
  5696 ;; Registers used:
  5697 ;;		wreg, status,2, status,0, pclath, cstack
  5698 ;; Tracked objects:
  5699 ;;		On entry : 0/0
  5700 ;;		On exit  : 0/0
  5701 ;;		Unchanged: 0/0
  5702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;Total ram usage:        0 bytes
  5708 ;; Hardware stack levels used:    1
  5709 ;; Hardware stack levels required when called:    5
  5710 ;; This function calls:
  5711 ;;		_TMR2_SetInterruptHandler
  5712 ;; This function is called by:
  5713 ;;		_SYSTEM_Initialize
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           
  5718                           ;psect for function _TMR2_Initialize
  5719  0740                     _TMR2_Initialize:	
  5720                           
  5721                           ;mcc_generated_files/tmr2.c: 69:     PR2 = 0xFF;
  5722                           
  5723                           ;incstack = 0
  5724                           ; Regs used in _TMR2_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5725  0740  30FF               	movlw	255
  5726  0741  0020               	movlb	0	; select bank0
  5727  0742  009B               	movwf	27	;volatile
  5728                           
  5729                           ;mcc_generated_files/tmr2.c: 72:     TMR2 = 0x00;
  5730  0743  019A               	clrf	26	;volatile
  5731                           
  5732                           ;mcc_generated_files/tmr2.c: 75:     PIR1bits.TMR2IF = 0;
  5733  0744  1091               	bcf	17,1	;volatile
  5734                           
  5735                           ;mcc_generated_files/tmr2.c: 78:     PIE1bits.TMR2IE = 1;
  5736  0745  0021               	movlb	1	; select bank1
  5737  0746  1491               	bsf	17,1	;volatile
  5738                           
  5739                           ;mcc_generated_files/tmr2.c: 81:     TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandl
      +                          er);
  5740  0747  30DC               	movlw	low _TMR2_DefaultInterruptHandler
  5741  0748  00F1               	movwf	TMR2_SetInterruptHandler@InterruptHandler
  5742  0749  3007               	movlw	high _TMR2_DefaultInterruptHandler
  5743  074A  00F2               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1
  5744  074B  3187  27A5         	fcall	_TMR2_SetInterruptHandler
  5745                           
  5746                           ;mcc_generated_files/tmr2.c: 84:     T2CON = 0x04;
  5747  074D  3004               	movlw	4
  5748  074E  0020               	movlb	0	; select bank0
  5749  074F  009C               	movwf	28	;volatile
  5750  0750  0008               	return
  5751  0751                     __end_of_TMR2_Initialize:	
  5752                           
  5753                           	psect	text23
  5754  07A5                     __ptext23:	
  5755 ;; *************** function _TMR2_SetInterruptHandler *****************
  5756 ;; Defined at:
  5757 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  InterruptHan    2    1[COMMON] PTR FTN()void 
  5760 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		wreg
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5776 ;;Total ram usage:        2 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    4
  5779 ;; This function calls:
  5780 ;;		Nothing
  5781 ;; This function is called by:
  5782 ;;		_TMR2_Initialize
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           
  5787                           ;psect for function _TMR2_SetInterruptHandler
  5788  07A5                     _TMR2_SetInterruptHandler:	
  5789                           
  5790                           ;mcc_generated_files/tmr2.c: 133:     TMR2_InterruptHandler = InterruptHandler;
  5791                           
  5792                           ;incstack = 0
  5793                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5794  07A5  0872               	movf	TMR2_SetInterruptHandler@InterruptHandler+1,w
  5795  07A6  0021               	movlb	1	; select bank1
  5796  07A7  00D4               	movwf	(_TMR2_InterruptHandler+1)^(0+128)
  5797  07A8  0871               	movf	TMR2_SetInterruptHandler@InterruptHandler,w
  5798  07A9  00D3               	movwf	_TMR2_InterruptHandler^(0+128)
  5799  07AA  0008               	return
  5800  07AB                     __end_of_TMR2_SetInterruptHandler:	
  5801                           
  5802                           	psect	text24
  5803  068A                     __ptext24:	
  5804 ;; *************** function _PIN_MANAGER_Initialize *****************
  5805 ;; Defined at:
  5806 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;Total ram usage:        0 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    4
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_SYSTEM_Initialize
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           
  5835                           ;psect for function _PIN_MANAGER_Initialize
  5836  068A                     _PIN_MANAGER_Initialize:	
  5837                           
  5838                           ;mcc_generated_files/pin_manager.c: 60:     LATE = 0x00;
  5839                           
  5840                           ;incstack = 0
  5841                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  5842  068A  0022               	movlb	2	; select bank2
  5843  068B  0190               	clrf	16	;volatile
  5844                           
  5845                           ;mcc_generated_files/pin_manager.c: 61:     LATA = 0x00;
  5846  068C  018C               	clrf	12	;volatile
  5847                           
  5848                           ;mcc_generated_files/pin_manager.c: 62:     LATB = 0x00;
  5849  068D  018D               	clrf	13	;volatile
  5850                           
  5851                           ;mcc_generated_files/pin_manager.c: 63:     LATC = 0x00;
  5852  068E  018E               	clrf	14	;volatile
  5853                           
  5854                           ;mcc_generated_files/pin_manager.c: 68:     TRISE = 0x08;
  5855  068F  3008               	movlw	8
  5856  0690  0021               	movlb	1	; select bank1
  5857  0691  0090               	movwf	16	;volatile
  5858                           
  5859                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0xFF;
  5860  0692  30FF               	movlw	255
  5861  0693  008C               	movwf	12	;volatile
  5862                           
  5863                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xFF;
  5864  0694  30FF               	movlw	255
  5865  0695  008D               	movwf	13	;volatile
  5866                           
  5867                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x01;
  5868  0696  3001               	movlw	1
  5869  0697  008E               	movwf	14	;volatile
  5870                           
  5871                           ;mcc_generated_files/pin_manager.c: 76:     ANSELB = 0x3F;
  5872  0698  303F               	movlw	63
  5873  0699  0023               	movlb	3	; select bank3
  5874  069A  008D               	movwf	13	;volatile
  5875                           
  5876                           ;mcc_generated_files/pin_manager.c: 77:     ANSELA = 0x2F;
  5877  069B  302F               	movlw	47
  5878  069C  008C               	movwf	12	;volatile
  5879                           
  5880                           ;mcc_generated_files/pin_manager.c: 82:     WPUE = 0x00;
  5881  069D  0024               	movlb	4	; select bank4
  5882  069E  0190               	clrf	16	;volatile
  5883                           
  5884                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
  5885  069F  018D               	clrf	13	;volatile
  5886                           
  5887                           ;mcc_generated_files/pin_manager.c: 84:     OPTION_REGbits.nWPUEN = 1;
  5888  06A0  0021               	movlb	1	; select bank1
  5889  06A1  1795               	bsf	21,7	;volatile
  5890                           
  5891                           ;mcc_generated_files/pin_manager.c: 91:     APFCON = 0x00;
  5892  06A2  0022               	movlb	2	; select bank2
  5893  06A3  019D               	clrf	29	;volatile
  5894  06A4  0008               	return
  5895  06A5                     __end_of_PIN_MANAGER_Initialize:	
  5896                           
  5897                           	psect	text25
  5898  0798                     __ptext25:	
  5899 ;; *************** function _OSCILLATOR_Initialize *****************
  5900 ;; Defined at:
  5901 ;;		line 63 in file "mcc_generated_files/mcc.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, status,2
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    4
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_SYSTEM_Initialize
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _OSCILLATOR_Initialize
  5931  0798                     _OSCILLATOR_Initialize:	
  5932                           
  5933                           ;mcc_generated_files/mcc.c: 66:     OSCCON = 0x70;
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  5937  0798  3070               	movlw	112
  5938  0799  0021               	movlb	1	; select bank1
  5939  079A  0099               	movwf	25	;volatile
  5940                           
  5941                           ;mcc_generated_files/mcc.c: 68:     OSCTUNE = 0x00;
  5942  079B  0198               	clrf	24	;volatile
  5943                           
  5944                           ;mcc_generated_files/mcc.c: 70:     BORCON = 0x00;
  5945  079C  0022               	movlb	2	; select bank2
  5946  079D  0196               	clrf	22	;volatile
  5947  079E  0008               	return
  5948  079F                     __end_of_OSCILLATOR_Initialize:	
  5949                           
  5950                           	psect	text26
  5951  04D8                     __ptext26:	
  5952 ;; *************** function _EUSART_Initialize *****************
  5953 ;; Defined at:
  5954 ;;		line 85 in file "mcc_generated_files/eusart.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;		None
  5957 ;; Auto vars:     Size  Location     Type
  5958 ;;		None
  5959 ;; Return value:  Size  Location     Type
  5960 ;;                  1    wreg      void 
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0, pclath, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5971 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;Total ram usage:        1 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    5
  5975 ;; This function calls:
  5976 ;;		_EUSART_SetErrorHandler
  5977 ;;		_EUSART_SetFramingErrorHandler
  5978 ;;		_EUSART_SetOverrunErrorHandler
  5979 ;;		_EUSART_SetRxInterruptHandler
  5980 ;;		_EUSART_SetTxInterruptHandler
  5981 ;; This function is called by:
  5982 ;;		_SYSTEM_Initialize
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _EUSART_Initialize
  5988  04D8                     _EUSART_Initialize:	
  5989                           
  5990                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
  5991                           
  5992                           ;incstack = 0
  5993                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5994  04D8  0021               	movlb	1	; select bank1
  5995  04D9  1291               	bcf	17,5	;volatile
  5996                           
  5997                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  5998  04DA  3015               	movlw	low _EUSART_Receive_ISR
  5999  04DB  00F1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  6000  04DC  3005               	movlw	high _EUSART_Receive_ISR
  6001  04DD  00F2               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  6002  04DE  3187  27B1  3184   	fcall	_EUSART_SetRxInterruptHandler
  6003                           
  6004                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
  6005  04E1  0021               	movlb	1	; select bank1
  6006  04E2  1211               	bcf	17,4	;volatile
  6007                           
  6008                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  6009  04E3  306D               	movlw	low _EUSART_Transmit_ISR
  6010  04E4  00F1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  6011  04E5  3006               	movlw	high _EUSART_Transmit_ISR
  6012  04E6  00F2               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  6013  04E7  3187  27AB  3184   	fcall	_EUSART_SetTxInterruptHandler
  6014                           
  6015                           ;mcc_generated_files/eusart.c: 95:     BAUDCON = 0x08;
  6016  04EA  3008               	movlw	8
  6017  04EB  0023               	movlb	3	; select bank3
  6018  04EC  009F               	movwf	31	;volatile
  6019                           
  6020                           ;mcc_generated_files/eusart.c: 98:     RCSTA = 0x88;
  6021  04ED  3088               	movlw	136
  6022  04EE  009D               	movwf	29	;volatile
  6023                           
  6024                           ;mcc_generated_files/eusart.c: 101:     TXSTA = 0x24;
  6025  04EF  3024               	movlw	36
  6026  04F0  009E               	movwf	30	;volatile
  6027                           
  6028                           ;mcc_generated_files/eusart.c: 104:     SPBRGL = 0xCF;
  6029  04F1  30CF               	movlw	207
  6030  04F2  009B               	movwf	27	;volatile
  6031                           
  6032                           ;mcc_generated_files/eusart.c: 107:     SPBRGH = 0x00;
  6033  04F3  019C               	clrf	28	;volatile
  6034                           
  6035                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  6036  04F4  30DD               	movlw	low _EUSART_DefaultFramingErrorHandler
  6037  04F5  00F1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  6038  04F6  3007               	movlw	high _EUSART_DefaultFramingErrorHandler
  6039  04F7  00F2               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  6040  04F8  3187  27BD  3184   	fcall	_EUSART_SetFramingErrorHandler
  6041                           
  6042                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  6043  04FB  30D2               	movlw	low _EUSART_DefaultOverrunErrorHandler
  6044  04FC  00F1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  6045  04FD  3007               	movlw	high _EUSART_DefaultOverrunErrorHandler
  6046  04FE  00F2               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  6047  04FF  3187  27B7  3184   	fcall	_EUSART_SetOverrunErrorHandler
  6048                           
  6049                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  6050  0502  30D6               	movlw	low _EUSART_DefaultErrorHandler
  6051  0503  00F1               	movwf	EUSART_SetErrorHandler@interruptHandler
  6052  0504  3007               	movlw	high _EUSART_DefaultErrorHandler
  6053  0505  00F2               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  6054  0506  3187  27C3         	fcall	_EUSART_SetErrorHandler
  6055                           
  6056                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
  6057  0508  0021               	movlb	1	; select bank1
  6058  0509  01A8               	clrf	_eusartRxLastError^(0+128)	;volatile
  6059                           
  6060                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
  6061  050A  01AC               	clrf	_eusartTxHead^(0+128)	;volatile
  6062                           
  6063                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
  6064  050B  01AB               	clrf	_eusartTxTail^(0+128)	;volatile
  6065                           
  6066                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  6067  050C  3040               	movlw	64
  6068  050D  00F3               	movwf	??_EUSART_Initialize
  6069  050E  0873               	movf	??_EUSART_Initialize,w
  6070  050F  00D9               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  6071                           
  6072                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
  6073  0510  01FC               	clrf	_eusartRxHead	;volatile
  6074                           
  6075                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
  6076  0511  01AA               	clrf	_eusartRxTail^(0+128)	;volatile
  6077                           
  6078                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
  6079  0512  01A9               	clrf	_eusartRxCount^(0+128)	;volatile
  6080                           
  6081                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
  6082  0513  1691               	bsf	17,5	;volatile
  6083  0514  0008               	return
  6084  0515                     __end_of_EUSART_Initialize:	
  6085                           
  6086                           	psect	text27
  6087  07AB                     __ptext27:	
  6088 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  6089 ;; Defined at:
  6090 ;;		line 282 in file "mcc_generated_files/eusart.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6093 ;;		 -> EUSART_Transmit_ISR(1), 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;		None
  6096 ;; Return value:  Size  Location     Type
  6097 ;;                  1    wreg      void 
  6098 ;; Registers used:
  6099 ;;		wreg
  6100 ;; Tracked objects:
  6101 ;;		On entry : 0/0
  6102 ;;		On exit  : 0/0
  6103 ;;		Unchanged: 0/0
  6104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6105 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6108 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6109 ;;Total ram usage:        2 bytes
  6110 ;; Hardware stack levels used:    1
  6111 ;; Hardware stack levels required when called:    4
  6112 ;; This function calls:
  6113 ;;		Nothing
  6114 ;; This function is called by:
  6115 ;;		_EUSART_Initialize
  6116 ;; This function uses a non-reentrant model
  6117 ;;
  6118                           
  6119                           
  6120                           ;psect for function _EUSART_SetTxInterruptHandler
  6121  07AB                     _EUSART_SetTxInterruptHandler:	
  6122                           
  6123                           ;mcc_generated_files/eusart.c: 283:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  6124                           
  6125                           ;incstack = 0
  6126                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  6127  07AB  0872               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  6128  07AC  0021               	movlb	1	; select bank1
  6129  07AD  00D8               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
  6130  07AE  0871               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  6131  07AF  00D7               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
  6132  07B0  0008               	return
  6133  07B1                     __end_of_EUSART_SetTxInterruptHandler:	
  6134                           
  6135                           	psect	text28
  6136  07B1                     __ptext28:	
  6137 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  6138 ;; Defined at:
  6139 ;;		line 286 in file "mcc_generated_files/eusart.c"
  6140 ;; Parameters:    Size  Location     Type
  6141 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6142 ;;		 -> EUSART_Receive_ISR(1), 
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6154 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6157 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;Total ram usage:        2 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; Hardware stack levels required when called:    4
  6161 ;; This function calls:
  6162 ;;		Nothing
  6163 ;; This function is called by:
  6164 ;;		_EUSART_Initialize
  6165 ;; This function uses a non-reentrant model
  6166 ;;
  6167                           
  6168                           
  6169                           ;psect for function _EUSART_SetRxInterruptHandler
  6170  07B1                     _EUSART_SetRxInterruptHandler:	
  6171                           
  6172                           ;mcc_generated_files/eusart.c: 287:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  6173                           
  6174                           ;incstack = 0
  6175                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  6176  07B1  0872               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  6177  07B2  0021               	movlb	1	; select bank1
  6178  07B3  00D6               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
  6179  07B4  0871               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  6180  07B5  00D5               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
  6181  07B6  0008               	return
  6182  07B7                     __end_of_EUSART_SetRxInterruptHandler:	
  6183                           
  6184                           	psect	text29
  6185  07B7                     __ptext29:	
  6186 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  6187 ;; Defined at:
  6188 ;;		line 274 in file "mcc_generated_files/eusart.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6191 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;                  1    wreg      void 
  6196 ;; Registers used:
  6197 ;;		wreg
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/0
  6200 ;;		On exit  : 0/0
  6201 ;;		Unchanged: 0/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6203 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6207 ;;Total ram usage:        2 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    4
  6210 ;; This function calls:
  6211 ;;		Nothing
  6212 ;; This function is called by:
  6213 ;;		_EUSART_Initialize
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216                           
  6217                           
  6218                           ;psect for function _EUSART_SetOverrunErrorHandler
  6219  07B7                     _EUSART_SetOverrunErrorHandler:	
  6220                           
  6221                           ;mcc_generated_files/eusart.c: 275:     EUSART_OverrunErrorHandler = interruptHandler;
  6222                           
  6223                           ;incstack = 0
  6224                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  6225  07B7  0872               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  6226  07B8  0021               	movlb	1	; select bank1
  6227  07B9  00D0               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+128)
  6228  07BA  0871               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  6229  07BB  00CF               	movwf	_EUSART_OverrunErrorHandler^(0+128)
  6230  07BC  0008               	return
  6231  07BD                     __end_of_EUSART_SetOverrunErrorHandler:	
  6232                           
  6233                           	psect	text30
  6234  07BD                     __ptext30:	
  6235 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  6236 ;; Defined at:
  6237 ;;		line 270 in file "mcc_generated_files/eusart.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6240 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6252 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;Total ram usage:        2 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    4
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		_EUSART_Initialize
  6263 ;; This function uses a non-reentrant model
  6264 ;;
  6265                           
  6266                           
  6267                           ;psect for function _EUSART_SetFramingErrorHandler
  6268  07BD                     _EUSART_SetFramingErrorHandler:	
  6269                           
  6270                           ;mcc_generated_files/eusart.c: 271:     EUSART_FramingErrorHandler = interruptHandler;
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  6274  07BD  0872               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  6275  07BE  0021               	movlb	1	; select bank1
  6276  07BF  00D2               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
  6277  07C0  0871               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  6278  07C1  00D1               	movwf	_EUSART_FramingErrorHandler^(0+128)
  6279  07C2  0008               	return
  6280  07C3                     __end_of_EUSART_SetFramingErrorHandler:	
  6281                           
  6282                           	psect	text31
  6283  07C3                     __ptext31:	
  6284 ;; *************** function _EUSART_SetErrorHandler *****************
  6285 ;; Defined at:
  6286 ;;		line 278 in file "mcc_generated_files/eusart.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  interruptHan    2    1[COMMON] PTR FTN()void 
  6289 ;;		 -> EUSART_DefaultErrorHandler(1), 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;Total ram usage:        2 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    4
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_EUSART_Initialize
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _EUSART_SetErrorHandler
  6317  07C3                     _EUSART_SetErrorHandler:	
  6318                           
  6319                           ;mcc_generated_files/eusart.c: 279:     EUSART_ErrorHandler = interruptHandler;
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  6323  07C3  0872               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  6324  07C4  0021               	movlb	1	; select bank1
  6325  07C5  00CE               	movwf	(_EUSART_ErrorHandler+1)^(0+128)
  6326  07C6  0871               	movf	EUSART_SetErrorHandler@interruptHandler,w
  6327  07C7  00CD               	movwf	_EUSART_ErrorHandler^(0+128)
  6328  07C8  0008               	return
  6329  07C9                     __end_of_EUSART_SetErrorHandler:	
  6330                           
  6331                           	psect	text32
  6332  0751                     __ptext32:	
  6333 ;; *************** function _EPWM2_Initialize *****************
  6334 ;; Defined at:
  6335 ;;		line 64 in file "mcc_generated_files/epwm2.c"
  6336 ;; Parameters:    Size  Location     Type
  6337 ;;		None
  6338 ;; Auto vars:     Size  Location     Type
  6339 ;;		None
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  1    wreg      void 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        0 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    4
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_SYSTEM_Initialize
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _EPWM2_Initialize
  6365  0751                     _EPWM2_Initialize:	
  6366                           
  6367                           ;mcc_generated_files/epwm2.c: 69:  CCP2CON = 0x3C;
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _EPWM2_Initialize: [wreg+status,2+status,0]
  6371  0751  303C               	movlw	60
  6372  0752  0025               	movlb	5	; select bank5
  6373  0753  009A               	movwf	26	;volatile
  6374                           
  6375                           ;mcc_generated_files/epwm2.c: 72:  ECCP2AS = 0x00;
  6376  0754  019C               	clrf	28	;volatile
  6377                           
  6378                           ;mcc_generated_files/epwm2.c: 75:  PWM2CON = 0x80;
  6379  0755  3080               	movlw	128
  6380  0756  009B               	movwf	27	;volatile
  6381                           
  6382                           ;mcc_generated_files/epwm2.c: 78:  PSTR2CON = 0x01;
  6383  0757  3001               	movlw	1
  6384  0758  009D               	movwf	29	;volatile
  6385                           
  6386                           ;mcc_generated_files/epwm2.c: 81:  CCPR2H = 0x00;
  6387  0759  0199               	clrf	25	;volatile
  6388                           
  6389                           ;mcc_generated_files/epwm2.c: 84:  CCPR2L = 0x7F;
  6390  075A  307F               	movlw	127
  6391  075B  0098               	movwf	24	;volatile
  6392                           
  6393                           ;mcc_generated_files/epwm2.c: 87:  CCPTMRS0bits.C2TSEL = 0x0;
  6394  075C  30F3               	movlw	-13
  6395  075D  059E               	andwf	30,f	;volatile
  6396  075E  0008               	return
  6397  075F                     __end_of_EPWM2_Initialize:	
  6398                           
  6399                           	psect	text33
  6400  075F                     __ptext33:	
  6401 ;; *************** function _EPWM1_Initialize *****************
  6402 ;; Defined at:
  6403 ;;		line 64 in file "mcc_generated_files/epwm1.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;		None
  6406 ;; Auto vars:     Size  Location     Type
  6407 ;;		None
  6408 ;; Return value:  Size  Location     Type
  6409 ;;                  1    wreg      void 
  6410 ;; Registers used:
  6411 ;;		wreg, status,2, status,0
  6412 ;; Tracked objects:
  6413 ;;		On entry : 0/0
  6414 ;;		On exit  : 0/0
  6415 ;;		Unchanged: 0/0
  6416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;Total ram usage:        0 bytes
  6422 ;; Hardware stack levels used:    1
  6423 ;; Hardware stack levels required when called:    4
  6424 ;; This function calls:
  6425 ;;		Nothing
  6426 ;; This function is called by:
  6427 ;;		_SYSTEM_Initialize
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           
  6432                           ;psect for function _EPWM1_Initialize
  6433  075F                     _EPWM1_Initialize:	
  6434                           
  6435                           ;mcc_generated_files/epwm1.c: 69:  CCP1CON = 0x3C;
  6436                           
  6437                           ;incstack = 0
  6438                           ; Regs used in _EPWM1_Initialize: [wreg+status,2+status,0]
  6439  075F  303C               	movlw	60
  6440  0760  0025               	movlb	5	; select bank5
  6441  0761  0093               	movwf	19	;volatile
  6442                           
  6443                           ;mcc_generated_files/epwm1.c: 72:  ECCP1AS = 0x00;
  6444  0762  0195               	clrf	21	;volatile
  6445                           
  6446                           ;mcc_generated_files/epwm1.c: 75:  PWM1CON = 0x80;
  6447  0763  3080               	movlw	128
  6448  0764  0094               	movwf	20	;volatile
  6449                           
  6450                           ;mcc_generated_files/epwm1.c: 78:  PSTR1CON = 0x01;
  6451  0765  3001               	movlw	1
  6452  0766  0096               	movwf	22	;volatile
  6453                           
  6454                           ;mcc_generated_files/epwm1.c: 81:  CCPR1H = 0x00;
  6455  0767  0192               	clrf	18	;volatile
  6456                           
  6457                           ;mcc_generated_files/epwm1.c: 84:  CCPR1L = 0x7F;
  6458  0768  307F               	movlw	127
  6459  0769  0091               	movwf	17	;volatile
  6460                           
  6461                           ;mcc_generated_files/epwm1.c: 87:  CCPTMRS0bits.C1TSEL = 0x0;
  6462  076A  30FC               	movlw	-4
  6463  076B  059E               	andwf	30,f	;volatile
  6464  076C  0008               	return
  6465  076D                     __end_of_EPWM1_Initialize:	
  6466                           
  6467                           	psect	text34
  6468  078F                     __ptext34:	
  6469 ;; *************** function _ADC_Initialize *****************
  6470 ;; Defined at:
  6471 ;;		line 65 in file "mcc_generated_files/adc.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;		None
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;                  1    wreg      void 
  6478 ;; Registers used:
  6479 ;;		wreg, status,2
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;Total ram usage:        0 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    4
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_SYSTEM_Initialize
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _ADC_Initialize
  6501  078F                     _ADC_Initialize:	
  6502                           
  6503                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  6507  078F  3001               	movlw	1
  6508  0790  0021               	movlb	1	; select bank1
  6509  0791  009D               	movwf	29	;volatile
  6510                           
  6511                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x50;
  6512  0792  3050               	movlw	80
  6513  0793  009E               	movwf	30	;volatile
  6514                           
  6515                           ;mcc_generated_files/adc.c: 76:     ADRESL = 0x00;
  6516  0794  019B               	clrf	27	;volatile
  6517                           
  6518                           ;mcc_generated_files/adc.c: 79:     ADRESH = 0x00;
  6519  0795  019C               	clrf	28	;volatile
  6520                           
  6521                           ;mcc_generated_files/adc.c: 82:     PIE1bits.ADIE = 1;
  6522  0796  1711               	bsf	17,6	;volatile
  6523  0797  0008               	return
  6524  0798                     __end_of_ADC_Initialize:	
  6525                           
  6526                           	psect	intentry
  6527  0004                     __pintentry:	
  6528 ;; *************** function _INTERRUPT_InterruptManager *****************
  6529 ;; Defined at:
  6530 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;                  1    wreg      void 
  6537 ;; Registers used:
  6538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    3
  6551 ;; This function calls:
  6552 ;;		Absolute function
  6553 ;;		_ADC_ISR
  6554 ;;		_EUSART_Receive_ISR
  6555 ;;		_EUSART_Transmit_ISR
  6556 ;;		_TMR2_ISR
  6557 ;; This function is called by:
  6558 ;;		Interrupt level 1
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562  0004                     _INTERRUPT_InterruptManager:	
  6563                           
  6564                           ;incstack = 0
  6565  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6566                           
  6567                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6568  0005  3180               	pagesel	$
  6569                           
  6570                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  6571  0006  1F0B               	btfss	11,6	;volatile
  6572  0007  2834               	goto	i1l269
  6573                           
  6574                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  6575  0008  0021               	movlb	1	; select bank1
  6576  0009  1F11               	btfss	17,6	;volatile
  6577  000A  2812               	goto	i1l260
  6578  000B  0020               	movlb	0	; select bank0
  6579  000C  1F11               	btfss	17,6	;volatile
  6580  000D  2812               	goto	i1l260
  6581                           
  6582                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             ADC_ISR();
  6583  000E  3187  27D9  3180   	fcall	_ADC_ISR
  6584                           
  6585                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  6586  0011  2834               	goto	i1l269
  6587  0012                     i1l260:	
  6588                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TXIE == 1 && PIR1
      +                          bits.TXIF == 1)
  6589                           
  6590  0012  0021               	movlb	1	; select bank1
  6591  0013  1E11               	btfss	17,4	;volatile
  6592  0014  281F               	goto	i1l262
  6593  0015  0020               	movlb	0	; select bank0
  6594  0016  1E11               	btfss	17,4	;volatile
  6595  0017  281F               	goto	i1l262
  6596                           
  6597                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
  6598  0018  0021               	movlb	1	; select bank1
  6599  0019  0858               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
  6600  001A  008A               	movwf	10
  6601  001B  0857               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
  6602  001C  000A               	callw
  6603  001D  3180               	pagesel	$
  6604                           
  6605                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  6606  001E  2834               	goto	i1l269
  6607  001F                     i1l262:	
  6608                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  6609                           
  6610  001F  0021               	movlb	1	; select bank1
  6611  0020  1E91               	btfss	17,5	;volatile
  6612  0021  282C               	goto	i1l264
  6613  0022  0020               	movlb	0	; select bank0
  6614  0023  1E91               	btfss	17,5	;volatile
  6615  0024  282C               	goto	i1l264
  6616                           
  6617                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
  6618  0025  0021               	movlb	1	; select bank1
  6619  0026  0856               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
  6620  0027  008A               	movwf	10
  6621  0028  0855               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
  6622  0029  000A               	callw
  6623  002A  3180               	pagesel	$
  6624                           
  6625                           ;mcc_generated_files/interrupt_manager.c: 68:         }
  6626  002B  2834               	goto	i1l269
  6627  002C                     i1l264:	
  6628                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.TMR2IE == 1 && PI
      +                          R1bits.TMR2IF == 1)
  6629                           
  6630  002C  0021               	movlb	1	; select bank1
  6631  002D  1C91               	btfss	17,1	;volatile
  6632  002E  2834               	goto	i1l269
  6633  002F  0020               	movlb	0	; select bank0
  6634  0030  1C91               	btfss	17,1	;volatile
  6635  0031  2834               	goto	i1l269
  6636                           
  6637                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR2_ISR();
  6638  0032  3187  276D         	fcall	_TMR2_ISR
  6639  0034                     i1l269:	
  6640                           ;mcc_generated_files/interrupt_manager.c: 72:         }
  6641                           
  6642  0034  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6643  0035  0009               	retfie
  6644  0036                     __end_of_INTERRUPT_InterruptManager:	
  6645                           
  6646                           	psect	text36
  6647  076D                     __ptext36:	
  6648 ;; *************** function _TMR2_ISR *****************
  6649 ;; Defined at:
  6650 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;                  1    wreg      void 
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, pclath, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:    1
  6671 ;; This function calls:
  6672 ;;		Absolute function
  6673 ;;		_TMR2_DefaultInterruptHandler
  6674 ;; This function is called by:
  6675 ;;		_INTERRUPT_InterruptManager
  6676 ;; This function uses a non-reentrant model
  6677 ;;
  6678                           
  6679                           
  6680                           ;psect for function _TMR2_ISR
  6681  076D                     _TMR2_ISR:	
  6682                           
  6683                           ;mcc_generated_files/tmr2.c: 123:     PIR1bits.TMR2IF = 0;
  6684                           
  6685                           ;incstack = 0
  6686                           ; Regs used in _TMR2_ISR: [wreg+status,2+status,0+pclath+cstack]
  6687  076D  0020               	movlb	0	; select bank0
  6688  076E  1091               	bcf	17,1	;volatile
  6689                           
  6690                           ;mcc_generated_files/tmr2.c: 125:     if(TMR2_InterruptHandler)
  6691  076F  0021               	movlb	1	; select bank1
  6692  0770  0853               	movf	_TMR2_InterruptHandler^(0+128),w
  6693  0771  0454               	iorwf	(_TMR2_InterruptHandler+1)^(0+128),w
  6694  0772  1903               	btfsc	3,2
  6695  0773  0008               	return
  6696                           
  6697                           ;mcc_generated_files/tmr2.c: 126:     {;mcc_generated_files/tmr2.c: 127:         TMR2_In
      +                          terruptHandler();
  6698  0774  0854               	movf	(_TMR2_InterruptHandler+1)^(0+128),w
  6699  0775  008A               	movwf	10
  6700  0776  0853               	movf	_TMR2_InterruptHandler^(0+128),w
  6701  0777  000A               	callw
  6702  0778  3187               	pagesel	$
  6703  0779  0008               	return
  6704  077A                     __end_of_TMR2_ISR:	
  6705                           
  6706                           	psect	text37
  6707  07DC                     __ptext37:	
  6708 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6709 ;; Defined at:
  6710 ;;		line 136 in file "mcc_generated_files/tmr2.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;                  1    wreg      void 
  6717 ;; Registers used:
  6718 ;;		None
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6728 ;;Total ram usage:        0 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_TMR2_Initialize
  6734 ;;		_TMR2_ISR
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           
  6739                           ;psect for function _TMR2_DefaultInterruptHandler
  6740  07DC                     _TMR2_DefaultInterruptHandler:	
  6741                           
  6742                           ;incstack = 0
  6743                           ; Regs used in _TMR2_DefaultInterruptHandler: []
  6744  07DC  0008               	return
  6745  07DD                     __end_of_TMR2_DefaultInterruptHandler:	
  6746                           
  6747                           	psect	text38
  6748  066D                     __ptext38:	
  6749 ;; *************** function _EUSART_Transmit_ISR *****************
  6750 ;; Defined at:
  6751 ;;		line 203 in file "mcc_generated_files/eusart.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  1    wreg      void 
  6758 ;; Registers used:
  6759 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        1 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_EUSART_Initialize
  6775 ;;		_INTERRUPT_InterruptManager
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _EUSART_Transmit_ISR
  6781  066D                     _EUSART_Transmit_ISR:	
  6782                           
  6783                           ;mcc_generated_files/eusart.c: 207:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  6787  066D  3040               	movlw	64
  6788  066E  0021               	movlb	1	; select bank1
  6789  066F  0259               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
  6790  0670  1803               	skipnc
  6791  0671  2E88               	goto	i1l424
  6792                           
  6793                           ;mcc_generated_files/eusart.c: 208:     {;mcc_generated_files/eusart.c: 209:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  6794  0672  082B               	movf	_eusartTxTail^(0+128),w
  6795  0673  3EA0               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
  6796  0674  0086               	movwf	6
  6797  0675  3001               	movlw	1	; select bank3/4
  6798  0676  0087               	movwf	7
  6799  0677  0801               	movf	1,w
  6800  0678  0023               	movlb	3	; select bank3
  6801  0679  009A               	movwf	26	;volatile
  6802  067A  3001               	movlw	1
  6803  067B  00F0               	movwf	??_EUSART_Transmit_ISR
  6804  067C  0870               	movf	??_EUSART_Transmit_ISR,w
  6805  067D  0021               	movlb	1	; select bank1
  6806  067E  07AB               	addwf	_eusartTxTail^(0+128),f	;volatile
  6807                           
  6808                           ;mcc_generated_files/eusart.c: 210:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  6809  067F  3040               	movlw	64
  6810  0680  022B               	subwf	_eusartTxTail^(0+128),w	;volatile
  6811  0681  1803               	btfsc	3,0
  6812                           
  6813                           ;mcc_generated_files/eusart.c: 211:         {;mcc_generated_files/eusart.c: 212:        
      +                               eusartTxTail = 0;
  6814  0682  01AB               	clrf	_eusartTxTail^(0+128)	;volatile
  6815                           
  6816                           ;mcc_generated_files/eusart.c: 214:         eusartTxBufferRemaining++;
  6817  0683  3001               	movlw	1
  6818  0684  00F0               	movwf	??_EUSART_Transmit_ISR
  6819  0685  0870               	movf	??_EUSART_Transmit_ISR,w
  6820  0686  07D9               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
  6821                           
  6822                           ;mcc_generated_files/eusart.c: 215:     }
  6823  0687  0008               	return
  6824  0688                     i1l424:	
  6825                           ;mcc_generated_files/eusart.c: 216:     else
  6826                           
  6827                           
  6828                           ;mcc_generated_files/eusart.c: 217:     {;mcc_generated_files/eusart.c: 218:         PIE
      +                          1bits.TXIE = 0;
  6829  0688  1211               	bcf	17,4	;volatile
  6830  0689  0008               	return
  6831  068A                     __end_of_EUSART_Transmit_ISR:	
  6832                           
  6833                           	psect	text39
  6834  0515                     __ptext39:	
  6835 ;; *************** function _EUSART_Receive_ISR *****************
  6836 ;; Defined at:
  6837 ;;		line 222 in file "mcc_generated_files/eusart.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;                  1    wreg      void 
  6844 ;; Registers used:
  6845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;Total ram usage:        0 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:    2
  6858 ;; This function calls:
  6859 ;;		Absolute function
  6860 ;;		_EUSART_DefaultErrorHandler
  6861 ;;		_EUSART_DefaultFramingErrorHandler
  6862 ;;		_EUSART_DefaultOverrunErrorHandler
  6863 ;;		_EUSART_RxDataHandler
  6864 ;; This function is called by:
  6865 ;;		_EUSART_Initialize
  6866 ;;		_INTERRUPT_InterruptManager
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _EUSART_Receive_ISR
  6872  0515                     _EUSART_Receive_ISR:	
  6873                           
  6874                           ;mcc_generated_files/eusart.c: 225:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  6875                           
  6876                           ;incstack = 0
  6877                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6878  0515  087C               	movf	_eusartRxHead,w	;volatile
  6879  0516  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
  6880  0517  0086               	movwf	6
  6881  0518  3001               	movlw	1	; select bank2/3
  6882  0519  0087               	movwf	7
  6883  051A  0181               	clrf	1
  6884                           
  6885                           ;mcc_generated_files/eusart.c: 227:     if(RCSTAbits.FERR){
  6886  051B  0023               	movlb	3	; select bank3
  6887  051C  1D1D               	btfss	29,2	;volatile
  6888  051D  2D2A               	goto	i1l2324
  6889                           
  6890                           ;mcc_generated_files/eusart.c: 228:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  6891  051E  087C               	movf	_eusartRxHead,w	;volatile
  6892  051F  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
  6893  0520  0086               	movwf	6
  6894  0521  3001               	movlw	1	; select bank2/3
  6895  0522  0087               	movwf	7
  6896  0523  1481               	bsf	1,1
  6897                           
  6898                           ;mcc_generated_files/eusart.c: 229:         EUSART_FramingErrorHandler();
  6899  0524  0021               	movlb	1	; select bank1
  6900  0525  0852               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
  6901  0526  008A               	movwf	10
  6902  0527  0851               	movf	_EUSART_FramingErrorHandler^(0+128),w
  6903  0528  000A               	callw
  6904  0529  3185               	pagesel	$
  6905  052A                     i1l2324:	
  6906                           
  6907                           ;mcc_generated_files/eusart.c: 232:     if(RCSTAbits.OERR){
  6908  052A  0023               	movlb	3	; select bank3
  6909  052B  1C9D               	btfss	29,1	;volatile
  6910  052C  2D39               	goto	i1l2330
  6911                           
  6912                           ;mcc_generated_files/eusart.c: 233:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  6913  052D  087C               	movf	_eusartRxHead,w	;volatile
  6914  052E  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
  6915  052F  0086               	movwf	6
  6916  0530  3001               	movlw	1	; select bank2/3
  6917  0531  0087               	movwf	7
  6918  0532  1501               	bsf	1,2
  6919                           
  6920                           ;mcc_generated_files/eusart.c: 234:         EUSART_OverrunErrorHandler();
  6921  0533  0021               	movlb	1	; select bank1
  6922  0534  0850               	movf	(_EUSART_OverrunErrorHandler+1)^(0+128),w
  6923  0535  008A               	movwf	10
  6924  0536  084F               	movf	_EUSART_OverrunErrorHandler^(0+128),w
  6925  0537  000A               	callw
  6926  0538  3185               	pagesel	$
  6927  0539                     i1l2330:	
  6928                           
  6929                           ;mcc_generated_files/eusart.c: 237:     if(eusartRxStatusBuffer[eusartRxHead].status){
  6930  0539  087C               	movf	_eusartRxHead,w	;volatile
  6931  053A  3E20               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
  6932  053B  0086               	movwf	6
  6933  053C  3001               	movlw	1	; select bank2/3
  6934  053D  0087               	movwf	7
  6935  053E  0801               	movf	1,w
  6936  053F  1903               	btfsc	3,2
  6937  0540  2D48               	goto	i1l2334
  6938                           
  6939                           ;mcc_generated_files/eusart.c: 238:         EUSART_ErrorHandler();
  6940  0541  0021               	movlb	1	; select bank1
  6941  0542  084E               	movf	(_EUSART_ErrorHandler+1)^(0+128),w
  6942  0543  008A               	movwf	10
  6943  0544  084D               	movf	_EUSART_ErrorHandler^(0+128),w
  6944  0545  000A               	callw
  6945  0546  3185               	pagesel	$
  6946                           
  6947                           ;mcc_generated_files/eusart.c: 239:     } else {
  6948  0547  0008               	return
  6949  0548                     i1l2334:	
  6950                           
  6951                           ;mcc_generated_files/eusart.c: 240:         EUSART_RxDataHandler();
  6952  0548  3186  26D6         	fcall	_EUSART_RxDataHandler
  6953  054A  0008               	return
  6954  054B                     __end_of_EUSART_Receive_ISR:	
  6955                           
  6956                           	psect	text40
  6957  07D2                     __ptext40:	
  6958 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  6959 ;; Defined at:
  6960 ;;		line 258 in file "mcc_generated_files/eusart.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;		None
  6963 ;; Auto vars:     Size  Location     Type
  6964 ;;		None
  6965 ;; Return value:  Size  Location     Type
  6966 ;;                  1    wreg      void 
  6967 ;; Registers used:
  6968 ;;		None
  6969 ;; Tracked objects:
  6970 ;;		On entry : 0/0
  6971 ;;		On exit  : 0/0
  6972 ;;		Unchanged: 0/0
  6973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;Total ram usage:        0 bytes
  6979 ;; Hardware stack levels used:    1
  6980 ;; This function calls:
  6981 ;;		Nothing
  6982 ;; This function is called by:
  6983 ;;		_EUSART_Initialize
  6984 ;;		_EUSART_Receive_ISR
  6985 ;; This function uses a non-reentrant model
  6986 ;;
  6987                           
  6988                           
  6989                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  6990  07D2                     _EUSART_DefaultOverrunErrorHandler:	
  6991                           
  6992                           ;mcc_generated_files/eusart.c: 261:     RCSTAbits.CREN = 0;
  6993                           
  6994                           ;incstack = 0
  6995                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  6996  07D2  0023               	movlb	3	; select bank3
  6997  07D3  121D               	bcf	29,4	;volatile
  6998                           
  6999                           ;mcc_generated_files/eusart.c: 262:     RCSTAbits.CREN = 1;
  7000  07D4  161D               	bsf	29,4	;volatile
  7001  07D5  0008               	return
  7002  07D6                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  7003                           
  7004                           	psect	text41
  7005  07DD                     __ptext41:	
  7006 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  7007 ;; Defined at:
  7008 ;;		line 256 in file "mcc_generated_files/eusart.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;		None
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      void 
  7015 ;; Registers used:
  7016 ;;		None
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        0 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; This function calls:
  7029 ;;		Nothing
  7030 ;; This function is called by:
  7031 ;;		_EUSART_Initialize
  7032 ;;		_EUSART_Receive_ISR
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _EUSART_DefaultFramingErrorHandler
  7038  07DD                     _EUSART_DefaultFramingErrorHandler:	
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  7042  07DD  0008               	return
  7043  07DE                     __end_of_EUSART_DefaultFramingErrorHandler:	
  7044                           
  7045                           	psect	text42
  7046  07D6                     __ptext42:	
  7047 ;; *************** function _EUSART_DefaultErrorHandler *****************
  7048 ;; Defined at:
  7049 ;;		line 266 in file "mcc_generated_files/eusart.c"
  7050 ;; Parameters:    Size  Location     Type
  7051 ;;		None
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;Total ram usage:        0 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:    1
  7070 ;; This function calls:
  7071 ;;		_EUSART_RxDataHandler
  7072 ;; This function is called by:
  7073 ;;		_EUSART_Initialize
  7074 ;;		_EUSART_Receive_ISR
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           
  7079                           ;psect for function _EUSART_DefaultErrorHandler
  7080  07D6                     _EUSART_DefaultErrorHandler:	
  7081                           
  7082                           ;mcc_generated_files/eusart.c: 267:     EUSART_RxDataHandler();
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7086  07D6  3186  26D6         	fcall	_EUSART_RxDataHandler
  7087  07D8  0008               	return
  7088  07D9                     __end_of_EUSART_DefaultErrorHandler:	
  7089                           
  7090                           	psect	text43
  7091  06D6                     __ptext43:	
  7092 ;; *************** function _EUSART_RxDataHandler *****************
  7093 ;; Defined at:
  7094 ;;		line 246 in file "mcc_generated_files/eusart.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;Total ram usage:        1 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; This function calls:
  7115 ;;		Nothing
  7116 ;; This function is called by:
  7117 ;;		_EUSART_Receive_ISR
  7118 ;;		_EUSART_DefaultErrorHandler
  7119 ;; This function uses a non-reentrant model
  7120 ;;
  7121                           
  7122                           
  7123                           ;psect for function _EUSART_RxDataHandler
  7124  06D6                     _EUSART_RxDataHandler:	
  7125                           
  7126                           ;mcc_generated_files/eusart.c: 248:     eusartRxBuffer[eusartRxHead++] = RCREG;
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  7130  06D6  0023               	movlb	3	; select bank3
  7131  06D7  0819               	movf	25,w	;volatile
  7132  06D8  00F0               	movwf	??_EUSART_RxDataHandler
  7133  06D9  087C               	movf	_eusartRxHead,w
  7134  06DA  3E20               	addlw	(low (_eusartRxBuffer| (0+512)))& (0+255)
  7135  06DB  0086               	movwf	6
  7136  06DC  3002               	movlw	2	; select bank4/5
  7137  06DD  0087               	movwf	7
  7138  06DE  0870               	movf	??_EUSART_RxDataHandler,w
  7139  06DF  0081               	movwf	1
  7140  06E0  3001               	movlw	1
  7141  06E1  00F0               	movwf	??_EUSART_RxDataHandler
  7142  06E2  0870               	movf	??_EUSART_RxDataHandler,w
  7143  06E3  07FC               	addwf	_eusartRxHead,f	;volatile
  7144                           
  7145                           ;mcc_generated_files/eusart.c: 249:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  7146  06E4  3040               	movlw	64
  7147  06E5  027C               	subwf	_eusartRxHead,w	;volatile
  7148  06E6  1803               	btfsc	3,0
  7149                           
  7150                           ;mcc_generated_files/eusart.c: 250:     {;mcc_generated_files/eusart.c: 251:         eus
      +                          artRxHead = 0;
  7151  06E7  01FC               	clrf	_eusartRxHead	;volatile
  7152                           
  7153                           ;mcc_generated_files/eusart.c: 253:     eusartRxCount++;
  7154  06E8  3001               	movlw	1
  7155  06E9  00F0               	movwf	??_EUSART_RxDataHandler
  7156  06EA  0870               	movf	??_EUSART_RxDataHandler,w
  7157  06EB  0021               	movlb	1	; select bank1
  7158  06EC  07A9               	addwf	_eusartRxCount^(0+128),f	;volatile
  7159  06ED  0008               	return
  7160  06EE                     __end_of_EUSART_RxDataHandler:	
  7161                           
  7162                           	psect	text44
  7163  07D9                     __ptext44:	
  7164 ;; *************** function _ADC_ISR *****************
  7165 ;; Defined at:
  7166 ;;		line 140 in file "mcc_generated_files/adc.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;		None
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;		None
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      void 
  7173 ;; Registers used:
  7174 ;;		None
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;Total ram usage:        0 bytes
  7185 ;; Hardware stack levels used:    1
  7186 ;; This function calls:
  7187 ;;		Nothing
  7188 ;; This function is called by:
  7189 ;;		_INTERRUPT_InterruptManager
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           
  7194                           ;psect for function _ADC_ISR
  7195  07D9                     _ADC_ISR:	
  7196                           
  7197                           ;mcc_generated_files/adc.c: 143:     PIR1bits.ADIF = 0;
  7198                           
  7199                           ;incstack = 0
  7200                           ; Regs used in _ADC_ISR: []
  7201  07D9  0020               	movlb	0	; select bank0
  7202  07DA  1311               	bcf	17,6	;volatile
  7203  07DB  0008               	return
  7204  07DC                     __end_of_ADC_ISR:	
  7205  007E                     btemp	set	126	;btemp
  7206  007E                     int$flags	set	126
  7207  007E                     wtemp0	set	126


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         238
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     79      79
    BANK1            80      5      63
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S1354_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR2_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _vfpfcnvrt->_fputc
    _dtoa->___aodiv
    _pad->_fputc
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _getValorSensor->_getValorADC
    _getValorADC->_ADC_GetConversion
    _SYSTEM_Initialize->_EUSART_Initialize
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART_Transmit_ISR
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_imprimeValoreSensores
    _imprimeValoreSensores->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _abs->___aomod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_imprimeValoreSensores
    _imprimeValoreSensores->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    8792
                  _SYSTEM_Initialize
              _imprimeValoreSensores
                             _motorA
                             _motorB
 ---------------------------------------------------------------------------------
 (1) _motorB                                               3     3      0      15
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _motorA                                               3     3      0      15
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _imprimeValoreSensores                                3     3      0    8174
                                             78 BANK0      1     1      0
                                              3 BANK1      2     2      0
                     _getValorSensor
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              10     4      6    7800
                                             71 BANK0      7     1      6
                                              0 BANK1      3     3      0
                     _getValorSensor (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    7629
                                             63 BANK0      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    7191
                                             47 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                30    22      8    5451
                                             17 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3220
                                              8 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     166
                                              1 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1429
                                              0 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3    1037
                                              4 COMMON     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      93
                                              3 COMMON     1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      62
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                              4 COMMON     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             19     3     16     613
                                              1 COMMON     3     3      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             27    11     16     625
                                              1 COMMON    11    11      0
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (2) _getValorSensor                                       4     2      2     241
                                              9 COMMON     2     0      2
                                              0 BANK0      2     2      0
                        _getValorADC
 ---------------------------------------------------------------------------------
 (3) _getValorADC                                          4     1      3      62
                                              5 COMMON     4     1      3
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversion                                    4     2      2      31
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     588
                     _ADC_Initialize
                   _EPWM1_Initialize
                   _EPWM2_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                              3 COMMON     1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              1 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EPWM2_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EPWM1_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0       0
                   Absolute function *
                            _ADC_ISR
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR2_ISR                                            0     0      0       0
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (13) _TMR2_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _ADC_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EPWM1_Initialize
     _EPWM2_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _WDT_Initialize
   _imprimeValoreSensores
     _getValorSensor
       _getValorADC
         _ADC_GetConversion
     _printf
       _getValorSensor (ARG)
         _getValorADC
           _ADC_GetConversion
       _vfprintf (ARG)
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _motorA
   _motorB

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _ADC_ISR *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _TMR2_ISR *
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      5      3F       7       78.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Thu Apr  4 22:32:31 2019

                ?_EUSART_SetRxInterruptHandler 0071               __end_of_TMR2_SetInterruptHandler 07AB  
                                  __CFG_CP$OFF 0000                                             l20 0652  
                                           l30 066C                                             l15 064F  
                                           l25 0655                                             l41 060B  
                                           l52 0613                                             l47 060F  
                                           l56 062A                               ??_getValorSensor 007B  
                                  __CFG_LVP$ON 0000                                            l303 06B7  
                                          l412 0636                                            l660 0482  
                                          l661 048E                                            l806 028C  
                                          l670 00C4                                            l671 00D8  
                                          l657 0462                                            l665 00A2  
                                          l674 016D                                            l666 00A9  
                                          l819 0368                                            _PR2 001B  
                                 __CFG_CPD$OFF 0000                                            _abs 0705  
                       ??_EUSART_RxDataHandler 0070                                            _pad 044A  
                              __end_of_ADC_ISR 07DC                 ?_EUSART_SetFramingErrorHandler 0071  
                              _TMR2_Initialize 0740                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   __CFG_IESO$ON 0000  
                     __end_of_EPWM2_Initialize 075F                                           ?_abs 0074  
                                         l2520 0200                                           l2530 0217  
                                         l2514 01D5                                           l2434 062C  
                                         l1642 0659                                           l2540 025F  
                                         l2532 0226                                           l2620 0181  
                                         l2700 05BE                                           l1652 0617  
                                         l2710 04A0                                           l2542 026B  
                                         l2518 01FC                                           l2462 05AC  
                                         l2630 0198                                           l2702 05DB  
                                         l2720 04AA                                           l2712 04A2  
                                         l2552 02C8                                           l2448 064A  
                                         l2472 05E8                                           l2480 06FE  
                                         l2608 00E0                                           l2616 0179  
                                         l2722 04AA                                           l2714 04A4  
                                         l2570 033B                                           l2458 0589  
                                         l2626 018C                                           l2716 04A6  
                                         l2708 049E                                           l2564 02FC  
                                         l2572 0347                                           l2556 02EF  
                                         l2492 0460                                           l2718 04A8  
                                         l2726 04B4                                           l2566 030B  
                                         l2478 06F3                                           l2750 0550  
                                         l2830 0661                                           l2832 04B9  
                                         l2728 04D3                                           l2488 0458  
                                         l2672 0416                                           l2498 0464  
                                         l2594 00D3                                           l2666 03F5  
                                         l2658 03BB                                           l2682 0427  
                                         l2762 0734                                           l2588 00BC  
                                         l2676 041C                                           l2828 061F  
                                         l2598 0105                                           ?_pad 0028  
                                         STR_1 077A                                           u2005 00F4  
                                         u2015 0100                                           u2125 057D  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u2137 06B2  
                                         _LATE 0110                                           u1615 05AA  
                                         u1730 0207                                           u1900 0078  
                                         u1910 0079                                           u1665 046E  
                                         u1765 024C                                           u1685 070E  
                                         u1865 0329                                           u1955 00B4  
                                         u1985 0177                                           _TMR2 001A  
                                         _WPUB 020D                                           _WPUE 0210  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         abs@a 0074                                           _dbuf 00AD  
                                         _main 072F                                           _dtoa 005C  
                                         _prec 00A4                                           _nout 00A0  
                                         pad@i 002C                                           pad@p 0029  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         pad@w 002E                                           btemp 007E  
                                __CFG_BOREN$ON 0000                                           start 0036  
                                __CFG_MCLRE$ON 0000                                          ??_abs 0076  
                                        ??_pad 002B                                  ?_EUSART_Write 0070  
               __size_of_OSCILLATOR_Initialize 0007                  __end_of_OSCILLATOR_Initialize 079F  
                              __end_of___aodiv 029E                                          ?_main 0070  
                                        ?_dtoa 0031                                __end_of___aomod 037A  
                                __CFG_WDTE$OFF 0000                                          _T2CON 001C  
                                        i1l260 0012                                          i1l262 001F  
                                        i1l424 0688                                          i1l264 002C  
                                        i1l269 0034                                          _RCREG 0199  
                                        _RCSTA 019D                                   vfpfcnvrt@fmt 004F  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TRISE 0090  
                                        _TXREG 019A                                          _TXSTA 019E  
                             __end_of_TMR2_ISR 077A                                          _flags 00A6  
                               _WDT_Initialize 07CE                                          _fputc 0580  
                                        _fputs 05E4                                          pad@fp 0030  
                                        _width 00A2                                          _putch 07C9  
                                        dtoa@d 0031                                          dtoa@i 004D  
                                        dtoa@n 0045                                          dtoa@p 003F  
                                        dtoa@s 0043                                          dtoa@w 0041  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __initialization 0038  
                                 __end_of_main 0740                                   __end_of_dtoa 01AB  
                               ??_EUSART_Write 0071                        __end_of_TMR2_Initialize 0751  
                                    ??_ADC_ISR 0070                    ?_INTERRUPT_InterruptManager 0070  
               ??_EUSART_SetRxInterruptHandler 0073                       _TMR2_SetInterruptHandler 07A5  
                                       ??_main 007C                                         ??_dtoa 0039  
                               __CFG_PLLEN$OFF 0000                         __end_of_WDT_Initialize 07D2  
    __end_of_EUSART_DefaultFramingErrorHandler 07DE     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 07DD                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 00CF  
                                       ?_fputc 0074                                         ?_fputs 0020  
                                       _ADRESH 009C                                         _ADRESL 009B  
                                       _CCPR1H 0292                                         _CCPR2H 0299  
                                       _CCPR1L 0291                                         _CCPR2L 0298  
                                       _APFCON 011D                                         _ANSELA 018C  
                         __size_of_getValorADC 0009                                         ?_putch 0070  
                                       _ANSELB 018D                                         _BORCON 0116  
                                       i1l2330 0539                                         i1l2324 052A  
                                       i1l2334 0548                         imprimeValoreSensores@i 00DD  
                                       _OSCCON 0099                                         u170lld 01D3  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       u181lld 02C6                                         _WDTCON 0097  
                               __CFG_PWRTE$OFF 0000                                   _CCPTMRS0bits 029E  
                                 vfprintf@cfmt 0065                                      ??___aodiv 0071  
                                    ??___aomod 0071                                 __CFG_STVREN$ON 0000  
                          _EUSART_Transmit_ISR 066D                                         _motorA 064D  
                                       _motorB 0609                                         _printf 071C  
                                       pad@buf 0028                                         dtoa@fp 003E  
                                       _strlen 06EE                                         fputc@c 0074  
                        _imprimeValoreSensores 054B                                         fputs@c 0024  
                                       fputs@i 0025                                         fputs@s 0027  
                              ?_WDT_Initialize 0070                       ADC_GetConversion@channel 0074  
                             __end_of_vfprintf 05E4       TMR2_SetInterruptHandler@InterruptHandler 0071  
                         ?_EUSART_Transmit_ISR 0070                              _SYSTEM_Initialize 06BE  
                      __end_of__initialization 0058                             ?_SYSTEM_Initialize 0070  
         __end_of_EUSART_SetTxInterruptHandler 07B1          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 07AB                              ?_EPWM1_Initialize 0070  
                               __pcstackCOMMON 0070                            ??_SYSTEM_Initialize 0074  
                                    ?_TMR2_ISR 0070                             ??_EPWM1_Initialize 0071  
                                __end_of_fputc 05B5                                  __end_of_fputs 0609  
                                __end_of_putch 07CE                               ?_TMR2_Initialize 0070  
                               _OPTION_REGbits 0095                           _eusartRxStatusBuffer 0120  
                            ?_EPWM2_Initialize 0070                ??_EUSART_SetOverrunErrorHandler 0073  
                                      ??_fputc 0077                      __end_of_SYSTEM_Initialize 06D6  
                                      ??_fputs 0021                          ??_EUSART_Transmit_ISR 0070  
                           ??_EPWM2_Initialize 0071                                        ??_putch 0073  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                         __end_of_EUSART_Write 064D                                __CFG_VCAPEN$OFF 0000  
                  __size_of_EUSART_Receive_ISR 0036                                     __pmaintext 072F  
                ?_EUSART_SetTxInterruptHandler 0071               _EUSART_TxDefaultInterruptHandler 00D7  
                                   ??_TMR2_ISR 0070                                     __pintentry 0004  
                                      _CCP1CON 0293                                        _CCP2CON 029A  
                                      _ECCP1AS 0295                                        _ECCP2AS 029C  
                                      _ADC_ISR 07D9                                        _BAUDCON 019F  
                                      ?_motorA 0070                                        ?_motorB 0070  
                 ??_EUSART_DefaultErrorHandler 0071                                        ?_printf 0067  
                       ?_imprimeValoreSensores 0070                        __size_of_ADC_Initialize 0009  
                                      ?_strlen 0071                                  _eusartRxCount 00A9  
                           __size_of_vfpfcnvrt 00D0                  __size_of_EUSART_RxDataHandler 0018  
                                      _OSCTUNE 0098                                        _PWM1CON 0294  
                                      _PWM2CON 029B                       ??_EUSART_SetErrorHandler 0073  
          __size_of_EUSART_DefaultErrorHandler 0003                     ??_TMR2_SetInterruptHandler 0073  
                                      ___aodiv 01AB                                        ___aomod 029E  
                                    ?_vfprintf 005F                                        __ptext1 0609  
                              __size_of_motorA 0020                                        __ptext2 064D  
                                      __ptext3 054B                                __size_of_motorB 0022  
                                      __ptext4 071C                                        __ptext5 05B5  
                                      __ptext6 037A                                        __ptext7 005C  
                                      __ptext8 044A                                        __ptext9 06EE  
                              __size_of_printf 0013                                __size_of_strlen 0017  
                        _OSCILLATOR_Initialize 0798                                      _T2CONbits 001C  
                                 __size_of_abs 0017                                   __size_of_pad 0050  
                     ??_PIN_MANAGER_Initialize 0071                        __size_of_getValorSensor 003E  
                   __size_of_SYSTEM_Initialize 0018                                        clrloop0 07A0  
                         end_of_initialization 0058          __end_of_EUSART_SetOverrunErrorHandler 07BD  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 07B7  
                                      fputc@fp 0076                                        fputs@fp 0020  
                            _EUSART_Initialize 04D8                             ?_EUSART_Initialize 0070  
                            __end_of_vfpfcnvrt 044A                                      _RCSTAbits 019D  
                                   ??_vfprintf 0062                                        strlen@a 0074  
                                      strlen@s 0075                            ??_EUSART_Initialize 0073  
                             ??_WDT_Initialize 0071                 ??_EUSART_SetTxInterruptHandler 0073  
                             __CFG_FOSC$INTOSC 0000                                  ??_getValorADC 0078  
                        __size_of_EUSART_Write 0022                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 0515                                      _TXSTAbits 019E  
         __end_of_TMR2_DefaultInterruptHandler 07DD          __size_of_TMR2_DefaultInterruptHandler 0001  
                 _TMR2_DefaultInterruptHandler 07DC             __end_of_EUSART_DefaultErrorHandler 07D9  
                   _EUSART_DefaultErrorHandler 07D6                                    vfpfcnvrt@ap 0050  
                                  vfpfcnvrt@fp 005E                                    vfpfcnvrt@ll 0056  
                                 _EUSART_Write 062B                              __size_of_TMR2_ISR 000D  
                               _ADC_Initialize 078F                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_motorA 066D                                 __end_of_motorB 062B  
                               __end_of_printf 072F                                 __end_of_strlen 0705  
                          start_initialization 0038                      __size_of_EPWM1_Initialize 000E  
              __size_of_PIN_MANAGER_Initialize 001B                                    __end_of_abs 071C  
                                  __end_of_pad 049A   EUSART_SetRxInterruptHandler@interruptHandler 0071  
 EUSART_SetTxInterruptHandler@interruptHandler 0071                                    putch@txData 0073  
                          __end_of_getValorADC 078F                 ?_EUSART_SetOverrunErrorHandler 0071  
                    __size_of_EPWM2_Initialize 000E                                    vfprintf@fmt 005F  
                   _EUSART_FramingErrorHandler 00D1                         _EUSART_SetErrorHandler 07C3  
                      ??_imprimeValoreSensores 006E                         __end_of_ADC_Initialize 0798  
                                     ?_ADC_ISR 0070                  ?_TMR2_DefaultInterruptHandler 0070  
                                     ??_motorA 0071                                       ??_motorB 0071  
                                     ??_printf 006D                                       ??_strlen 0073  
                  __end_of_EUSART_Transmit_ISR 068A                                    __pbssCOMMON 007C  
                                    ___latbits 0003                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00DA                               ___aodiv@dividend 0028  
                               _getValorSensor 049A                       __size_of_TMR2_Initialize 0011  
                   __end_of_EUSART_Receive_ISR 054B                     __size_of_EUSART_Initialize 003D  
             _EUSART_RxDefaultInterruptHandler 00D5                                      __pnvBANK1 00CD  
                 __end_of_EUSART_RxDataHandler 06EE                         _PIN_MANAGER_Initialize 068A  
                                    _dtoa$1055 003C                                       ?___aodiv 0020  
                                     ?___aomod 0020                               ___aodiv@quotient 0074  
                              ?_ADC_Initialize 0070                                   _eusartRxHead 007C  
                                 _eusartTxHead 00AC                                   _eusartRxTail 00AA  
                                 _eusartTxTail 00AB                   ??_INTERRUPT_InterruptManager 0071  
                            __size_of_vfprintf 002F                        _eusartTxBufferRemaining 00D9  
                       __end_of_getValorSensor 04D8                                    _getValorADC 0786  
                               __size_of_fputc 0035                                 __size_of_fputs 0025  
                               __size_of_putch 0005                                 _eusartRxBuffer 0220  
                               _eusartTxBuffer 01A0         EUSART_SetErrorHandler@interruptHandler 0071  
                                     _LATCbits 010E                                      clear_ram0 079F  
                                     _PIE1bits 0091                              _eusartRxLastError 00A8  
          __size_of_INTERRUPT_InterruptManager 0032                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0073      __end_of_EUSART_DefaultOverrunErrorHandler 07D6  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 07D2  
                                     _TMR2_ISR 076D                                       _PSTR1CON 0296  
                                     _PSTR2CON 029D                                      _vfpfcnvrt 037A  
                             __size_of_ADC_ISR 0003                                     _ADCON0bits 009D  
                              ?_getValorSensor 0079                 ??_TMR2_DefaultInterruptHandler 0070  
                             _EPWM1_Initialize 075F              __size_of_TMR2_SetInterruptHandler 0006  
                    ?_TMR2_SetInterruptHandler 0071                              ??_TMR2_Initialize 0073  
                             _EPWM2_Initialize 0751                                     vfprintf@ap 0061  
                                   vfprintf@fp 0064                              _ADC_GetConversion 06A5  
                      ??_OSCILLATOR_Initialize 0071                            _EUSART_ErrorHandler 00CD  
                           ?_ADC_GetConversion 0071                               __size_of___aodiv 00F3  
                             __size_of___aomod 00DC                            getValorSensor@valor 0020  
                  ?_EUSART_DefaultErrorHandler 0070                                     ?_vfpfcnvrt 004F  
                              ___aodiv@divisor 0020                                ___aodiv@counter 0072  
                          ??_ADC_GetConversion 0073                           _EUSART_RxDataHandler 06D6  
                                     __ptext10 05E4                                       __ptext11 0580  
                                     __ptext20 06BE                                       __ptext12 07C9  
                                     __ptext21 07CE                                       __ptext13 062B  
                                     __ptext30 07BD                                       __ptext22 0740  
                                     __ptext14 0705                                       __ptext31 07C3  
                                     __ptext23 07A5                                       __ptext15 029E  
                                     __ptext40 07D2                                       __ptext32 0751  
                                     __ptext24 068A                                       __ptext16 01AB  
                                     __ptext41 07DD                                       __ptext33 075F  
                                     __ptext25 0798                                       __ptext17 049A  
                                     __ptext42 07D6                                       __ptext34 078F  
                                     __ptext26 04D8                                       __ptext18 0786  
                                     __ptext43 06D6                                       __ptext27 07AB  
                                     __ptext19 06A5                                       __ptext44 07D9  
                                     __ptext36 076D                                       __ptext28 07B1  
                                     __ptext37 07DC                                       __ptext29 07B7  
                                     __ptext38 066D                                       __ptext39 0515  
                                 motorA@status 0073                                   motorB@status 0073  
                                __size_of_main 0011                                  __size_of_dtoa 014F  
                    __end_of_ADC_GetConversion 06BE                        ?_EUSART_SetErrorHandler 0071  
EUSART_SetOverrunErrorHandler@interruptHandler 0071                                       int$flags 007E  
                                     _vfprintf 05B5             __end_of_INTERRUPT_InterruptManager 0036  
                   _INTERRUPT_InterruptManager 0004                                      printf@fmt 0067  
        __end_of_EUSART_SetFramingErrorHandler 07C3         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 07BD                 __size_of_imprimeValoreSensores 0035  
                __end_of_imprimeValoreSensores 0580                               ___aomod@dividend 0028  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 07C9  
                            __CFG_CLKOUTEN$OFF 0000                               ??_ADC_Initialize 0071  
         __end_of_EUSART_SetRxInterruptHandler 07B7          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 07B1                                   getValorADC@c 0078  
                                     printf@ap 00DC                             _EUSART_Receive_ISR 0515  
EUSART_SetFramingErrorHandler@interruptHandler 0071                                ___aomod@divisor 0020  
                                  ??_vfpfcnvrt 0051                                ___aomod@counter 0072  
                                __pstringtext1 077A                                  __pstringtext2 0000  
                          ?_EUSART_Receive_ISR 0070                                   ?_getValorADC 0075  
                           EUSART_Write@txData 0072                   __size_of_EUSART_Transmit_ISR 001D  
                                 ___aodiv@sign 0073                 __end_of_PIN_MANAGER_Initialize 06A5  
                      getValorSensor@numSensor 0079                           ??_EUSART_Receive_ISR 0071  
                        _TMR2_InterruptHandler 00D3                     __size_of_ADC_GetConversion 0019  
                                 ___aomod@sign 0073                       __end_of_EPWM1_Initialize 076D  
